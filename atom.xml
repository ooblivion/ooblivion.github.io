<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OrangeBlog</title>
  
  
  <link href="https://ooblivion.github.io/atom.xml" rel="self"/>
  
  <link href="https://ooblivion.github.io/"/>
  <updated>2025-03-07T17:44:41.000Z</updated>
  <id>https://ooblivion.github.io/</id>
  
  <author>
    <name>orange</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ウォーターフォールモデル各段階の成果物</title>
    <link href="https://ooblivion.github.io/Deliverables-of-each-stage-of-the-waterfall-model/"/>
    <id>https://ooblivion.github.io/Deliverables-of-each-stage-of-the-waterfall-model/</id>
    <published>2025-01-02T09:35:10.000Z</published>
    <updated>2025-03-07T17:44:41.000Z</updated>
    
    
    <summary type="html">ウォーターフォールモデルは、ソフトウェア開発において各工程を順番に進める開発モデルです。このモデルでは、各段階ごとに明確な成果物（ドキュメントやシステム成果）を作成し、次の工程へと引き継ぎます。本記事では、ウォーターフォールモデルの主要な段階と、それぞれの成果物について概説します。</summary>
    
    
    
    <category term="開発プロセスモデル" scheme="https://ooblivion.github.io/categories/%E9%96%8B%E7%99%BA%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E3%83%A2%E3%83%87%E3%83%AB/"/>
    
    
    <category term="テスト" scheme="https://ooblivion.github.io/tags/%E3%83%86%E3%82%B9%E3%83%88/"/>
    
    <category term="設計" scheme="https://ooblivion.github.io/tags/%E8%A8%AD%E8%A8%88/"/>
    
    <category term="ウォーターフォール" scheme="https://ooblivion.github.io/tags/%E3%82%A6%E3%82%A9%E3%83%BC%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A9%E3%83%BC%E3%83%AB/"/>
    
  </entry>
  
  <entry>
    <title>静的ブログをAWSにデプロイ</title>
    <link href="https://ooblivion.github.io/Deploying-Static-Blog-to-AWS/"/>
    <id>https://ooblivion.github.io/Deploying-Static-Blog-to-AWS/</id>
    <published>2024-11-12T08:26:08.000Z</published>
    <updated>2024-12-13T17:31:34.000Z</updated>
    
    
    <summary type="html">静的ブログ（Hexo, Hugo, Jekyll など）を AWS にデプロイする方法はいくつかあります。ここでは代表的な AWS Amplify, S3 + CloudFront, EC2 の 3 つの方法を紹介します。</summary>
    
    
    
    <category term="クラウド" scheme="https://ooblivion.github.io/categories/%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89/"/>
    
    
    <category term="AWS" scheme="https://ooblivion.github.io/tags/AWS/"/>
    
    <category term="Hexo" scheme="https://ooblivion.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>WBSの管理方法、タスクの割り当て、進捗報告の方法</title>
    <link href="https://ooblivion.github.io/WBS-management-task-assignment-progress/"/>
    <id>https://ooblivion.github.io/WBS-management-task-assignment-progress/</id>
    <published>2024-11-03T12:29:57.000Z</published>
    <updated>2024-12-17T16:16:33.000Z</updated>
    
    
    <summary type="html">この文章では、WBSの管理方法、タスクの割り当て、進捗報告について解説しています。特に、3〜5人のSubleaderとして小規模なプロジェクトを担当する際に、効率的な進捗管理の方法やタスクの分解、優先順位設定の重要性について具体的なアドバイスを提供します。チームの進捗を正確に把握し、プロジェクトの成功に導くためのポイントが紹介されています。</summary>
    
    
    
    <category term="プロジェクト管理" scheme="https://ooblivion.github.io/categories/%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="WBS" scheme="https://ooblivion.github.io/tags/WBS/"/>
    
    <category term="進捗管理" scheme="https://ooblivion.github.io/tags/%E9%80%B2%E6%8D%97%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Git-Rebaseの使用方法</title>
    <link href="https://ooblivion.github.io/How-To-Use-GitRebase/"/>
    <id>https://ooblivion.github.io/How-To-Use-GitRebase/</id>
    <published>2024-10-14T03:11:08.000Z</published>
    <updated>2024-12-21T16:36:34.000Z</updated>
    
    
    <summary type="html">git rebase は、Gitの履歴を変更するための強力なコマンドで、主にブランチの変更を統合するために使用されます。rebase を使うと、履歴がきれいになり、複雑なマージコミットを減らすことができます。</summary>
    
    
    
    <category term="バージョン管理" scheme="https://ooblivion.github.io/categories/%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="Git" scheme="https://ooblivion.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>COBOL学習記録と基本の使い方</title>
    <link href="https://ooblivion.github.io/COBOL-learning-guide-and-basic-usage/"/>
    <id>https://ooblivion.github.io/COBOL-learning-guide-and-basic-usage/</id>
    <published>2024-09-29T17:56:48.000Z</published>
    <updated>2024-12-06T02:22:33.000Z</updated>
    
    
    <summary type="html">本記事では、COBOLの基本的な使い方について学習した内容を記録します。COBOLの歴史的背景や特徴を簡単に紹介した後、基本的なプログラムの書き方や実行方法について説明します。また、COBOLを学習する際のポイントや気づいたことについてもまとめます。</summary>
    
    
    
    <category term="技術概要" scheme="https://ooblivion.github.io/categories/%E6%8A%80%E8%A1%93%E6%A6%82%E8%A6%81/"/>
    
    
    <category term="COBOL" scheme="https://ooblivion.github.io/tags/COBOL/"/>
    
    <category term="学習記録" scheme="https://ooblivion.github.io/tags/%E5%AD%A6%E7%BF%92%E8%A8%98%E9%8C%B2/"/>
    
  </entry>
  
  <entry>
    <title>プロジェクトが遅延している場合の対応策</title>
    <link href="https://ooblivion.github.io/Measures-for-handling-project-delay/"/>
    <id>https://ooblivion.github.io/Measures-for-handling-project-delay/</id>
    <published>2024-07-07T11:54:34.000Z</published>
    <updated>2024-08-07T01:07:01.000Z</updated>
    
    
    <summary type="html">プロジェクトの遅延時、原因分析、チームとのコミュニケーション強化、計画見直しが重要です。是正措置を講じ、遅延を最小限に抑え、関係者と調整し、次回に向けた改善策を検討します。</summary>
    
    
    
    <category term="プロジェクト管理" scheme="https://ooblivion.github.io/categories/%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="進捗管理" scheme="https://ooblivion.github.io/tags/%E9%80%B2%E6%8D%97%E7%AE%A1%E7%90%86/"/>
    
    <category term="障害対応" scheme="https://ooblivion.github.io/tags/%E9%9A%9C%E5%AE%B3%E5%AF%BE%E5%BF%9C/"/>
    
  </entry>
  
  <entry>
    <title>障害対応および影響調査の際に準備すべき資料</title>
    <link href="https://ooblivion.github.io/Materials-to-prepare-for-incident-response-and-impact-investigation/"/>
    <id>https://ooblivion.github.io/Materials-to-prepare-for-incident-response-and-impact-investigation/</id>
    <published>2024-04-02T06:57:11.000Z</published>
    <updated>2024-07-22T23:56:47.000Z</updated>
    
    
    <summary type="html">障害対応や影響調査を行う際、必要な資料を的確に準備することが重要です。これにより、障害が発生した際に迅速かつ効果的に対応でき、関係者への報告や再発防止策を立案するための基盤が築かれます。</summary>
    
    
    
    <category term="プロジェクト管理" scheme="https://ooblivion.github.io/categories/%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="障害対応" scheme="https://ooblivion.github.io/tags/%E9%9A%9C%E5%AE%B3%E5%AF%BE%E5%BF%9C/"/>
    
    <category term="影響調査" scheme="https://ooblivion.github.io/tags/%E5%BD%B1%E9%9F%BF%E8%AA%BF%E6%9F%BB/"/>
    
  </entry>
  
  <entry>
    <title>JUnit 4とJUnit 5の違い</title>
    <link href="https://ooblivion.github.io/The-difference-between-JUnit-4-and-JUnit-5/"/>
    <id>https://ooblivion.github.io/The-difference-between-JUnit-4-and-JUnit-5/</id>
    <published>2023-11-12T08:26:08.000Z</published>
    <updated>2023-12-23T17:31:34.000Z</updated>
    
    
    <summary type="html">現在のプロジェクトでは、いくつかの古いプロジェクトがJUnit 4を使用していますが、新しいプロジェクトでは一般的にJUnit 5とMockitoが使用されています。本記事では、JUnit 4とJUnit 5の違いを記録します。</summary>
    
    
    
    <category term="技術概要" scheme="https://ooblivion.github.io/categories/%E6%8A%80%E8%A1%93%E6%A6%82%E8%A6%81/"/>
    
    
    <category term="Java" scheme="https://ooblivion.github.io/tags/Java/"/>
    
    <category term="Junit" scheme="https://ooblivion.github.io/tags/Junit/"/>
    
    <category term="テスト" scheme="https://ooblivion.github.io/tags/%E3%83%86%E3%82%B9%E3%83%88/"/>
    
  </entry>
  
  <entry>
    <title>JSPに取って代わった技術は何ですか？</title>
    <link href="https://ooblivion.github.io/What-technology-has-replaced-JSP/"/>
    <id>https://ooblivion.github.io/What-technology-has-replaced-JSP/</id>
    <published>2023-08-02T01:18:00.000Z</published>
    <updated>2024-01-08T11:49:04.000Z</updated>
    
    
    <summary type="html">この記事では、JSP（JavaServer Pages）が新しい技術に取って代わられつつある現状について説明しています。代替技術として、Thymeleaf、Angular、React、Next.js、APIベースのアーキテクチャなどが挙げられ、それぞれの特徴と使用シーンについて触れています。また、JSPとThymeleafを用いたコードの比較を通じて、両者の違いを明確にし、Thymeleafの利便性とAJAXとの連携方法についても解説しています。</summary>
    
    
    
    <category term="フロントバック通信" scheme="https://ooblivion.github.io/categories/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%83%90%E3%83%83%E3%82%AF%E9%80%9A%E4%BF%A1/"/>
    
    
    <category term="Java" scheme="https://ooblivion.github.io/tags/Java/"/>
    
    <category term="JSP" scheme="https://ooblivion.github.io/tags/JSP/"/>
    
    <category term="Thymeleaf" scheme="https://ooblivion.github.io/tags/Thymeleaf/"/>
    
    <category term="Ajax" scheme="https://ooblivion.github.io/tags/Ajax/"/>
    
    <category term="fetch" scheme="https://ooblivion.github.io/tags/fetch/"/>
    
  </entry>
  
  <entry>
    <title>Javaプロジェクトにおける前後端データの交換方法</title>
    <link href="https://ooblivion.github.io/Methods-of-Data-Transfer-Between-Frontend-and-Backend-in-Java-Projects/"/>
    <id>https://ooblivion.github.io/Methods-of-Data-Transfer-Between-Frontend-and-Backend-in-Java-Projects/</id>
    <published>2023-02-11T23:21:18.000Z</published>
    <updated>2024-01-08T11:49:04.000Z</updated>
    
    
    <summary type="html">この記事では、Javaプロジェクトにおけるフロントエンドとバックエンドのデータ交換方法について論じています。具体的には、さまざまな一般的な技術とシーンが取り上げられています。</summary>
    
    
    
    <category term="フロントバック通信" scheme="https://ooblivion.github.io/categories/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%83%90%E3%83%83%E3%82%AF%E9%80%9A%E4%BF%A1/"/>
    
    
    <category term="Java" scheme="https://ooblivion.github.io/tags/Java/"/>
    
    <category term="Ajax" scheme="https://ooblivion.github.io/tags/Ajax/"/>
    
    <category term="Axios" scheme="https://ooblivion.github.io/tags/Axios/"/>
    
    <category term="XMLHttpRequest" scheme="https://ooblivion.github.io/tags/XMLHttpRequest/"/>
    
  </entry>
  
</feed>
