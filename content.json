{"posts":[{"title":"基本設計記事","text":"基本設計について記事 基本設計 とは■基本設計要件定義のフェーズで作成された要件定義書をもとにして、システムの骨組みを設計する工程です。完成した基本設計書で実装が進められていくため、要件を満たしているか、また、システムがどのようなものであるかを考慮して設計していきます。 基本設計の工程では、以下の成果物を作成していきます。・画面遷移図・画面設計書・DB設計書・API設計書 ■DB とはDataBaseの略。データの基地(data + base)を意味します。 データを保管する貯蔵庫の役割を果たすもので、アプリケーションを利用するうえで必要となるデータの集まりを指します。 ■API とは「Application Programming Interface」の略。それぞれの単語の意味は以下の通りです。・Application(アプリケーション)：パソコンやスマホの中で動くソフト・Programming(プログラミング)：パソコンやスマホに実行させる指示を出す・Interface(インターフェース) ：接続部分や接触する箇所 それぞれの単語を組み合わせると、「アプリケーションとプログラムをつなぐもの」という意味になります。つまりAPIとは、いくつかのアプリケーションやソフトウェア同士が情報をやり取りする際に使用されるプログラミング上の窓口と理解しておくとよいでしょう。 ■APIの動作イメージAPI利用者が、事前に定められた形式に従って使いたい機能や情報をまとめてリクエスト（要求）します。それに対し、API側はリクエストを受け取ると、送信された条件を処理してレスポンス（応答）を返します。 リクエストの定められた形式については、APIサービスの提供者側が必要な情報をまとめて定義し、利用者に提示します。 面遷移図画面設計書API設計書DB設計書","link":"/base-design/"},{"title":"HexoのIcarusテーマを使ってブログを構築","text":"はじめに私は自分が記憶力があまり良くないことを知っていますので、何かを書いて記録するのが好きです。これは一種の知識の復習とも言えます。 TODO 添加图床 音乐播放插件 如何禁止复制页面中的文本 如何添加一个翻译按钮 seo搜索引擎优化 添加一个可以隐藏右边栏目的按钮，点击之后只显示文章，可以更加专注阅读 如何无缝切换到其他设备编写博客 blogについて 本を読む記事 Amazon web service業務システム設計移行ガイド AWS認定 クラウドプラクティショナー 项目 设计 开发 上线 部署的流程记录 项目中用过的开发工具和相关软件和使用方法速记 細かい設定 主页也文章页面调整 关于分享组件 评论插件 图片插件 文章排版设置 text licenses hide 在个人页面头部加入 aritcle: ? licenses 标签和目录的写法 12345678910111213141516171819tags: - 123 - 456tags: [123, 456]多标签写法，这2种都是一样的效果，用哪个都可以，建议使用列表[]式，直观清晰。这是默认的写法，给文章添加一个分类。categories: 123这会将文章分类123/456子分类目录下。categories: [123, 456]这会将文章分类到123/456子分类目录下。categories: - 123 - 456多标签写法，文章被分类到123、456以及123的自分类789这3个分类下面，官方指定写法。categories: - [123] - [456] - [123, 789] プログラマーがブログを書くときにタグとカテゴリを柔軟に使用する方法プログラマがブログを書くとき、タグとカテゴリを使用すると、読者が興味深いコンテンツをより迅速に見つけられるようになり、非常に便利です。以下にいくつかの提案を示します。 タグを使用する: 各ブログ投稿を、投稿コンテンツのキーワードまたはトピックである関連タグに関連付けます。 タグは簡潔かつ関連性を保ち、あまり多くのタグを使用しないでください。通常、記事ごとに 2 ～ 5 個のタグが適切です。 タグには技術用語、プログラミング言語、フレームワーク名、質問の種類などを使用できるため、読者は興味やニーズに基づいてフィルタリングできます。 カテゴリを使用する: ブログ投稿をトピックまたはコンテンツごとに分類し、各カテゴリが関連する投稿のグループを表します。 カテゴリには、技術分野、プロジェクトの種類、プログラミング言語、アプリケーション シナリオなどが含まれます。分類構造は、ブログの内容と読者のニーズに応じて設計されます。 読者の閲覧とナビゲーションを容易にするために、カテゴリの過度の細分化を避け、カテゴリの階層を明確に保ちます。 柔軟な使用: ブログを書くときは、記事の内容を説明する適切なタグとカテゴリを選択し、必要に応じて新しいタグとカテゴリを追加します。 タグとカテゴリは、読者のフィードバックや閲覧状況に基づいて調整および最適化され、読者の興味やニーズにより沿ったものにすることができます。 タグ クラウドまたはカテゴリ ナビゲーションを使用してタグとカテゴリを読者に表示し、読者が興味のあるコンテンツをすぐに見つけられるようにすることができます。 一貫性を維持する: 同じタグとカテゴリの命名規則を使用して、ブログ全体でタグとカテゴリの一貫性を保ちます。 複数の作成者またはチーム メンバーがブログを共同執筆する場合、統一されたタグとカテゴリの管理戦略を開発して、ブログ全体の一貫性と標準化を確保できます。 タグとカテゴリを柔軟に使用することで、プログラマはブログのコンテンツをより適切に整理および管理し、読者の読書体験を向上させ、興味のあるコンテンツをより簡単に見つけられるようにし、技術的なトピックの理解と応用を深めることができます。 中国語12345678910111213141516写博客时，使用 tags（标签）和 category（分类）是非常有用的，可以更快速地找到感兴趣的内容。1. 使用 Tags： - 将每篇博客文章与相关的标签关联起来，这些标签应该是文章内容的关键词或主题。 - 保持标签的简洁和相关性，不要使用太多的标签，一般每篇文章使用 2 到 5 个标签比较合适。 - 标签可以是技术术语、编程语言、框架名称、问题类型等，以便读者可以根据自己的兴趣和需求进行筛选。2. 使用 Category： - 将博客文章按照主题或内容进行分类，每个分类代表一组相关的文章。 - 分类可以是技术领域、项目类型、编程语言、应用场景等，根据博客的内容和读者的需求来设计分类结构。 - 避免过度细分分类，保持分类的层次结构清晰，方便读者浏览和导航。3. 灵活运用： - 在撰写博客时，选择适当的标签和分类来描述文章内容，并根据需要添加新的标签和分类。 - 可以根据读者的反馈和浏览情况来调整和优化标签和分类，使其更符合读者的兴趣和需求。 - 可以使用标签云或分类导航等方式将标签和分类展示给读者，方便他们快速找到感兴趣的内容。4. 一貫性を維持する: - 在整个博客中保持标签和分类的一致性，使用相同的标签和分类命名规范。 - 如果有多个作者或团队成员共同撰写博客，可以制定统一的标签和分类管理策略，确保博客整体的一致性和规范性。 サンプルCategory: テクノロジー バックエンド/フロントエンド/インフラ/設計 ライフスタイル 思い/ジャーナル/日本語学習/日本の生活/骑车风景记/歌词笔记/杂记 作業カテゴリー 作業メモ/勉強ノート/試験の準備/日本の生活/骑车风景记/歌词笔记/ その他 ランダムな考え 随想/ tags: front JavaScript/React/Vue/Node.js backend Java/Kotlin/Spring/RubyOnRails/MVC/BFF db Oracle/MySQL/MongoDB/PostgreSQL/redis cloud&infra Docker/AWS/K8S/CI-CD others 雑記/ front-end/ back-end/作業メモ working-note/勉強ノート study-note/振り返り/筋トレ Waterfall-model 要件定義/基本設計/詳細設計/実装/テスト/リリース マークダウン Markdowntitlecode","link":"/hexo-create-blog/"},{"title":"バージョン管理ツール","text":"はじめにGitgit使用技巧 SVNTFS","link":"/version-control-toll/"},{"title":"日本のIT職記録","text":"本記事についてxxx","link":"/japan-it-working-memo/"},{"title":"CI&#x2F;CD ハンズオン","text":"本記事についてはじめに","link":"/cicd-handon/"},{"title":"日本語の句読点をざっとチェック","text":"本記事についてはじめに 記号 一般的な読み方 JIS X 0201 規格での名称 ASCII 規格での名称 ! びっくりマーク、エクスクラメーションマーク 感嘆符 Exclamation Mark ” ダブルクオート、二重引用符 引用符 Quotation Mark # シャープ、いげた 番号記号 Number Sign $ ドルマーク、ダラー ドル記号 Dollar Sign % パーセント パーセント Percent Sign &amp; アンパサンド、アンド アンパサンド Ampersand ‘ シングルクオート、一重引用符 アポストロフィー、アクサンテギュ Apostrophe ( 左(丸)かっこ、開き(丸)かっこ 左小かっこ Left Parenthesis ) 右(丸)かっこ、閉じ(丸)かっこ、こっか 右小かっこ Right Parenthesis * アスタリスク、星、スター アステリスク Asterisk + プラス(記号)、たす、プラ 正符号 Plus Sign , コンマ、カンマ コンマ、セディユ Comma - マイナス(記号)、ハイフン、ひく ハイフン、負符号 Hyphen-Minus . ドット、ピリオド、点、ぽち ピリオド Full Stop / スラッシュ、スラ、斜線 斜線 Solidus : コロン コロン Colon ; セミコロン セミコロン Semicolon &lt; 小なり(記号) 不等号(より小) Less-Than Sign = イコール、等号 等号 Equals Sign &gt; 大なり(記号) 不等号(より大) Greater-Than Sign ? はてなマーク、クエスチョンマーク 疑問符 Question Mark @ アットマーク 単価記号 Commercial At [ 左ブラケット、左鍵かっこ、左大かっこ 左大かっこ Left Square Bracket ¥ バックスラッシュ、バックスラ、逆スラッシュ Reverse Solidus ] 右ブラケット、右鍵かっこ、右大かっこ 右大かっこ Right Square Bracket ^ ハット、カレット、やま アクサンシルコンフレックス Circumflex Accent _ アンダースコア、下線、アンダーライン アンダライン Low Line ‘ バッククオート、逆クオート、逆引用符 アクサングラーブ Grave Accent { 左中かっこ、左ブレース、左カーリーブラケット 左中かっこ Left Curly Bracket | 縦棒、縦線 縦線 Vertical Line } 右中かっこ、右ブレース、右カーリーブラケット 右中かっこ Right Curly Bracket ~ チルダ、波線、にょろ Tilde JP 。 てん 句号 、 てんてん 逗号 ！ えっくすくらめーしょんまーく 感叹号 exclamation mark 这个excel转为html的网站挺好用的excel-to-html","link":"/japanese-punctuation-check/"},{"title":"Springでクロスドメインアクセスを実現する方法","text":"Spring でのクロスドメイン アクセスの問題を解決するには、さまざまな方法があります。以下に、いくつかの一般的な解決策と対応するコード例を示します。 @CrossOrigin アノテーションを使用しますSpring MVC コントローラー メソッドに @CrossOrigin アノテーションを追加すると、特定のオリジンがドメインを越えてメソッドにアクセスできるようになります。 12345678910111213import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class MyController { @CrossOrigin(origins = &quot;http://example.com&quot;) @GetMapping(&quot;/data&quot;) public String getData() { return &quot;Some data&quot;; }} WebMvcConfigurer を使用して構成しますSpring Boot では、WebMvcConfigurer インターフェイスを実装することで、クロスドメイン アクセスをグローバルに構成できます。 1234567891011121314151617import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.config.annotation.CorsRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;@Configurationpublic class CorsConfig implements WebMvcConfigurer { @Override public void addCorsMappings(CorsRegistry registry) { registry.addMapping(&quot;/api/**&quot;) .allowedOrigins(&quot;http://example.com&quot;) .allowedMethods(&quot;GET&quot;, &quot;POST&quot;) .allowedHeaders(&quot;header1&quot;, &quot;header2&quot;) .allowCredentials(true) .maxAge(3600); }} フィルターフィルターを使用しますFilter フィルターを作成し、その中にクロスドメイン関連の応答ヘッダー情報を構成します。 12345678910111213141516171819202122import javax.servlet.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;public class CorsFilter implements Filter { @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { HttpServletResponse httpResponse = (HttpServletResponse) response; HttpServletRequest httpRequest = (HttpServletRequest) request; httpResponse.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://example.com&quot;); httpResponse.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;GET,POST&quot;); httpResponse.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;header1,header2&quot;); httpResponse.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;); httpResponse.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;); chain.doFilter(request, response); }} 上記は、Spring でクロスドメイン アクセスの問題を解決するための一般的な方法をいくつか示していますが、どの方法を選択するかは、プロジェクトのニーズと設計によって異なります。","link":"/spring-cross-domain-achive/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"markdown","slug":"markdown","link":"/tags/markdown/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"work","slug":"work","link":"/tags/work/"},{"name":"設計","slug":"設計","link":"/tags/%E8%A8%AD%E8%A8%88/"},{"name":"spring","slug":"spring","link":"/tags/spring/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"back-end","slug":"back-end","link":"/tags/back-end/"}],"categories":[{"name":"作業","slug":"作業","link":"/categories/%E4%BD%9C%E6%A5%AD/"},{"name":"作業メモ","slug":"作業/作業メモ","link":"/categories/%E4%BD%9C%E6%A5%AD/%E4%BD%9C%E6%A5%AD%E3%83%A1%E3%83%A2/"}],"pages":[{"title":"自己紹介","text":"","link":"/about/index.html"}]}