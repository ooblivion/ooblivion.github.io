{"posts":[{"title":"静的ブログをAWSにデプロイ","text":"静的ブログを AWS にデプロイする方法として、AWS Amplify、S3 + CloudFront、EC2 などの選択肢があります。Amplify を使用すると、GitHub と連携して簡単に自動デプロイが可能です。S3 + CloudFront を使えば、低コストで高速な配信が実現できます。EC2 はカスタマイズ性が高く、より自由にサーバー管理ができます。それぞれの方法に応じた手順を選んで、ブログを手軽に公開しましょう。 AWS Amplify（最も簡単） GitHub と連携し、コードを push するだけで自動デプロイ HTTPS やカスタムドメインも簡単に設定可能 S3 + CloudFront（コストを抑えたい場合） S3 に静的ファイルをアップロードし、CloudFront で CDN 配信 コストが低く、パフォーマンスも良い EC2（カスタマイズ性が高い） Nginx や Apache を使ってブログをホスティング 高度なカスタマイズが可能だが、サーバー管理が必要 AWS Amplify https://aws.amazon.com/jp/getting-started/hands-on/host-static-website/ Hexo 環境（Node.js, Hexo CLI をローカルにインストール済み） AWS アカウント GitHub / GitLab / Bitbucket のアカウント（Hexo のリポジトリを作成） Hexo ブログを GitHub にプッシュ ローカルの Hexo プロジェクトを GitHub にアップロードしておきます。 1234567cd my-hexo-bloggit initgit remote add origin https://github.com/your-username/my-hexo-blog.gitgit add .git commit -m &quot;first commit&quot;git branch -M maingit push -u origin main （GitHub のリポジトリは事前に作成しておいてください） AWS Amplify に接続 AWS マネジメントコンソールで Amplify にアクセス 「新しいアプリをホスティング」→「Git リポジトリを接続」 GitHub（または GitLab / Bitbucket）と連携 Hexo のリポジトリを選択 「ブランチ」→ main を選択 「次へ」 ビルド設定 自動生成された amplify.yml を Hexo 用にカスタマイズ します。 「ビルド設定の編集」をクリック amplify.yml を以下のように修正 1234567891011121314151617version: 1applications: - frontend: phases: preBuild: commands: - npm install build: commands: - npm run build artifacts: baseDirectory: public files: - '**/*' cache: paths: - node_modules/**/* 「保存 &amp; 続行」 をクリック デプロイ &amp; 公開 「保存 &amp; デプロイ」 をクリック 数分待つと、デプロイが完了 「ドメイン」タブで URL を確認（例：https://your-app.amplifyapp.com） カスタムドメイン設定（オプション） 独自ドメインを使いたい場合は、Route 53 で管理するドメイン を Amplify に接続できます。 Amplify の「カスタムドメイン」タブへ移動 「ドメインを追加」→ your-domain.com を入力 Route 53 に DNS 設定を適用 数分〜数時間で HTTPS 対応のブログが公開される Hexo を更新する Hexo の記事を追加・編集し、GitHub に push するだけで、自動でデプロイされます！ 123git add .git commit -m &quot;新しい記事を追加&quot;git push origin main S3 S3 バケットを作成する AWS マネジメントコンソールで S3 にアクセス 「バケットを作成」をクリック バケット名を設定（例: my-hexo-blog） 「パブリックアクセスをすべてブロック」のチェックを外し、公開設定を有効化 「作成」ボタンを押す S3 の静的ウェブサイトホスティング設定： 作成したバケットを開く 「プロパティ」タブを開く 「静的ウェブサイトホスティング」を有効化 インデックスドキュメントに index.html を指定 保存 IAM ユーザーを作成（S3 へのデプロイ用） AWS マネジメントコンソールで IAM にアクセス 「ユーザー」を作成し、S3 へのフルアクセス権限 (AmazonS3FullAccess) を付与 アクセスキー ID とシークレットアクセスキーを取得 ローカル PC に AWS CLI を設定します： 1aws configure Access Key ID: （IAM ユーザーのアクセスキー ID） Secret Access Key: （IAM ユーザーのシークレットアクセスキー） Default region: ap-northeast-1（東京リージョン） Output format: json Hexo を S3 にデプロイする Hexo プロジェクトのルートに移動 Hexo のデプロイプラグインをインストール 1npm install hexo-deployer-s3 --save _config.yml に S3 デプロイの設定を追加 1234deploy: type: s3 bucket: my-hexo-blog region: ap-northeast-1 Hexo をビルドして S3 にアップロード 1hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy S3 バケットの URL にアクセスし、Hexo ブログが表示されるか確認します。 CloudFront（CDN）を設定する（オプション） より高速な配信のため、CloudFront を利用することを推奨します。 AWS マネジメントコンソールで CloudFront にアクセス 「ディストリビューションを作成」をクリック オリジンドメインに作成した S3 バケットを指定 デフォルトルートオブジェクトを index.html に設定 HTTPS 設定（カスタムドメインを使用する場合は ACM で証明書を発行） 作成完了後、CloudFront のドメイン（例: dxxxxxxxx.cloudfront.net）にアクセスし、ブログが表示されるか確認 Route 53 でカスタムドメインを設定（オプション） 独自ドメインを使いたい場合は、Route 53 でカスタムドメインを設定し、CloudFront に関連付けることで、 https://myblog.com のようにアクセスできます。 まとめ これで、Hexo ブログを AWS S3 + CloudFront にデプロイできました。今後の更新は、以下のコマンドで簡単に反映できます。 1hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy EC2 事前に以下を準備しておきましょう： Hexo 環境（ローカル PC にインストール済み） AWS アカウント AWS CLI（ローカル PC にインストール） EC2 インスタンス（Ubuntu または Amazon Linux） EC2 インスタンスを作成 AWS マネジメントコンソールにログイン 「EC2」サービスに移動 「インスタンスを起動」をクリック Amazon Linux 2023 または Ubuntu 20.04 を選択 インスタンスタイプを t2.micro（無料枠） に設定 「キーペア」を作成（.pem ファイルをダウンロード） 「セキュリティグループ」で以下のポートを開放 22（SSH） 80（HTTP） 443（HTTPS）（SSL を設定する場合） 「起動」をクリック EC2 に接続 ローカル PC から EC2 に SSH で接続します。 1ssh -i my-key.pem ec2-user@EC2のパブリックIP (Ubuntu の場合は ec2-user の代わりに ubuntu を使用) 必要なパッケージをインストール Node.js &amp; Hexo 12345678# Amazon Linux の場合sudo yum update -ycurl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -sudo yum install -y nodejs git# Ubuntu の場合sudo apt update -ysudo apt install -y nodejs npm git Node.js のバージョン確認： 1node -v Hexo をインストール： 1npm install -g hexo-cli GitHub から Hexo プロジェクトをクローン ローカル PC で Hexo プロジェクトを GitHub に push しておき、それを EC2 にクローンします。（GitHub に Hexo のリポジトリを作成済みであることが前提） 123git clone https://github.com/username/my-hexo-blog.gitcd my-hexo-blognpm install Hexo をビルドして公開 1hexo clean &amp;&amp; hexo generate 生成された public/ フォルダを Nginx または Apache で公開します。 Nginx をインストール &amp; 設定 Nginx のインストール 12345# Amazon Linuxsudo yum install -y nginx# Ubuntusudo apt install -y nginx Nginx の設定 設定ファイルを編集： 1sudo vi /etc/nginx/nginx.conf server ブロックを以下のように編集： 123456789server { listen 80; server_name your-domain.com; location / { root /home/ec2-user/my-hexo-blog/public; index index.html; }} 適用 &amp; 起動 12sh复制编辑sudo systemctl restart nginxsudo systemctl enable nginx ブラウザで http://EC2のパブリックIP にアクセスし、Hexo ブログが表示されることを確認。 ドメイン &amp; SSL 設定（オプション） Route 53 でカスタムドメイン設定 AWS の Route 53 でドメインを取得 EC2 のパブリック IP を A レコードに登録 数分〜数時間で適用される Certbot（Let’s Encrypt）で HTTPS 化 12sh复制编辑sudo yum install -y certbotsudo certbot --nginx -d your-domain.com 証明書の更新を自動化： 1echo &quot;0 0 1 * * root certbot renew --quiet&quot; | sudo tee -a /etc/crontab Hexo の更新方法 Hexo の記事を追加・編集した後、以下を実行： 12sh复制编辑hexo clean &amp;&amp; hexo generatesudo systemctl restart nginx または、GitHub に push し、EC2 で git pull &amp;&amp; hexo generate &amp;&amp; sudo systemctl restart nginx で更新。 まとめ これで EC2 に Hexo ブログをデプロイ できました！より便利にするために、GitHub Actions でデプロイを自動化 したり、CloudFront を追加 したりすることも可能です。","link":"/Deploying-Static-Blog-to-AWS/"},{"title":"Javaプロジェクトにおける前後端データの交換方法","text":"この記事では、Javaプロジェクトにおけるフロントエンドとバックエンドのデータ交換方法について論じています。具体的には、さまざまな一般的な技術とシーンが取り上げられています。 Javaプロジェクトにおけるフロントエンドとバックエンドのデータ交換方法には主に以下の種類があり、具体的にどれを選択するかはプロジェクトのアーキテクチャ（Spring Boot、Spring MVC、JSP など）やフロントエンド技術（Vue、React、Thymeleaf など）に依存します。 一般的なケース 1. JSONを使用したデータ交換（フロントエンドとバックエンドが分離されている、REST APIでよく使用される） 適用シーン：Spring Boot + Vue/React/フロントエンドフレームワーク フロントエンド（JavaScriptでFetchを使ってリクエストを送信） 12345678fetch(&quot;http://localhost:8080/api/user&quot;, { method: &quot;POST&quot;, headers: { &quot;Content-Type&quot;: &quot;application/json&quot; }, body: JSON.stringify({ username: &quot;ゴ&quot;, age: 25 })}).then(response =&gt; response.json()).then(data =&gt; console.log(&quot;返されたデータ:&quot;, data)).catch(error =&gt; console.error(&quot;リクエスト失敗:&quot;, error)); バックエンド（Spring BootでJSONリクエストとレスポンスを処理） 123456789101112@RestController@RequestMapping(&quot;/api&quot;)public class UserController { @PostMapping(&quot;/user&quot;) public Map&lt;String, Object&gt; createUser(@RequestBody User user) { Map&lt;String, Object&gt; response = new HashMap&lt;&gt;(); response.put(&quot;message&quot;, &quot;ユーザー &quot; + user.getUsername() + &quot; の作成に成功しました&quot;); response.put(&quot;status&quot;, &quot;success&quot;); return response; // JSON形式でデータを返します }} 2. URLでデータを渡す（GETリクエスト） 適用シーン：データを検索する場合、例えば検索機能 フロントエンド（JavaScriptでGETリクエストを送信） 123fetch(&quot;http://localhost:8080/api/user?name=吴&quot;) .then(response =&gt; response.json()) .then(data =&gt; console.log(&quot;返されたデータ:&quot;, data)); バックエンド（Spring BootでURLパラメータを解析） 1234@GetMapping(&quot;/user&quot;)public User getUser(@RequestParam String name) { return new User(name, 25); // ユーザーオブジェクトを返すと仮定} 3. フォームを使用したデータ送信（従来のWeb開発） 適用シーン：Spring MVC + JSP / Thymeleaf フロントエンド（HTMLフォームでデータを送信） 1234&lt;form action=&quot;/submit&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;ユーザー名を入力&quot;&gt; &lt;button type=&quot;submit&quot;&gt;送信&lt;/button&gt;&lt;/form&gt; バックエンド（Spring MVCでフォームデータを解析） 12345@PostMapping(&quot;/submit&quot;)public String handleForm(@RequestParam String username) { System.out.println(&quot;ユーザー名を受け取りました：&quot; + username); return &quot;success&quot;; // ビューを返す} 4. セッションを使用してデータを渡す（ユーザーのログイン状態） 適用シーン：ユーザーセッション情報の保存 バックエンド（Spring Bootでセッションデータを設定） 12345@PostMapping(&quot;/login&quot;)public String login(HttpSession session, @RequestParam String username) { session.setAttribute(&quot;user&quot;, username); return &quot;ログイン成功&quot;;} バックエンド（セッションデータを取得） 1234@GetMapping(&quot;/profile&quot;)public String getUser(HttpSession session) { return &quot;現在のユーザー：&quot; + session.getAttribute(&quot;user&quot;);} 5. WebSocketを使用したリアルタイム通信（例：チャットシステム） 適用シーン：リアルタイムデータのプッシュ、例えばWebチャットや株価の更新 バックエンド（Spring WebSocketでメッセージを処理） 12345@MessageMapping(&quot;/chat&quot;)@SendTo(&quot;/topic/messages&quot;)public String sendMessage(String message) { return &quot;受信：&quot; + message;} フロントエンド（JavaScript WebSocket接続） 12let socket = new WebSocket(&quot;ws://localhost:8080/chat&quot;);socket.onmessage = (event) =&gt; console.log(&quot;メッセージを受信:&quot;, event.data); まとめ 方法 適用シーン 例 JSON (REST API) フロントエンドとバックエンドが分離（Vue/React） @RequestBody でJSONを解析 URLパラメータ データの検索 @RequestParam でパラメータを解析 フォーム送信 従来のWeb開発 @RequestParam でフォームデータを解析 セッション ログイン状態 session.setAttribute でデータを渡す WebSocket リアルタイム通信 WebSocket でメッセージをプッシュ Ajax Ajax（非同期JavaScriptおよびXML）は、ページを再読み込みすることなくフロントエンドがバックエンドと通信できる技術です。JavaプロジェクトにおけるAjaxの使用は、フロントエンド（JSがリクエストを送信）＋ バックエンド（Javaがリクエストを処理してデータを返す） という構成になります。 1. AjaxでGETリクエストを送信（データを検索） 適用シーン：ユーザー情報の検索や検索機能など。 フロントエンド（HTML + JavaScript） 12345678910111213&lt;button onclick=&quot;getUser()&quot;&gt;ユーザー情報を取得&lt;/button&gt;&lt;div id=&quot;result&quot;&gt;&lt;/div&gt;&lt;script&gt;function getUser() { fetch(&quot;http://localhost:8080/api/user?name=吴&quot;) // GETリクエストを送信 .then(response =&gt; response.json()) // JSONを解析 .then(data =&gt; { document.getElementById(&quot;result&quot;).innerText = &quot;ユーザー名：&quot; + data.username; }) .catch(error =&gt; console.error(&quot;リクエストエラー:&quot;, error));}&lt;/script&gt; バックエンド（Spring Bootでリクエストを処理） 123456789@RestController@RequestMapping(&quot;/api&quot;)public class UserController { @GetMapping(&quot;/user&quot;) public User getUser(@RequestParam String name) { return new User(name, 25); // ユーザーオブジェクトを返すと仮定 }} 2. AjaxでPOSTリクエストを送信（データを送信） 適用シーン：フォーム送信、ユーザー登録、コメント送信など。 フロントエンド（HTML + JavaScript） 12345678910111213141516171819&lt;input type=&quot;text&quot; id=&quot;username&quot; placeholder=&quot;ユーザー名を入力&quot;&gt;&lt;button onclick=&quot;createUser()&quot;&gt;送信&lt;/button&gt;&lt;div id=&quot;response&quot;&gt;&lt;/div&gt;&lt;script&gt;function createUser() { let username = document.getElementById(&quot;username&quot;).value; fetch(&quot;http://localhost:8080/api/user&quot;, { method: &quot;POST&quot;, headers: { &quot;Content-Type&quot;: &quot;application/json&quot; }, body: JSON.stringify({ username: username, age: 25 }) }) .then(response =&gt; response.json()) .then(data =&gt; { document.getElementById(&quot;response&quot;).innerText = data.message; }) .catch(error =&gt; console.error(&quot;リクエストエラー:&quot;, error));}&lt;/script&gt; バックエンド（Spring BootでPOSTリクエストを処理） 1234567891011@RestController@RequestMapping(&quot;/api&quot;)public class UserController { @PostMapping(&quot;/user&quot;) public Map&lt;String, String&gt; createUser(@RequestBody User user) { Map&lt;String, String&gt; response = new HashMap&lt;&gt;(); response.put(&quot;message&quot;, &quot;ユーザー &quot; + user.getUsername() + &quot; の作成に成功しました&quot;); return response; }} 3. AjaxでPUTリクエストを送信（データの更新） 適用シーン：ユーザー情報の変更や記事の更新など。 フロントエンド（JavaScript） 123456789function updateUser() { fetch(&quot;http://localhost:8080/api/user&quot;, { method: &quot;PUT&quot;, headers: { &quot;Content-Type&quot;: &quot;application/json&quot; }, body: JSON.stringify({ username: &quot;吴&quot;, age: 26 }) }) .then(response =&gt; response.json()) .then(data =&gt; console.log(&quot;更新成功:&quot;, data));} バックエンド（Spring BootでPUTリクエストを処理） 12345@PutMapping(&quot;/user&quot;)public User updateUser(@RequestBody User user) { user.setAge(user.getAge() + 1); // 年齢を変更する仮定 return user;} 4. AjaxでDELETEリクエストを送信（データの削除） 適用シーン：ユーザーの削除や注文の削除など。 フロントエンド（JavaScript） 1234567function deleteUser() { fetch(&quot;http://localhost:8080/api/user/吴&quot;, { method: &quot;DELETE&quot; }) .then(response =&gt; response.text()) .then(data =&gt; console.log(&quot;削除成功:&quot;, data));} バックエンド（Spring BootでDELETEリクエストを処理） 1234@DeleteMapping(&quot;/user/{name}&quot;)public String deleteUser(@PathVariable String name) { return &quot;ユーザー &quot; + name + &quot; が削除されました&quot;;} まとめ リクエスト方法 適用シーン フロントエンドの例 バックエンドの例 GET データ検索 fetch(&quot;url&quot;) @GetMapping POST データ送信 fetch(&quot;url&quot;, { method: &quot;POST&quot;, body: JSON }) @PostMapping PUT データ更新 fetch(&quot;url&quot;, { method: &quot;PUT&quot;, body: JSON }) @PutMapping DELETE データ削除 fetch(&quot;url&quot;, { method: &quot;DELETE&quot; }) @DeleteMapping Axios AxiosはPromiseベースのJavaScript HTTPクライアントで、主にVue、React、Node.jsなどのフロントエンドフレームワークで使用され、Javaバックエンドとのデータ交換に利用されます。 Axiosは日本語では通常そのまま**“Axios”**という英単語で表現されます。技術関連の議論ではライブラリ名やフレームワーク名はそのまま英語で使われるのが一般的です。 もしAxiosがHTTPクライアントライブラリであることを説明したい場合は、次のように言うことができます： Axios は HTTP クライアントライブラリです。（AxiosはHTTPクライアントライブラリです。） Axiosの機能を具体的に説明したい場合は次のように言います： Axios を使うと、ブラウザで API にリクエストを送信できます。（Axiosを使うことで、ブラウザでAPIリクエストを送信できます。） 簡単に言うと、Axiosは通常そのまま英語の名前で使われ、日本語ではその機能を説明する形になります。 1. Axiosのインストール VueやReactプロジェクトの場合、npmを使ってインストールできます： 1npm install axios 通常のHTMLページで使用する場合は、次のようにCDNから読み込むことができます： 1&lt;script src=&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt; 2. AxiosでGETリクエストを送信（データを取得） 適用シーン：ユーザー情報の取得、データ検索など。 フロントエンド（AxiosでGETリクエストを送信） 1234567axios.get(&quot;http://localhost:8080/api/user&quot;, { params: { name: &quot;吴&quot; } }) .then(response =&gt; { console.log(&quot;ユーザー情報:&quot;, response.data); }) .catch(error =&gt; { console.error(&quot;リクエスト失敗:&quot;, error); }); バックエンド（Spring BootでGETリクエストを処理） 12345678@RestController@RequestMapping(&quot;/api&quot;)public class UserController { @GetMapping(&quot;/user&quot;) public User getUser(@RequestParam String name) { return new User(name, 25); }} 3. AxiosでPOSTリクエストを送信（データを送信） 適用シーン：ユーザー登録、フォーム送信など。 フロントエンド（AxiosでPOSTリクエストを送信） 12345678910axios.post(&quot;http://localhost:8080/api/user&quot;, { username: &quot;吴&quot;, age: 25}).then(response =&gt; { console.log(&quot;サーバーの返答:&quot;, response.data);}).catch(error =&gt; { console.error(&quot;リクエスト失敗:&quot;, error);}); バックエンド（Spring BootでPOSTリクエストを処理） 123456@PostMapping(&quot;/user&quot;)public Map&lt;String, String&gt; createUser(@RequestBody User user) { Map&lt;String, String&gt; response = new HashMap&lt;&gt;(); response.put(&quot;message&quot;, &quot;ユーザー &quot; + user.getUsername() + &quot; が作成されました&quot;); return response;} 4. AxiosでPUTリクエストを送信（データを更新） 適用シーン：ユーザー情報の変更や記事の更新など。 フロントエンド（AxiosでPUTリクエストを送信） 12345678910axios.put(&quot;http://localhost:8080/api/user&quot;, { username: &quot;吴&quot;, age: 26}).then(response =&gt; { console.log(&quot;更新成功:&quot;, response.data);}).catch(error =&gt; { console.error(&quot;リクエスト失敗:&quot;, error);}); バックエンド（Spring BootでPUTリクエストを処理） 12345@PutMapping(&quot;/user&quot;)public User updateUser(@RequestBody User user) { user.setAge(user.getAge() + 1); // 年齢を更新 return user;} 5. AxiosでDELETEリクエストを送信（データを削除） 適用シーン：ユーザーの削除、注文の削除など。 フロントエンド（AxiosでDELETEリクエストを送信） 1234567axios.delete(&quot;http://localhost:8080/api/user/吴&quot;) .then(response =&gt; { console.log(&quot;削除成功:&quot;, response.data); }) .catch(error =&gt; { console.error(&quot;リクエスト失敗:&quot;, error); }); バックエンド（Spring BootでDELETEリクエストを処理） 1234@DeleteMapping(&quot;/user/{name}&quot;)public String deleteUser(@PathVariable String name) { return &quot;ユーザー &quot; + name + &quot; は削除されました&quot;;} 6. Axiosのグローバル設定 VueやReactプロジェクトでAxiosをグローバルに設定し、コードの重複を減らすことができます： 12345678910import axios from &quot;axios&quot;;// デフォルトのbaseURLを設定axios.defaults.baseURL = &quot;http://localhost:8080/api&quot;;// グローバルリクエストヘッダーを設定axios.defaults.headers.common[&quot;Authorization&quot;] = &quot;Bearer token&quot;;// タイムアウト時間を設定axios.defaults.timeout = 5000; 7. Axiosインターセプターの使用（リクエスト＆レスポンスの処理） リクエストやレスポンスの際にトークンの処理やエラーメッセージの表示を自動で行いたい場合、インターセプターを使用できます： 123456789101112131415// リクエストインターセプター（リクエストヘッダーにTokenを追加する例）axios.interceptors.request.use(config =&gt; { config.headers.Authorization = &quot;Bearer token&quot;; return config;}, error =&gt; { return Promise.reject(error);});// レスポンスインターセプター（エラーハンドリングを統一化）axios.interceptors.response.use(response =&gt; { return response;}, error =&gt; { console.error(&quot;リクエストエラー:&quot;, error.response?.data || &quot;不明なエラー&quot;); return Promise.reject(error);}); まとめ リクエスト方法 適用シーン フロントエンドの例 バックエンドの例 GET データ取得 axios.get(&quot;url&quot;) @GetMapping POST データ送信 axios.post(&quot;url&quot;, data) @PostMapping PUT データ更新 axios.put(&quot;url&quot;, data) @PutMapping DELETE データ削除 axios.delete(&quot;url&quot;) @DeleteMapping XMLHttpRequest もし、最も基本的な方法（AxiosやFetch APIに依存せず）でのAjax通信を行いたい場合、**XMLHttpRequest**を使用できます。 1. GETリクエストを送信（データ取得） 適用シーン：ユーザー情報の取得、データ検索など。 フロントエンド（原生JavaScript） 12345678910111213141516&lt;button onclick=&quot;getUser()&quot;&gt;ユーザー情報を取得&lt;/button&gt;&lt;div id=&quot;result&quot;&gt;&lt;/div&gt;&lt;script&gt;function getUser() { var xhr = new XMLHttpRequest(); xhr.open(&quot;GET&quot;, &quot;http://localhost:8080/api/user?name=吴&quot;, true); xhr.onreadystatechange = function () { if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) { var data = JSON.parse(xhr.responseText); document.getElementById(&quot;result&quot;).innerText = &quot;ユーザー名：&quot; + data.username; } }; xhr.send();}&lt;/script&gt; バックエンド（Spring BootでGETリクエストを処理） 12345678@RestController@RequestMapping(&quot;/api&quot;)public class UserController { @GetMapping(&quot;/user&quot;) public User getUser(@RequestParam String name) { return new User(name, 25); }} 2. POSTリクエストを送信（データ送信） 適用シーン：ユーザー登録、フォーム送信など。 フロントエンド（原生JavaScript） 123456789101112131415161718192021&lt;input type=&quot;text&quot; id=&quot;username&quot; placeholder=&quot;ユーザー名を入力&quot;&gt;&lt;button onclick=&quot;createUser()&quot;&gt;送信&lt;/button&gt;&lt;div id=&quot;response&quot;&gt;&lt;/div&gt;&lt;script&gt;function createUser() { var xhr = new XMLHttpRequest(); xhr.open(&quot;POST&quot;, &quot;http://localhost:8080/api/user&quot;, true); xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/json&quot;); xhr.onreadystatechange = function () { if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) { var data = JSON.parse(xhr.responseText); document.getElementById(&quot;response&quot;).innerText = data.message; } }; var user = { username: document.getElementById(&quot;username&quot;).value, age: 25 }; xhr.send(JSON.stringify(user));}&lt;/script&gt; バックエンド（Spring BootでPOSTリクエストを処理） 123456@PostMapping(&quot;/user&quot;)public Map&lt;String, String&gt; createUser(@RequestBody User user) { Map&lt;String, String&gt; response = new HashMap&lt;&gt;(); response.put(&quot;message&quot;, &quot;ユーザー &quot; + user.getUsername() + &quot; が作成されました&quot;); return response;} 3. PUTリクエストを送信（データ更新） 適用シーン：ユーザー情報の更新や記事の編集など。 フロントエンド（原生JavaScript） 1234567891011121314function updateUser() { var xhr = new XMLHttpRequest(); xhr.open(&quot;PUT&quot;, &quot;http://localhost:8080/api/user&quot;, true); xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/json&quot;); xhr.onreadystatechange = function () { if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) { console.log(&quot;更新成功:&quot;, xhr.responseText); } }; var user = { username: &quot;吴&quot;, age: 26 }; xhr.send(JSON.stringify(user));} バックエンド（Spring BootでPUTリクエストを処理） 12345@PutMapping(&quot;/user&quot;)public User updateUser(@RequestBody User user) { user.setAge(user.getAge() + 1); // 年齢を1歳増やす return user;} 4. DELETEリクエストを送信（データ削除） 適用シーン：ユーザーの削除、注文の削除など。 フロントエンド（原生JavaScript） 123456789101112function deleteUser() { var xhr = new XMLHttpRequest(); xhr.open(&quot;DELETE&quot;, &quot;http://localhost:8080/api/user/吴&quot;, true); xhr.onreadystatechange = function () { if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) { console.log(&quot;削除成功:&quot;, xhr.responseText); } }; xhr.send();} バックエンド（Spring BootでDELETEリクエストを処理） 1234@DeleteMapping(&quot;/user/{name}&quot;)public String deleteUser(@PathVariable String name) { return &quot;ユーザー &quot; + name + &quot; は削除されました&quot;;} まとめ リクエスト方法 適用シーン フロントエンドコード（XMLHttpRequest） バックエンドコード（Spring Boot） GET データ取得 xhr.open(&quot;GET&quot;, &quot;url&quot;) @GetMapping POST データ送信 xhr.open(&quot;POST&quot;, &quot;url&quot;) @PostMapping PUT データ更新 xhr.open(&quot;PUT&quot;, &quot;url&quot;) @PutMapping DELETE データ削除 xhr.open(&quot;DELETE&quot;, &quot;url&quot;) @DeleteMapping","link":"/Methods-of-Data-Transfer-Between-Frontend-and-Backend-in-Java-Projects/"},{"title":"JUnit 4とJUnit 5の違い","text":"現在のプロジェクトでは、いくつかの古いプロジェクトがJUnit 4を使用していますが、新しいプロジェクトでは一般的にJUnit 5とMockitoが使用されています。本記事では、JUnit 4とJUnit 5の違いを記録します。 JUnit 5 は JUnit 4 の進化版で、数多くの改善が加えられています。主な違いは以下の通りです。 1. アーキテクチャの違い 比較項目 JUnit 4 JUnit 5 コアアーキテクチャ モノリシックアーキテクチャ（すべての機能は junit-4.x.jar に含まれている） モジュール化されたアーキテクチャ（junit-jupiter、junit-platform、junit-vintage など） 拡張性 Runner（例： @RunWith）に依存 Extension 機構を提供し、拡張がより柔軟 Java バージョン Java 5 以上に対応 Java 8 以上が必要 JUnit 5 は以下の 3 つの部分で構成されています JUnit Platform：異なるテストフレームワーク（JUnit、TestNG など）をサポートし、IDE や CI/CD 内でテストを実行できます。 JUnit Jupiter：JUnit 5 のコア API で、新しい機能（例：@TestFactory）を提供します。 JUnit Vintage：JUnit 4 と 3 をサポートし、古いプロジェクトの移行を容易にします。 2. アノテーションの違い 機能 JUnit 4 JUnit 5 テストメソッド @Test @Test テスト前の初期化 @Before @BeforeEach テスト後のクリーンアップ @After @AfterEach すべてのテスト前の実行 @BeforeClass（static） @BeforeAll（static または @TestInstance(Lifecycle.PER_CLASS)） すべてのテスト後の実行 @AfterClass（static） @AfterAll（static または @TestInstance(Lifecycle.PER_CLASS)） テストを無視する @Ignore @Disabled パラメータ化テスト @RunWith(Parameterized.class) が必要 @ParameterizedTest、より簡潔 3. アサーション（Assertions） JUnit 5 は org.junit.jupiter.api.Assertions において、より豊富なアサーションを提供します。例えば： 12345678import static org.junit.jupiter.api.Assertions.*;@Testvoid testAssertions() { assertEquals(2, 1 + 1, &quot;計算エラー&quot;); assertTrue(&quot;hello&quot;.startsWith(&quot;h&quot;), &quot;開始文字エラー&quot;); assertThrows(ArithmeticException.class, () -&gt; 1 / 0, &quot;例外が発生すべき&quot;);} JUnit 4 に比べ、JUnit 5 ではアサーションの組み合わせが可能になり、可読性が向上しました： 12345assertAll(&quot;Math tests&quot;, // &quot;Math tests&quot;という名前を付け、テスト失敗時に表示される情報を提供 () -&gt; assertEquals(2, 1 + 1), () -&gt; assertTrue(4 &gt; 3), () -&gt; assertNotNull(new Object())); ラムダ式 JUnit 5 は ラムダ式をアサーションに使用し、すべてのアサーションが実行されるため、1つのアサーションが失敗しても、後続のアサーションが実行されます。 これは JUnit 4 の従来の書き方に比べ、柔軟性があり、複数のテスト条件が確実にチェックされます。 これらのアサーションが個別に実行されると、最初に失敗したテストでテストが終了します。しかし、assertAll を使用すると、テストはすべての失敗したアサーションを出力します。例えば： 1234org.opentest4j.MultipleFailuresError: Math tests (3 failures)1) 期待値: &lt;3&gt; だが、実際は: &lt;2&gt;2) 期待値: &lt;true&gt; だが、実際は: &lt;false&gt;3) 期待値: null ではない これにより、開発者は一度に複数のエラーを確認でき、1つを修正して再度テストを実行する必要がなくなります。 4. 動的テスト JUnit 5 は @TestFactory を導入し、テストケースを動的に作成できます： 123456@TestFactoryStream&lt;DynamicTest&gt; dynamicTests() { return Stream.of(1, 2, 3).map(n -&gt; DynamicTest.dynamicTest(&quot;テスト: &quot; + n, () -&gt; assertTrue(n &gt; 0)) );} JUnit 4 にはこのような機能はありません。 5. 拡張機構 JUnit 4 は @RunWith 拡張（例：@RunWith(SpringRunner.class)）を使用しますが、1つのテストクラスで1つの @RunWith のみを使用できます： 123@RunWith(SpringRunner.class)public class MyTest {} JUnit 5 は @ExtendWith に置き換わり、複数の拡張をサポートします： 1234@ExtendWith(SpringExtension.class)@ExtendWith(MyCustomExtension.class)public class MyTest {} 6. Spring Boot サポート Spring Boot 2.4+ はデフォルトで JUnit 5（JUnit Jupiter）をサポートします。 JUnit 4 を引き続き使用している場合、junit-vintage-engine の互換ライブラリを追加する必要があります。 7. 移行方法 JUnit 4 から JUnit 5 に移行するには： Maven/Gradle の依存関係を変更 12345678910111213&lt;!-- JUnit 4 を削除 --&gt;&lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;!-- JUnit 5 を追加 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt; &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt; アノテーションを更新（例：@Before → @BeforeEach）。 @ExtendWith を使用して @RunWith を置き換え。 8. まとめ 比較項目 JUnit 4 JUnit 5 モジュール化 単一 JAR 複数のモジュール（Jupiter、Platform、Vintage） Java バージョン Java 5 以上 Java 8 以上 拡張機構 @RunWith（単一） @ExtendWith（複数可） テストライフサイクル @Before / @After @BeforeEach / @AfterEach 動的テスト ❌ ✅ @TestFactory パラメータ化テスト 複雑（@RunWith(Parameterized.class)） シンプル（@ParameterizedTest） Spring サポート @RunWith(SpringRunner.class) @ExtendWith(SpringExtension.class) 新しいプロジェクトには、直接 JUnit 5 を使用することをお勧めします。古いプロジェクトでは、JUnit Vintage を使用して JUnit 4 のコードを互換させ、徐々に JUnit 5 に移行することができます。","link":"/The-difference-between-JUnit-4-and-JUnit-5/"},{"title":"JSPに取って代わった技術は何ですか？","text":"この記事では、JSP（JavaServer Pages）が新しい技術に取って代わられつつある現状について説明しています。代替技術として、Thymeleaf、Angular、React、Next.js、APIベースのアーキテクチャなどが挙げられ、それぞれの特徴と使用シーンについて触れています。また、JSPとThymeleafを用いたコードの比較を通じて、両者の違いを明確にし、Thymeleafの利便性とAJAXとの連携方法についても解説しています。 JSP（JavaServer Pages）は、Java EEテクノロジーで動的なWebページを構築するための従来の技術です。Web開発の進化に伴い、多くの新しいテクノロジーとフレームワークが登場し、徐々にJSPに取って代わりました。主な代替技術は以下の通りです。 1. テンプレートエンジン： Thymeleaf、FreeMarker、Velocityなどのテンプレートエンジンは、テンプレートとデータを組み合わせて動的コンテンツを生成します。JSPよりも柔軟で強力な構文と機能を提供します。 2. フロントエンドJavaScriptフレームワーク： Angular、React、Vue.jsなどのフレームワークは、AJAXやWebSocketを通じてバックエンドAPIと通信し、データを動的に取得・表示します。これにより、バックエンドのテンプレートエンジンの必要性が減少します。 3. サーバーサイドレンダリング（SSR）： Next.jsやNuxt.jsなどのNode.jsフレームワークは、サーバー側で動的ページを生成し、完全なHTMLとしてクライアントに返します。これにより、初期ロード時間の短縮やSEOの向上が期待できます。 4. マイクロサービスアーキテクチャとAPI設計： マイクロサービスアーキテクチャの普及により、フロントエンドとバックエンドを分離し、RESTful APIやGraphQLを通じて通信する設計が一般的になりました。バックエンドはSpring Boot、Express、Djangoなどの多様な技術でAPIを提供できます。 5. 静的サイトジェネレーター（SSG）： Gatsby、Jekyll、HugoなどのSSGは、Markdownファイルやデータを静的HTMLページに変換し、ランタイムサーバーなしでWebサーバーに直接デプロイできます。 JSPとThymeleafのコード比較 以下は、製品リストを表示する簡単なWebページのJSPとThymeleafのコード比較です。 JSPの使用: 12345678910111213141516&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Product List&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Product List&lt;/h1&gt; &lt;ul&gt; &lt;% for (Product product : products) { %&gt; &lt;li&gt;&lt;%= product.getName() %&gt;&lt;/li&gt; &lt;% } %&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; Thymeleafの使用 12345678910111213&lt;!DOCTYPE html&gt;&lt;html xmlns:th=&quot;&lt;http://www.thymeleaf.org&gt;&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Product List&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Product List&lt;/h1&gt; &lt;ul&gt; &lt;li th:each=&quot;product : ${products}&quot; th:text=&quot;${product.name}&quot;&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; Thymeleafは、Spring Bootのデフォルトテンプレートエンジンであり、より簡潔で表現力豊かな構文を提供します。 Thymeleaf の主な構文 Thymeleaf は、サーバー側とクライアント側の間で HTML をレンダリングするために使用される人気のあるテンプレートエンジンです。HTML ファイルに動的コンテンツとロジックを埋め込むための豊富なテンプレート構文をサポートしています。 Thymeleaf の一般的な構文をいくつか紹介します。 1. 変数式 **${...}** : JSP の EL 式と同様に、HTML で変数の値を出力するために使用されます。 1&lt;p&gt;Welcome, &lt;span th:text=&quot;${user.name}&quot;&gt;User&lt;/span&gt;&lt;/p&gt; 2. セレクタ式 ***{...}** : HTML 要素に属性を設定するために使用され、属性値は変数の値となります。 1&lt;input type=&quot;text&quot; th:value=&quot;*{user.email}&quot; /&gt; 3. URL 表現 **@{...}** : リンクの生成やリダイレクトに使用されます。 1&lt;a th:href=&quot;@{/products/details(id=${product.id})}&quot;&gt;Details&lt;/a&gt; 4. イテレータ式 **th:each** : コレクションをループし、各要素に対して HTML を生成するために使用されます。 123&lt;ul&gt; &lt;li th:each=&quot;product : ${products}&quot; th:text=&quot;${product.name}&quot;&gt;&lt;/li&gt;&lt;/ul&gt; 5. 条件式 **th:if** 、 **th:unless** 、 **th:switch** 、 **th:case** : 条件に基づいて HTML 要素を制御します。 12&lt;div th:if=&quot;${product.stock &gt; 0}&quot;&gt;In Stock&lt;/div&gt;&lt;div th:unless=&quot;${product.stock &gt; 0}&quot;&gt;Out of Stock&lt;/div&gt; 6. インライン式 **#...** : 組み込み関数を使用して文字列やコレクションを操作できます。 1&lt;div th:text=&quot;${#strings.toUpperCase(product.name)}&quot;&gt;&lt;/div&gt; 7. フラグメント **th:fragment** 、 **th:replace** : テンプレートのモジュール化を実現します。 12345&lt;!-- フラグメントの定義 --&gt;&lt;div th:fragment=&quot;header&quot;&gt;Header&lt;/div&gt;&lt;!-- フラグメントの呼び出し --&gt;&lt;div th:replace=&quot;fragments/header&quot;&gt;&lt;/div&gt; 8. 国際化 **#{...}** : 国際化テキストの定義と参照に使用されます。 1&lt;span th:text=&quot;#{welcome.message}&quot;&gt;Welcome&lt;/span&gt; 9. 属性の動的設定 **th:attr** : HTML 要素の属性を動的に設定します。 1&lt;input type=&quot;text&quot; th:attr=&quot;placeholder=${user.name}&quot; /&gt; 10. 文字列リテラル **|...|** : 文字列を組み立てるために使用されます。 1&lt;span th:text=&quot;|Hello, ${user.name}!|&quot;&gt;&lt;/span&gt; 11. インライン JavaScript **th:inline** : JavaScript 内で Thymeleaf 変数を使用する際に活用します。 123&lt;script th:inline=&quot;javascript&quot;&gt; var name = [[${user.name}]];&lt;/script&gt; 12. コメント **&lt;!--/\\*...\\*/--&gt;** : Thymeleaf テンプレート専用のコメント。 1&lt;!--/* This is a Thymeleaf comment */--&gt; 13. フラグメントへのパラメータ渡し **th:with** : フラグメントに変数を渡します。 1&lt;div th:with=&quot;name=${user.name}&quot; th:replace=&quot;fragments/header&quot;&gt;&lt;/div&gt; 14. ページレイアウト **layout:decorator** : ページレイアウトを定義するために使用されます。 12&lt;html layout:decorator=&quot;layout.html&quot;&gt;&lt;/html&gt; 15. フィールド検証 **th:errors** : フォーム入力のバリデーションエラーを表示します。 1&lt;span th:errors=&quot;*{fieldName}&quot;&gt;&lt;/span&gt; 16. フォームバインディング **th:object** : フォームオブジェクトをバインドします。 12&lt;form th:object=&quot;${user}&quot; th:action=&quot;@{/save}&quot; method=&quot;post&quot;&gt;&lt;/form&gt; 17. リストの空チェック **th:if** 、 **th:unless** : 変数が空かどうかを判断します。 1&lt;div th:if=&quot;${not #lists.isEmpty(products)}&quot;&gt;Product List&lt;/div&gt; Thymeleaf は、HTML ページをより柔軟に制御し、動的な動作を簡単に実装できるテンプレートエンジンです。公式ドキュメントを参照することで、さらに多くの機能を学ぶことができます。Thymeleaf の強力な機能とシンプルな構文により、Java Web 開発で広く利用されています。 Thymeleaf と Ajax の関係 Thymeleaf と Ajax は、Web 開発において異なる役割と用途を持つ 2 つの技術ですが、ユーザーエクスペリエンスと機能を向上させるために組み合わせて使用することができます。 Thymeleaf Thymeleaf は、サーバー側で HTML ページを生成するためのテンプレートエンジンです。動的コンテンツとロジックを HTML に埋め込むための豊富なテンプレート構文を提供し、サーバー側でページをレンダリングし、最終的な HTML ページをクライアントのブラウザに送信する役割を担います。 Ajax Ajax (Asynchronous JavaScript and XML) は、クライアントとサーバー間の非同期通信を可能にする技術です。ページ全体をリロードせずにサーバーとデータをやり取りできるため、より動的なユーザーインターフェースを実現できます。一般的に JavaScript を用いて Ajax リクエストを実装します。 Thymeleaf と Ajax の関係 Thymeleaf と Ajax を組み合わせることで、よりリッチでインタラクティブな Web アプリケーションを構築できます。たとえば、Thymeleaf でページの静的部分をサーバー側でレンダリングし、Ajax で動的なコンテンツを非同期にロードすることで、ページの応答速度を向上させることができます。 また、フォームの送信やユーザーの操作を Ajax で処理することで、ページをリロードすることなく部分的な更新が可能となり、より快適なユーザーエクスペリエンスを提供できます。 最新の Web 開発における Ajax の代替技術 Ajax は依然として有効な技術ですが、近年ではより高度で便利な技術やツールが利用されることが多くなっています。以下は、最新の Web 開発でよく使用される技術です。 1. フロントエンドフレームワーク (Angular、React、Vue.js など) これらのフレームワークはコンポーネントベースの開発を可能にし、状態管理やデータの取得を容易にするため、よりインタラクティブな Web アプリケーションの構築に適しています。 2. Fetch API Fetch API は、Promise ベースのインターフェースを提供し、シンプルかつ強力な方法で HTTP リクエストを処理できます。従来の XMLHttpRequest (XHR) の代替として広く利用されています。 3. Axios Axios は、Promise ベースの HTTP クライアントで、リクエストやレスポンスのインターセプター、JSON の自動変換などの機能を備え、ネットワークリクエストを簡単に管理できます。 4. WebSocket WebSocket は、クライアントとサーバー間に持続的な接続を確立し、リアルタイム通信を可能にするプロトコルです。チャットアプリやリアルタイム通知などに適しています。 5. Server-Sent Events (SSE) SSE は、サーバーからクライアントへの一方向のリアルタイム通信を提供する技術で、リアルタイムデータのストリーミングや通知に適しています。 まとめ 従来の Ajax も依然として利用されていますが、最新の Web 開発ではフロントエンドフレームワークや Fetch API、Axios、WebSocket などの技術が主流となっています。これらの技術を活用することで、より効率的で柔軟な Web アプリケーションの開発が可能になります。 ThymeleafとReactの類似点は何ですか Thymeleaf と React は、それぞれサーバーサイドレンダリングとクライアントサイドレンダリングに用いられる異なる技術ですが、いくつかの共通点もあります。 コンポーネント化 Thymeleaf: サーバーサイドでテンプレートを作成し、再利用可能なコンポーネントに分割できます。 th:replace や th:include などのディレクティブを使用して、複数のコンポーネントを組み合わせてページを構築できます。 React: コンポーネントベースの開発が可能で、独立したコンポーネントを組み合わせてアプリケーション全体を構築できます。コンポーネント化により、コードの再利用性、保守性、拡張性が向上します。 データバインディング Thymeleaf: HTML テンプレートにデータをバインドできます。 ${...} 式を用いてサーバー側のデータを取得し、ページにレンダリングできます。 React: 一方向データフローを採用し、props を介してデータを渡します。コンポーネント内で props の変更に応じて UI を再レンダリングできます。 条件付きレンダリングとループ Thymeleaf: th:if、th:unless による条件分岐、th:each によるコレクションの繰り返しレンダリングが可能です。 React: JavaScript の &amp;&amp; や三項演算子 ? : を用いた条件分岐、map() によるリストレンダリングが可能です。 イベント処理 Thymeleaf: サーバーサイドレンダリングを主目的とするため、直接的なイベント処理は提供されません。クライアント側の JavaScript を併用する必要があります。 React: onClick や onChange などのイベントハンドラを用いて、柔軟なイベント処理が可能です。 仮想 DOM Thymeleaf: サーバーサイドで HTML を生成し、ブラウザに送信するため、仮想 DOM は使用しません。 React: 仮想 DOM を利用し、変更があった部分のみを効率的に更新することで、レンダリングのパフォーマンスを向上させます。 Thymeleaf と React は、それぞれ異なる目的に特化した技術ですが、コンポーネント化、データバインディング、条件付きレンダリング、ループレンダリングの概念には共通点があります。プロジェクトの要件に応じて適切な技術を選択することが重要です。 最新の Web 開発における Ajax 以外の主要技術 現代の Web 開発では、Ajax 以外にもさまざまな技術やツールが活用されています。これらは Web アプリケーションの動的な機能を強化し、開発者の生産性を向上させる役割を果たします。 1. フロントエンドフレームワーク（Angular、React、Vue.js など） これらのフレームワークは、複雑なクライアントサイドのインタラクションを効率的に管理する機能を提供します。特に、コンポーネントベースのアーキテクチャと状態管理機能が強力で、リアルタイムでデータを更新することが可能です。 React：仮想 DOM による高速レンダリングを実現し、Redux などの状態管理ライブラリと組み合わせて使われることが多い。 Vue.js：シンプルな構文と双方向データバインディングを提供し、axios や fetch との統合も容易。 Angular：大規模アプリ向けのフルスタックフレームワークで、独自の HTTP クライアントやリアクティブプログラミングをサポート。 2. Fetch API Fetch API は、Ajax の後継として広く使用される技術で、Promise ベースで非同期通信を直感的に実装できます。 1234fetch('/api/data') .then(response =&gt; response.json()) .then(data =&gt; console.log(data)) .catch(error =&gt; console.error('Error:', error)); 3. Axios Axios は、Promise ベースの HTTP クライアントで、リクエスト・レスポンスのインターセプターやエラーハンドリング機能を提供します。 123axios.get('/api/data') .then(response =&gt; console.log(response.data)) .catch(error =&gt; console.error('Error:', error)); 4. WebSocket WebSocket は、クライアントとサーバー間でリアルタイムの双方向通信を可能にする技術です。チャットアプリやリアルタイム通知に適しています。 1234const socket = new WebSocket('ws://example.com/socket');socket.onmessage = (event) =&gt; { console.log('Message received: ' + event.data);}; 5. Server-Sent Events (SSE) SSE は、サーバーからクライアントへ一方向のリアルタイム更新を提供する技術で、株価のリアルタイム表示や通知システムに活用されます。 1234const eventSource = new EventSource('/api/updates');eventSource.onmessage = function(event) { console.log('New message:', event.data);}; まとめ 現在の Web 開発では、Ajax に代わり フロントエンドフレームワーク、Fetch API、Axios、WebSocket、SSE などの技術が広く活用されています。これらを適切に組み合わせることで、よりインタラクティブでリアルタイム性の高い Web アプリケーションを構築することが可能です。","link":"/What-technology-has-replaced-JSP/"},{"title":"Git-Rebaseの使用方法","text":"基本的な使い方 ブランチのリベース 現在のブランチに対して、別のブランチ（通常はmasterやmain）の変更を適用するには、次のコマンドを使用します。 12git checkout feature-branchgit rebase main これにより、feature-branch の変更が main の最新の変更の後ろに適用されます。 リベースの途中でのコンフリクト解決 リベース中にコンフリクトが発生した場合、Gitは処理を停止します。コンフリクトを解決した後、次のコマンドでリベースを続けます。 12git add &lt;conflicted-file&gt;git rebase --continue コンフリクトが解決するまでこの手順を繰り返します。 リベースを中止する リベース中に問題が発生した場合、rebase を中止することができます。 1git rebase --abort これにより、リベース前の状態に戻ります。 インタラクティブリベース git rebase -i（インタラクティブリベース）を使うと、コミットを編集、削除、順番を変更することができます。 インタラクティブリベースの開始 1git rebase -i HEAD~n n は過去のコミット数で、例えば HEAD~3 と指定すると直近3つのコミットに対して操作ができます。 コミットの操作 インタラクティブモードで、次の操作が可能です： pick: コミットをそのまま残す reword: コミットメッセージを変更 edit: コミットの内容を変更 squash: コミットを前のコミットと統合 drop: コミットを削除 インタラクティブリベースを保存 編集後、ファイルを保存して終了すると、Gitは指定された操作を実行します。 注意点 リベースは公開されたブランチで使わない 公開リポジトリに対してリベースを行うと、他の開発者と履歴がずれてしまい、協力作業に問題を引き起こす可能性があります。 マージとリベースの違い git merge はコミット履歴をそのままにしますが、git rebase は履歴をきれいに再構築します。リベースを使うことで、履歴がより直線的になり、後から見ると理解しやすくなります。 git rebase は強力なツールですが、慎重に使用することが大切です。","link":"/How-To-Use-GitRebase/"},{"title":"WBSの管理方法、タスクの割り当て、進捗報告の方法","text":"この文章では、WBSの管理方法、タスクの割り当て、進捗報告について解説しています。特に、3〜5人のSubleaderとして小規模なプロジェクトを担当する際に、効率的な進捗管理の方法やタスクの分解、優先順位設定の重要性について具体的なアドバイスを提供します。チームの進捗を正確に把握し、プロジェクトの成功に導くためのポイントが紹介されています。 WBSの管理方法、タスクの割り当て、進捗報告について、3〜5人のSubleaderとして、いくつかの小さな案件やプロジェクトを担当する場合、進捗を把握することが重要です。 管理の方法 1. 明確なWBSを作成する タスクの分解：まず、プロジェクトを小さなタスクに分解し、各タスクに明確な目標と納品物を設定します。WBSはプロジェクト全体の構造を把握するのに役立ち、詳細な管理が可能になります。 タスクの優先順位と依存関係：各タスクに優先順位を設定し、タスク間の依存関係を明確にします。これにより、チームメンバーは優先順位に従って作業を進め、リソースの無駄を避けることができます。 2. タスクの割り当て 作業負荷のバランス：チームメンバーのスキルや経験に基づいて、タスクを適切に割り当てます。タスクの難易度や複雑さに応じて、負担が均等になるように配慮します。 責任の明確化：各タスクには責任者と期限を設定し、責任が曖昧にならないようにします。これにより、タスクの進捗が遅れるリスクを減らせます。 3. 進捗報告 定期的な進捗更新：毎日または毎週の進捗会議を設定し、各メンバーの作業状況を確認します。進捗が遅れている場合には早期に問題を発見できます。 進捗管理ツールの利用：JiraやTrello、Excelなどのツールを使用してタスクの進捗を追跡します。これにより、タスクの現在の状況を視覚的に把握できます。 適時調整：遅延やボトルネックが発生した場合、速やかにチームメンバーと連携し、実際の状況に応じて調整します。リソースの再配分や作業フローの最適化を行うことが必要です。 4. リスク管理と問題解決 リスクの事前特定：プロジェクトの初期段階で、進捗に影響を与える可能性のあるリスク（技術的な問題、チーム内の協力不足など）を特定し、それに対する対策を準備します。 問題の早期解決：タスク実行中に問題が発生した場合、すぐに介入して解決します。例えば、技術的な課題や調整の問題が発生した場合、早期に対応することで問題の拡大を防げます。 5. モチベーションとコミュニケーション チーム内のコミュニケーション：チームメンバーとの良好なコミュニケーションを維持し、進捗状況を定期的に確認して調整を行います。 適切なモチベーション：良い成果を上げたメンバーには適切な評価とフィードバックを行い、チームの士気を高め、協力関係を強化します。 6. 振り返りと改善 プロジェクト後の振り返り：プロジェクト完了後に振り返りを行い、良かった点や改善点をまとめます。経験を積むことで、次回のプロジェクトに生かすことができます。 WBS 作成 Excelを使ってWBSを作成する場合、以下の手順に従って作業を進めることができます。 1：プロジェクト構造の決定 まず、プロジェクトの主要なフェーズやタスクを特定し、プロジェクトを複数のタスクに分解します。各タスクは、納品物や成果物が明確で、タスク間には依存関係がある場合があります。 2：WBS用のExcel表の作成 ExcelでWBSを作成するためには、以下のカラムを設定します： タスク番号（Task ID）：各タスクやサブタスクには一意の番号を付けます。 タスク名（Task Name）：タスクの簡単な説明や名前。 タスクレベル（Level）：タスクがWBS内でどのレベルにあるか（例：1はメインタスク、2はサブタスクなど）。 担当者（Owner）：そのタスクを担当する人物。 開始日（Start Date）：タスクの開始日。 終了日（End Date）：タスクの終了日。 ステータス（Status）：タスクの進行状況（未開始、進行中、完了など）。 依存関係（Dependencies）：前のタスク番号や名前を記入し、タスクの順番を明確にします。 3：タスク情報を入力 タスク番号の設定：プロジェクトの分解に基づいて、各タスクに番号を付けます。メインタスクには「1」、サブタスクには「1.1」「1.2」などの番号を付けます。 タスク名の入力：各タスクの名前を簡潔に記入します。 レベルの設定：タスクの階層を番号で示します。例えば、メインタスクは「1」、サブタスクは「1.1」「1.1.1」などと設定します。 担当者の割り当て：各タスクの担当者を指定します。 日付とステータスの入力：各タスクの開始日と終了日を記入し、進行状況を「未開始」「進行中」「完了」などで管理します。 依存関係の記入：タスク間の依存関係をリストにしておくことで、タスクの順番を確認できます。 4：Excelの機能を活用する セルの結合：親タスクとサブタスクの関係を視覚的に区別するために、セルを結合して階層を表現できます。 色分け：タスクの進行状況に応じて色を変更します。例えば、「進行中」は黄色、「完了」は緑色、「遅延」は赤色などで設定できます。 自動計算：期間や作業時間を自動で計算するための数式を設定できます。例えば、終了日から開始日を引いてタスクの所要日数を計算することができます。 ガントチャートの作成：Excelには、条件付き書式を使って簡単にガントチャートを作成する機能があります。これにより、タスクの進捗が一目でわかるようになります。 サンプルWBS表 タスク番号 タスク名 レベル 担当者 開始日 終了日 ステータス 依存関係 1 プロジェクト開始 1 山田太郎 2025/03/01 2025/03/03 進行中 1.1 要件定義 2 鈴木花子 2025/03/02 2025/03/07 進行中 1 1.1.1 要件収集 3 佐藤次郎 2025/03/02 2025/03/04 完了 1.1 1.1.2 要件仕様書作成 3 高橋一郎 2025/03/05 2025/03/07 未開始 1.1 1.2 設計フェーズ 2 中村大輔 2025/03/08 2025/03/14 未開始 1.1 1.2.1 システム設計 3 加藤健 2025/03/08 2025/03/10 未開始 1.2 1.2.2 データベース設計 3 小林正 2025/03/11 2025/03/14 未開始 1.2 ステップ 5：進捗の追跡 進捗バーの作成：Excelで進捗を視覚的に示すために、条件付き書式を使って進捗バーを作成できます。 動的な更新：Excelファイルをチームで共有し、各メンバーが進捗を更新できるようにすることで、プロジェクトの進行状況をリアルタイムで確認できます。 小技： データ検証：ステータス列に「未開始」「進行中」「完了」などの項目を設定し、データの統一性を保ちます。 コメントの追加：タスクの詳細や問題点をExcelのセルにコメントとして追加し、後から参照できるようにします。 Excelは専用のプロジェクト管理ツールではありませんが、適切に設定すれば、WBSの管理に十分活用できます。プロジェクトが小規模な場合や柔軟な管理が求められる場合に非常に有効なツールです。 WBS管理ツール プロジェクト管理において、WBS（作業分解構造）を管理するためのソフトウェアは多数あります。以下は、WBS管理に役立つ一般的なツールです： Microsoft Project Microsoft Projectは、非常に強力なプロジェクト管理ソフトウェアで、WBSの作成と管理をサポートしています。グラフィカルなインターフェースでタスク分解、依存関係の設定、リソースの割り当てが可能です。 Trello Trelloは、看板ベースのプロジェクト管理ツールで、主にタスク管理に特化していますが、複数のボードとリストを作成することでWBSを実現することができます。チームとのコラボレーションにも非常に便利です。 Jira Jiraは、アジャイル開発向けのプロジェクト管理ツールで、WBSを作成してタスクの進捗を追跡する機能があります。強力な問題追跡機能があり、開発チームに適しています。 Asana Asanaは、タスクとプロジェクト管理ツールで、タスク、サブタスク、プロジェクトの作成によりWBS管理をサポートします。シンプルで使いやすく、チームでの協力作業に適しています。 Smartsheet Smartheetは、Excelに似たインターフェースを持つプロジェクト管理ツールで、タスクのドラッグ＆ドロップによりWBSを作成できます。依存関係や優先順位の設定が簡単で、WBSの管理に便利です。 Wrike Wrikeは、チーム協力とプロジェクト管理をサポートするプラットフォームで、WBSビュー機能を提供しています。タスクを分解し、リソースを割り当てて進捗を追跡できます。 ClickUp ClickUpは、多機能なプロジェクト管理ツールで、タスク管理、目標設定、WBSの作成が可能です。豊富な機能を提供し、さまざまな規模のチームに適しています。 Monday.com Monday.comは、非常に直感的で使いやすいプロジェクト管理ツールで、WBSの作成と管理をサポートします。カスタマイズ可能なビューを使用して、プロジェクトタスクを整理し、進捗を追跡できます。 TeamGantt TeamGanttは、オンラインGanttチャートツールで、WBS機能をサポートしています。タスクを分解し、Ganttチャートで直感的に進捗を表示することができます。 Basecamp Basecampは、チーム協力ツールで、中小規模のチームに最適です。専用のWBS機能はありませんが、タスクリストやディスカッションを使ってタスク管理を行い、間接的にWBSを管理できます。","link":"/WBS-management-task-assignment-progress/"},{"title":"プロジェクトが遅延している場合の対応策","text":"プロジェクトが遅延している場合、プログラマーやシステムエンジニアは、遅延の原因を分析し、チームとのコミュニケーションを強化し、プロジェクト計画を見直して進捗を加速する必要があります。問題解決のための是正措置を講じ、遅延の影響を最小限に抑えるため、関係者への報告と調整を行います。また、プロジェクト終了後には振り返りと改善を行い、次回の遅延を防ぐための対策を講じます。 项目が遅延している場合、PG（プログラマー）またはSE（システムエンジニア）として取るべき対応策は、以下の順序で実施することが重要です： 遅延の原因を分析する プロジェクトの遅延の原因を詳細に分析することが最も重要です。 遅延の原因には、要件変更、技術的な問題、リソース不足、チーム内でのコミュニケーション不足などが考えられます。 まず、プロジェクトマネージャーやチームメンバーとコミュニケーションを取り、問題の根本的な原因を特定します。技術的な課題がある場合、システム設計やアーキテクチャを再検討し、根本的な問題を特定することが必要です。 また、要件変更が影響を与えている場合は、変更内容の優先度を再確認することが重要です。 チームとコミュニケーションを取る 遅延がチーム内の問題に起因している場合、迅速にプロジェクトマネージャーやチームメンバーと連絡を取り、現在の進捗状況を確認します。 チームメンバーそれぞれの作業内容を把握し、どこで問題が発生しているのかを理解します。 必要に応じて、作業の優先順位を再調整し、リソースの再配分を行います。 チーム全体が同じ目標に向かって進んでいるかどうかを確認し、全員が自分の役割を理解していることを確認することが重要です。 プロジェクト計画を見直す 遅延の原因を特定した後、プロジェクト計画を再評価します。 スケジュールやリソース配分が現状に合っているかどうかを確認し、改善策を提案します。 作業の再優先順位をつけ、遅延を取り戻すためにどの作業を加速できるかを検討します。 また、納期に間に合わせるために、現実的なスケジュールに修正を加えます。これにより、現状の問題に対処しながら、無理なく進行できる計画を立てます。 進捗加速のための是正措置を講じる 遅延を取り戻すために、加速措置を講じる必要があります。例えば、残業の実施や、作業フローの改善を行うことが考えられます。 非効率な部分を特定し、改善するための手段を講じます。 作業効率を向上させるために、ツールの導入やプロセスの見直しを行うことも有効です。 チームメンバーの作業負担を適切に調整し、最も効率的に進められる方法を見つけます。 顧客や上司への報告と調整 遅延が避けられない場合、早急に顧客や上司に報告し、遅延の理由を説明します。 納期の調整や他の対応策について相談し、理解を得ることが重要です。 遅延の原因とともに、今後の進行計画について説明し、新たな納期を提案します。 顧客や上司が納得する形で、調整を進めることが信頼を保つために不可欠です。 振り返りと改善 プロジェクト終了後には、遅延の原因とその対応策を振り返り、次回同様の問題が発生しないように改善点を見つけます。 どの段階で問題が発生したのか、チーム内でどのように対応したのかをレビューし、教訓を得ます。 これにより、次回のプロジェクトで同じ失敗を繰り返さないようにするための対策を講じます。 関係者への通知 遅延が発生した時点で、速やかに顧客、チームメンバー、経営陣など関係者に通知し、遅延の原因と予想される完了時期を報告します。 透明性を保ちつつ、関係者の不安を軽減し、信頼を維持するために定期的に更新を行います。 リスク評価と対応策 プロジェクトの進行中に新たなリスクが発生する可能性があります。 そのため、今後発生しうるリスクを評価し、適切な対応策を立てます。例えば、外部要因や技術的な障害が再発する可能性について予測し、リスクを最小化するための事前対策を講じます。 コミュニケーションの強化 チーム内でのコミュニケーションを円滑にし、定期的にプロジェクトの進捗を確認します。 問題が早期に発見されれば、迅速に対応できるため、定期的な進捗会議やレビューを設け、情報共有を密にします。 コミュニケーションの強化により、チーム全体が同じ方向に進むことができます。 10. 定期的な進捗報告 顧客や経営陣に定期的に進捗状況と是正措置を報告します。進捗報告は透明性を保ちながら、信頼関係を築くために重要です。遅延の進行状況や新たなリスク、改善策について適宜報告を行い、関係者が常にプロジェクトの状況を把握できるようにします。 これらの対応策を講じることで、遅延を取り戻し、プロジェクトをスムーズに進行させることができます。","link":"/Measures-for-handling-project-delay/"},{"title":"障害対応および影響調査の際に準備すべき資料","text":"障害対応や影響調査を行う際、必要な資料を的確に準備することは非常に重要です。これにより、障害発生時に迅速かつ効果的に対応でき、関係者への報告や再発防止策を立案するための基盤が築かれます。以下に、障害対応および影響調査において準備すべき資料を示します。これにより、障害発生から復旧までの過程が明確になり、再発防止策の立案に役立ちます。 1. 障害の詳細説明 障害の詳細を正確に記載することは、原因の特定とその後の対応において最も重要なステップです。具体的には以下の内容を含める必要があります： 障害のタイプ：ハードウェア故障、ソフトウェアバグ、ネットワーク問題、セキュリティ侵害など、障害がどのようなタイプであるかを明確にします。 発生日時と発生状況：障害が発生した日時、発生の前後の状況、例えばシステムの負荷やエラーの兆候なども記録します。 影響範囲：障害によって影響を受けたシステムやサービス、ユーザーグループ、部門などを記載します。これにより、障害の重要性を客観的に評価することができます。 2. 影響分析報告 影響分析は、障害が業務に与えた影響を評価し、今後の対応策を考える上で欠かせない資料です。具体的な内容は以下の通りです： 影響の程度：障害がどの程度の影響を業務やサービスに与えたかを評価します。例えば、サービス停止時間、業務遅延、顧客への影響などを考慮します。 影響を受けたシステム・プロセス：障害によってどのシステムや業務プロセスが影響を受けたのかを特定します。これにより、障害の範囲を把握し、今後の予防策を講じるためのデータを収集します。 関係者の影響：影響を受けたユーザーや部門、顧客などの関係者を特定し、それらの対応策を記載します。また、顧客や取引先にどのような影響があったかを整理し、必要な対応を行います。 3. 根本原因分析 障害の根本原因を特定するための詳細な分析が必要です。これにより、同様の問題を再発させないための根本的な対策を講じることができます。以下の点を分析します： 直接的な原因：例えば、ソフトウェアのバグ、ハードウェアの故障、設定ミスなど、問題の直接的な原因を明確にします。 間接的な原因：例えば、プロジェクトマネジメントの不備、テスト不足、人的ミスなど、障害を引き起こした背景やシステムの脆弱性なども考慮します。 原因特定方法：ログ解析、システム監視ツール、障害再現テストなどを使用して、根本的な原因を突き止めます。 4. 対応措置 障害発生後に講じた対応策を詳細に記録します。この段階では、以下の内容が含まれます： 短期的な対応策：障害発生後の緊急対応として、システムの一時的修正、再起動、パッチの適用など、迅速に行った対応策を記録します。 長期的な対応策：障害の再発防止やシステム改善のための根本的な対策を記録します。例えば、システムの構造変更、運用プロセスの改善、監視体制の強化などが考えられます。 5. 復旧状況と進捗 復旧作業の進捗を詳細に記録することも重要です。これにより、復旧までの過程を追跡し、必要に応じて追加のリソースを投入することができます。以下の情報を記載します： 復旧の開始時期：障害発生後、復旧作業をいつ開始したかを記録します。 進捗状況：復旧作業がどの程度進んでいるか、現状の進捗を報告します。 完全復旧の達成状況：復旧作業が完了したか、新たな問題が発生したかどうかも記載します。 6. リスク評価 同様の障害が再発するリスクを評価し、その予防策を提案します。以下の要素を評価します： 再発リスク：障害がどの程度再発する可能性があるか、過去の障害と比較してリスクの高い点を分析します。 予防策：再発を防ぐための技術的な対策、運用上の改善策、人的なトレーニングの強化など、具体的な予防策を提案します。 7. コミュニケーション記録 障害が顧客や重要な関係者に影響を与えた場合、適切なコミュニケーションが求められます。以下の内容が含まれます： 通知の記録：顧客への通知や、社内への報告など、障害発生時の通知の内容を記録します。 報告書の提出：進捗報告や最終報告書を作成し、関係者に適切に提供します。 コミュニケーション内容：関係者との会話やメール、会議の内容なども記録します。これにより、後の対応策を振り返ることができます。 これらの資料を適切に準備することで、障害発生時の迅速な対応と、影響を最小限に抑えることができます。さらに、再発防止策を講じるための貴重なデータとなり、企業全体の信頼性向上に貢献します。","link":"/Materials-to-prepare-for-incident-response-and-impact-investigation/"},{"title":"ウォーターフォールモデル各段階の成果物","text":"ウォーターフォールモデルは、ソフトウェア開発において各工程を順番に進める開発モデルです。このモデルでは、各段階ごとに明確な成果物（ドキュメントやシステム成果）を作成し、次の工程へと引き継ぎます。本記事では、ウォーターフォールモデルの主要な段階と、それぞれの成果物について概説します。 日本の大型プロジェクトの開発におけるウォーターフォールモデルでは、通常、厳密な段階的なプロセスに従って進行します。 「要件定義」、「基本設計」、「詳細設計」、「単体テスト」、「結合テスト」に加えて、以下のような段階もあります： システム統合テスト（System Integration Testing）：この段階では、すべてのモジュールやサブシステムが統合され、システム全体の機能や性能がテストされます。コンポーネント間の連携がスムーズに行われるか確認します。 受け入れテスト（Acceptance Testing）：顧客やユーザーがプロジェクトの要求に基づいて、ソフトウェアが機能や性能の要件を満たしているかを検証します。納品が顧客の要求に適合していることを確認する段階です。 デプロイ（Deployment）：開発が完了したソフトウェアを本番環境にデプロイし、最終的なセットアップ作業を行い、必要な環境設定を実施します。 保守（Maintenance）：ソフトウェアが納品された後、保守段階に入ります。この段階では、バグの修正、パフォーマンスの最適化、新たな要求への対応などが行われます。 これらの段階は通常、順番に実行され、各段階の結果が次の段階に影響を与えることになります。 要件定義 要件定義段階では、以下のような入力資料（Input）と段階終了後の成果物があります。 入力資料（Input）： 顧客の要求：顧客が求めるソフトウェアの機能、性能、インターフェース、操作方法などの基本的な要求。 既存システムの文書：既存システムの改善や拡張の場合、既存システムの文書やアーキテクチャ設計が参考資料となります。 業務フローやルール：システムがサポートする業務フローや規則、規範に関する情報。各業務の具体的な操作を理解する必要があります。 法令や業界標準：プロジェクトが関わる業界における関連法令や規制、標準に準拠する必要がある場合、それらを考慮する必要があります。 市場分析：プロジェクトが属する市場環境や競合製品など、市場ニーズや方向性を把握するための分析資料。 関係者（stakeholder）の意見：プロジェクトマネージャー、開発チーム、テストチームなど、関係者からの意見やアドバイス。 技術的な要求と制約：使用する技術基盤、プラットフォーム、ツール、技術的な制約や特殊な要件に関する資料。 成果物（Deliverables）： 要件定義書：顧客とユーザーの要求を明確に、詳細に記述したドキュメントで、システムが備えるべき機能や性能について説明されます。後の設計や開発の基礎となります。 ユースケース図：システムとユーザー間のインタラクションを示すユースケース図。システムの動作の流れを視覚的に表現します。 機能要件文書：システムが実現する必要がある機能を詳細に列挙し、入力、出力、動作などを記述します。 優先度リスト：各要件の優先度を整理し、開発時に重要度や緊急度に基づいて処理する順序を決定します。 非機能要件文書：性能、セキュリティ、信頼性、保守性など、システムの非機能的な要求を文書化したもの。 これらの成果物は、次の段階の設計や開発に向けた基盤となり、チーム全体が同じ目標に向かって進むための重要な指針となります。 基本設計 基本設計段階では、以下のような入力資料（Input）と段階終了後の成果物があります。 入力資料（Input）： 要件定義書：基本設計段階の中心的な入力資料で、機能要件、非機能要件、優先度などの詳細情報が含まれ、これが後の設計作業の基盤となります。 業務フロー文書：業務プロセスや規則を記載した文書で、設計者がシステムの実際の運用シナリオやフローを理解するために役立ちます。 既存システムのアーキテクチャ文書：既存システムの改修や拡張がある場合、既存システムのアーキテクチャ設計文書が重要で、システムの構造や制約を理解するために必要です。 技術的要求文書：システムの性能、プラットフォーム、ツール選定などの技術的な制約や要求が記載されており、基本設計に影響を与えます。 法令や規制に関する要求：プロジェクトに関連する法令や業界規格、安全要件などが、設計に影響を与える場合があります。 開発チームおよび関係者のフィードバック：開発チーム、テストチーム、運用チームなどからの意見や提案が、設計の実現可能性と保守性を高めるために重要です。 成果物（Deliverables）： システムアーキテクチャ設計書：システム全体のアーキテクチャを記述し、モジュールの分割、サブシステム間のインタラクション、データフロー、機能の割り当てなどを定義します。 インターフェース設計書：システムの各モジュール間のインターフェース規格を詳細に定義し、入力・出力フォーマット、データ交換方法、プロトコルなどを明記します。 データベース設計書：システムにデータベースが関わる場合、基本設計段階でデータベースの初期設計を行い、テーブル、データ関係、インデックスなどを定義します。 高レベルの技術的アーキテクチャ案：システムの技術選定、開発プラットフォーム、フレームワークなどに関する高レベルな設計案を提供します。 システムフローチャートやユースケース図：システムの処理フローやユーザーとシステム間のインタラクションを示す図で、開発チームにシステムの動作理解を助けます。 非機能要件の設計文書：システムの性能、安全性、信頼性など、非機能的な要求に対する設計案をまとめます。 これらの成果物は、詳細設計段階の基礎となり、システムのアーキテクチャや設計案が実際の開発に進むための指針を提供します。 詳細設計 詳細設計段階では、以下のような入力資料（Input）と段階終了後の成果物があります。 入力資料（Input）： 基本設計書：システムのアーキテクチャ設計、モジュール分割、インターフェース定義などが記載された基本設計書を基に、詳細設計を進めます。 要件定義書：詳細設計段階では、すべての機能要件と非機能要件を満たすように設計を進めるため、要件定義書が重要な入力資料となります。 インターフェース設計書：システム内外のモジュール間のインターフェース設計を詳細化し、データ形式やパラメータ、返却値、エラーハンドリングの仕様を定義します。 データベース設計書：プロジェクトでデータベースを使用する場合、データベースの詳細設計（テーブル構造、インデックス、データ関係など）が詳細設計の入力資料になります。 技術アーキテクチャ設計書：システムアーキテクチャにおいて選定された技術スタックやプラットフォームを基に、詳細設計を進めます。 セキュリティおよびパフォーマンス要件文書：システムのパフォーマンスや拡張性、セキュリティ要件に対応するため、これらの非機能的な要件が詳細設計に影響を与えます。 開発ツールやフレームワークの文書：使用する開発ツールやフレームワークに関する文書が必要で、詳細設計の段階でそれらに適した設計を行います。 成果物（Deliverables）： モジュール設計書：各モジュールの詳細な設計を記述し、クラス図、オブジェクト図、データフロー、アルゴリズム、データ構造などを含めます。これが開発者の実装基盤となります。 データベース設計書：データベースのテーブル構造、フィールド定義、データ間の関係、外部キー制約、インデックス設計などを詳細に記述します。 インターフェース設計書：モジュール間のインターフェース詳細設計を行い、入力・出力フォーマット、プロトコル、エラーコード、処理方法などを定義します。 技術設計書：各モジュールの実装技術、選定したプログラミング言語、フレームワーク、ツールの使用方法などを記載した技術的な設計書です。 テストケース文書：詳細設計に基づいて、各機能のテストケースを作成し、設計が正しく実装されることを確認します。 パフォーマンス要件設計書：システムのレスポンスタイム、スループット、同時処理能力などのパフォーマンス要件に対応した設計を行います。 セキュリティ設計書：システムの認証、認可、暗号化、データセキュリティなど、セキュリティ要件を満たすための設計書です。 これらの成果物は、システムの実装に向けた詳細な情報を開発者に提供し、テストチームにとっては設計が正しく実装されていることを確認するための基盤となります。 テスト ソフトウェア開発におけるテスト設計段階で、テストケース文書（通常は「テスト仕様書」と呼ばれます）の作成は、システムの品質を保証するために非常に重要です。テストケースは、テストの深さやシステムの構造に応じて、「メソッド単位」または「クラス全体単位」で作成されることがあります。以下にテスト仕様書の作成方法とテストの網羅性を確保するための方法について説明します。 テスト仕様書の作成方法： テスト仕様書には通常、以下の情報が含まれます。 テストケースID（Test Case ID）：各テストケースに一意の番号を付与し、管理しやすくします。 テストケース名（Test Case Name）：テストの目的や機能を簡潔に示した名前。 テストの説明（Test Description）：テストケースの目的と検証内容の概要。 前提条件（Pre-conditions）：テストを実行する前に満たすべき条件やシステムの状態。 テスト手順（Test Steps）：テスト実行のための詳細な手順。 期待結果（Expected Results）：テスト実行後に期待される結果。 実際の結果（Actual Results）：テスト実行後に得られた実際の結果（通常はテスト実行時に記入）。 テストデータ（Test Data）：テスト中に使用される入力データやテスト環境の設定。 テスト環境（Test Environment）：テストに必要なハードウェア、OS、ソフトウェアバージョンなどの環境設定。 優先度（Priority）：テストケースの重要度や不具合の影響度に基づいて設定。 ステータス（Status）：テストケースの実行状態（例：「成功」「失敗」「ブロック中」など）。 メソッド単位でのテストか、クラス全体単位でのテストか？ テストはプロジェクトの要求に応じて、メソッド単位やクラス全体単位で行います。 メソッド単位のユニットテスト：通常、開発者は各メソッド単位でテストを行い、関数やメソッドが期待通りに動作するかを確認します。ユニットテストは、JUnitやTestNGなどのツールを使用して自動化できます。 クラス単位の統合テスト：メソッド単位のテストが完了したら、次はクラスやモジュール単位で統合テストを行い、複数のメソッドが協調して動作することを確認します。 システム全体テスト：システム全体またはサブシステムの機能テストは、ユーザー視点でシステム全体の動作を確認することに焦点を当てます。 テストの網羅性をどう確保するか？ テストの網羅性を確保するためには、以下のアプローチが有効です。 カバレッジ分析：コードカバレッジツール（JaCoCo、Coberturaなど）を使用して、テストがコードの重要な部分や分岐点を網羅していることを確認します。 機能テストと非機能テストの組み合わせ： 機能テスト：システムが基本的な機能やビジネス要件を満たしているかを検証します。 非機能テスト：性能、安全性、可用性などの非機能要件が満たされているかを確認します。 テスト設計手法： 境界値分析：入力データの境界値をテストし、システムが極端なケースに適切に対応するかを確認します。 同値クラステスト：入力データを同値クラスに分け、それぞれの代表値をテストします。 状態遷移テスト：システムが状態遷移を伴う場合、状態遷移図を使って各状態の動作をテストします。 自動化テスト：Selenium、JUnit、Appiumなどのツールを使用して、テストの効率を向上させ、多くのテストケースをカバーできます。 回帰テスト：コードの変更や更新に対して、回帰テストを行い、新たなバグが発生していないかを確認します。 ユーザー受け入れテスト（UAT）：最終ユーザーによる受け入れテストを実施し、システムがユーザーの期待に応えているかを確認します。 これらの方法を組み合わせて使用することで、テストの網羅性を確保し、システムの品質を高めることができます。","link":"/Deliverables-of-each-stage-of-the-waterfall-model/"}],"tags":[{"name":"AWS","slug":"AWS","link":"/tags/AWS/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"Ajax","slug":"Ajax","link":"/tags/Ajax/"},{"name":"Axios","slug":"Axios","link":"/tags/Axios/"},{"name":"XMLHttpRequest","slug":"XMLHttpRequest","link":"/tags/XMLHttpRequest/"},{"name":"Junit","slug":"Junit","link":"/tags/Junit/"},{"name":"テスト","slug":"テスト","link":"/tags/%E3%83%86%E3%82%B9%E3%83%88/"},{"name":"JSP","slug":"JSP","link":"/tags/JSP/"},{"name":"Thymeleaf","slug":"Thymeleaf","link":"/tags/Thymeleaf/"},{"name":"fetch","slug":"fetch","link":"/tags/fetch/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"WBS","slug":"WBS","link":"/tags/WBS/"},{"name":"進捗管理","slug":"進捗管理","link":"/tags/%E9%80%B2%E6%8D%97%E7%AE%A1%E7%90%86/"},{"name":"障害対応","slug":"障害対応","link":"/tags/%E9%9A%9C%E5%AE%B3%E5%AF%BE%E5%BF%9C/"},{"name":"影響調査","slug":"影響調査","link":"/tags/%E5%BD%B1%E9%9F%BF%E8%AA%BF%E6%9F%BB/"},{"name":"設計","slug":"設計","link":"/tags/%E8%A8%AD%E8%A8%88/"},{"name":"ウォーターフォール","slug":"ウォーターフォール","link":"/tags/%E3%82%A6%E3%82%A9%E3%83%BC%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A9%E3%83%BC%E3%83%AB/"}],"categories":[{"name":"クラウド","slug":"クラウド","link":"/categories/%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89/"},{"name":"フロントバック通信","slug":"フロントバック通信","link":"/categories/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%83%90%E3%83%83%E3%82%AF%E9%80%9A%E4%BF%A1/"},{"name":"技術概要","slug":"技術概要","link":"/categories/%E6%8A%80%E8%A1%93%E6%A6%82%E8%A6%81/"},{"name":"バージョン管理","slug":"バージョン管理","link":"/categories/%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86/"},{"name":"プロジェクト管理","slug":"プロジェクト管理","link":"/categories/%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E7%AE%A1%E7%90%86/"},{"name":"開発プロセスモデル","slug":"開発プロセスモデル","link":"/categories/%E9%96%8B%E7%99%BA%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E3%83%A2%E3%83%87%E3%83%AB/"}],"pages":[{"title":"","text":"google-site-verification: google336114c45a30c979.html","link":"/google336114c45a30c979.html"},{"title":"","text":"お問い合わせ 案件のご紹介や、AWS・開発関連のお仕事のご依頼がございましたら、ぜひお気軽にご連絡いただければ幸いです。 お名前* 会社名* メールアドレス* お問い合わせ詳細* 内容を確認する","link":"/Contact/index.html"},{"title":"開発実績","text":"概要 エンジニア歴：3年（Javaバックエンド開発が中心） 主な担当：Webアプリのバックエンド開発（設計〜実装・運用） 経験：SESとして複数の業務システム開発に従事 職務経歴 【人事労務システム】 チーム構成 ７人のチームにPGを担当 開発実績： 既存のシステム保守、既存機能「出退勤管理、有給休暇・代休・振休管理、残業管理、工数管理などの機能」改修、テストを担当 OS・DB等・言語・ツール Win10/Oracle/Java/JSP/Javascript//Spring/SQL 作業範囲 製造、単体試験、結合試験、保守 【住宅ローンシステム】 チーム構成 ８人のチームにPGを担当 開発実績： 仮審査、顧客本情報管理、振替情報管理、保証人情報管理、顧客検索、担保情報登録、上記の製造、テストを担当 OS・DB等・言語・ツール Win10/MySQL/Java/Spring/React/Gitbook/React/Redmine 作業範囲 製造、単体試験、結合試験 特徴 アジャイル開発、オフショア開発 【政府向け税金システム】 税務署サブシステム チーム構成 8人のチームにPGを担当 開発実績： 税理士代理送信 通知連絡モジュール：納税証明書交付請求 データ検証モジュール：所得税確定申告、消費税確定申告、更正請求、インボイス制度 申告データの処理モジュール：確定申告書等作成、消費税(軽減税率) OS・DB等・言語・ツール Win10/Oracle/Java/Spring/Mybatis/Vue/SQL/AWS/IBM-MQ 作業範囲 詳細設計、製造、単体試験、結合試験 【生産管理システム】 チーム構成 6人のチームにSEを担当 開発実績： 工程管理、資材・仕入れ管理、在庫管理、出荷配送管理、顧客管理上記の機能担当 OS・DB等・言語・ツール Win10/SqlServer/C#/VB/ASP.NET/Ignite UI/JavaScript/CSS/HTML 作業範囲 基本設計、機能設計、詳細設計、製造 【政府向け税金システム】 受付サブシステム チーム構成 15人のチームにSEを担当 開発実績： 認証モジュール：利用者識別番号発行、マイナンバー連携 受付モジュール・電子申告モジュール：申告等データの内容チェック 返信モジュール：還付金処理状況確認上記の機能担当しました OS・DB等・言語・ツール Win10/Oracle/Java/Spring/Mybatis/Vue/SQL/AWS/IBM-MQ 作業範囲 基本設計、詳細設計、製造、単体試験、結合試験 スキル 経験 基本設計からテストまで一通りの経験あり 以下は1年以上の業務経験がある技術 言語 Java,JavaScript, CSS, HTML,TypeScript, C#, JSP フレームワーク SpringBoot, Spring, SpringMVC, Mybatis, React.js, Jquery.js, データベース MySQL, Oracle, DB2 クラウド AWS(EC2・Route 53) その他 Git, Docker, Gitlab CI 強み・自己PR 私はJavaを中心としたバックエンド開発を得意とし、特にSpringフレームワークに精通しています。これまでの開発経験を通じて、要件定義から実装・運用まで幅広い工程に携わり、チームでの円滑なコミュニケーションと協力の重要性を実感してきました。 また、独学でAWSを学び、4ヶ月でAWS認定資格（CLF・SAA）を取得。クラウド技術を活かした開発にも関心があり、実践経験を積みながら、より価値の高いシステム開発に貢献したいと考えています。 新しい環境では、技術の進化に柔軟に対応しながら、チームとともに成長し、ビジネスに貢献できるソフトウェアソリューションを提供していくことを目指します。 資格 AWS認定クラウドプラクティショナー(CLF-C01) AWS認定ソリューションアーキテクト-アソシエイト(SAA-C03) 日本語能力認定N２ TOEIC:615点 ソフトテスト初級プログラマ（日本の基本情報技術者相当の資格） 中国実用英語検定6級","link":"/Development/index.html"},{"title":"自己紹介","text":"c8d6a724b68e0a127e5cca7999ad329313daad2b507722e48518dd73ea121b78237552993b75cb72533b15dd82a4d44e7d1bb196fa2f8d4c7c355f9cd0f40ca1588e7195bfe182e6e3abd0f8eaeaee9eb723f6ef9a61565671af9b5a7a63ee62fd08f72e1699152ec1d9f0914c92584fc128925db000c9262150fbc12e33549ff16e80817960dd65629a9e1a2c9045a26343d10d35bcf530f366dcc8fa9cc8b189c6e0200e9435576713e7342fe26c18ceaebb8b0000720b2205768c88dff1f42f4d0805a51b7ced7f8c6f108f26becabf6e1767b49f34d3eccbe255506ab129199ab59ea03147c908b265d74bd4444f6e26eb534c254eed3064ff9c553f3f8883bbd2c23d08637ee23546f8aff207e52c217886dd5f5d525eff81d9ca9b2cd6acabf3d007f1434c8972256ca1deba4f2e3c07eddee2187dd2d7302378ea213eac6b60d194dd695a38bcf45024adce46da6f763fbd1a57aebbbff29d4e68fd0486637b8cb8fe2df5cd0d9e1b39358930a2952bcf5f1fe9e3665ccec146db319d841e036fab257ba1622b51652bbccef10eba03fb68448928740d08424c9fceea6fd202fa10e15ca77d1efec2bcf0d1683a3c048707a0eca26bc79f9ccd59033c82c089cc9e85388f48a1aa591b9101481d6ba8bc08e3228e32d2740341de6c7dd3fc3bd2d92af7e944bc690222177485d6de0fedc1150c8c2a241c4553d165108f167009dc30832325aa1d80bf3b7151c001fa31af53aaabba5fa5318fd288beb1d0d663c26f69c5e826f032e3762f66550256ffb0b09fb5dadd73bc5aa2a8e1ad5f2ae53fe847f6383fb25aac25bda9d5561dd19dc2b480d3c91a0ed6c4d5a5583e05dcf3f2639306e8396600ce62f47f1654394743cf7dc2a7d34b1ac486ad9d49287ee4add34a633d40c868f8790d5dbfc90554d504006ac8f406886e5b134d1ce14830025e0b763a7bb93f03648f3580f1803230b247e9d996dc374b6ce865b411ebf48fab6e556f6a02770e5ad68c1cff532470c9effe3643c859d14da4068552ae5c45907b6746dfe409b147162e27748cc7d19a0cd2c6ec43fdd1fdd185f71a58e10c2e73538d7cbed67bd4bdbe56486fab68f9bf145f7ab26c6b89295ef60e0b5438556085e3adabf04730b3cd34e191bd9fe375738369acd839c96b2521491f3ba1c2e77c5d98fde50679dc8d1317a1c30155dd692265b9caf848975e94442b2d7d2201a1483950486010883afcf5aedb4d4e5086f6fa43c67175d93cc7fee474615ce02dae02b3dc29c8b1d4e28f92e2e19760363e2d69e5aea04fcaf9ba43baf4f8f46c720479af0c29bca8cf28371925738c437fa2088b0563858a913ec59854b3e072e2207aa169e9b1b53564f42ee814595b871cebec5bd7a3568ac07c0d32ea040f1971a01a500bd1409bbebe2149dce523273a9eeb78c48e5eafc126b9c856a4771e038db6ec6a2ee13ca86b1b7cbf7c855e0d380b7b4ff2fb970c126f9d6665cf5a059d956b7ffa13d7aa3bf4991ddb4be3f2e663a2623b06eff2e1680723d6231b00b9de57e9e701009520f6d298c5409d409b24c35b8ade7d07969a9cf98f11bc500d3eafb7411efb822693e89e3a53a9c6ffc60c0b7ce76c4224d3b2266977c48ff6579ae0e4e4b1d529cc7656235cf35408d92c86271e33161c1e01514d42ff8b1d22a07154fe314869c23308313ce2951999ebda4051c1d9f788018e191cecf34012030da508041d13c582a5f686b3805c22ece68adce13fa4aa47129873fb59f53343c592bbf17e65263a348909ccc9db6cbf86ee829339b39b9dfe9f21d88b76afd832a6d8844cb79b7df7a8d1d2e6cb3ad9f2bbc04d67fa7fe1c415707dff529fbbec28ecc55e6f4a059bd42f8fd62c01cf9f2c835331539a51ddab5bd80c409a3ece8a01576db4ace097654b2d5ce89a2a5acedfbc7af3c903f14114b70dc4d38860503802c03b54aaf9569b7c80a500d361bdfdc57d616b4cff4225653eeb75c87992ac2d28fe95fb0adad88b2c326a6cf90a45fbc9e70b9250ace5a203dc75b5e7c3008e7538f8fed2d23be16d745a46279fc462a0b974d9dfdc5e3660adb395ac36f607ba2019116aac811ff41836da56f8b7e83490185172fe7163e0b5646391709490e3fb48db22734382595b1bf479654b23ede61f078b8fad313b97e1308d4f6f922858e12a7bd313905a1392c68c3ab93c55626da31354d3c4926b1ec10aa3b4461b6892831b1e3fb0a4f64e88fbb6f613b4766675465a73061700bb67caacaddc27f971001621cc19873805fbf3de0ee9683d35efaf1ac8230896730e673caf41cefeef2e1f5442fb1fed2909a1e1385dbda1c0be81e9d284d8b9bf44c1d6e5922fb9a77cbfff2afadab3db1bf86015f228ef216bc680f43d110870d54bb37d5d76b1f48b542dd0aa1ec12a9244a347c3b168b152fbb10befb44ce502c62e8b2dfeb9d126c856abdcbc0800ad060269acd4cfbf8a42eef934af3dd7a41c5061102796eeb1b0441b5a588126957acf25579e41a825465702b62f74b927eadc0d103503c48a6aeb85f7cb88520ed0e9e8596b6513ae5aa7ca983b1cbe7e3bb227206e3a16864e1093c82320a3b91c07c058385e75859a235fecec38df5e44a10421515302b921df29524d3a81d6f0d4a2ee19409577b239908a561030d77e1c960d1039ef6c0cba1afe5d785749db82c9298532ded45e856a8780f3335359395873982119ca94109cee2bb7f81017a96057a8c54544b0861938538583b1203e0913669b08d3cae49f61a95a254ee106a160a5bc8258ae8a47cc4d6097ec94cecabf978ac6a6fea65aa13469f857b5dbba1613aaa53dbdf014cb82431a78857fb8f3620eff1737dbc6e82c528ffaf20b1ceec2c67c99f243059ef94c5918df1cb8121ceb6a0436b7e37e8e75025eb621e703e522747481143f08e70049526fb921f6987a0c0664ae25f6f7cf00f53464cba9e6ec86d1431f3a2ad90f85bcb03d7fcc827aecdd30edb023a9b671a17148a4541f3646f49711caec1e456bae0073dff56af8ea2fe1f56bc194289537fc961e5688e205861d1b9855cd8dbe390176375477a0fc380c59d44536632b7fe6ed47a6b410dc665e951463ebcba9eaeddbf5f55d02f0b380ea32f2297a7d612841bb3cbbf45e699b2e45398f2d2cde0ec00aad254be9159dff27d1fec7c85485db3b501566c984ade22879976ecdd858eb59ba290a03c825e0aff77199093c434b70d68f9803e35cc0fb27c20b6ff3367f954a66db7440de9bb6c9836176bef9400ddacd01ce50e6aeb170c0dcc68621889c1790023d00c3e62e83c3b473bf8d488d828d249cde1e9f6e6478352eed59aaba5367a8f3f274d50be075805187c4d877d1aeae8a25bb78bee23ef05964350e46ee3fcd0098a5f1a56a0a1a81ee031606704a4a2783f5849a903631c80ee3feca3b96807fbf4d79e5a638db23110f0207b7fc74170fc1767615f63a028d3f6190fdcceda94d8207fad0f2431b104af391c39c8c367654fdb3b3ffde28dda39c16369363391f6344abc519ab15d3356430170dba2acac6edc3a85e352f4bc8e069f294eca5f516cb2696257e2dbd38ab0c9a1f9ea2bf03a9fdc0e06af16f6de5a95fcae71b359e5371b27e69d3e1403039bf2922730c37aa7afc2e87cfc7f58296e5c141e4ea7654cb30d3af9a553520088fbf2cbfc5027a9a00866425a13247fbf3a708e073fa10ff8ebccf1442f3ad0d745e56063058de85f10b4d18d2d1bfb67c284a6dee8a28e00cf59cb3025f159d240ff6dc0d53f752da1c706812404701aaf510ed214792d169c5e4d2c1f1c65c60d5464bb14fe554deb187724e871c5ad2f612346ff0345d43323bffa74ae2daeeda5190661fe591dcf6e01241f61343127f39968fc053a53c1c5da16fe5ec8be9617072e3c102f5238e53acc5ef6290352171c51245c46d5801d7d928daef76565a0283df9c70c64393ce0a4ae1263b1a24a15a879841637240d6a75cc7c17437d7ed2aebe6fd6d8e949a18024d6eccc87940aa48e0e43823b5c091910bec6a4f6ab94487fa15d2920ca37c6823af2d7d195d5345ba9ef19561ad6a336da37dc7045e38391bf9e4a8c9998e77d12dba65bfb84646f980186ff4cc2c516a8e3cad1c0ad6a7209276dda566bffab45cdf8b6f78d1889812ad1f6fbd3c0f454d1535cbaf408c4e93a8b7e14a7c0d23611e3f71a245a332fb554bb3500d4645f45721fb6c48acc938c72e9dfcc7834a875ed3efacfa26bb057a570af649c35a66c1238313d627f9831bd2297c6d837adc85979fabd7cf19afcebe866507b07574e5e998851611ab65eea3e7d56024b67abb872d56f7ec28c8eff386fc5ca93e8ef8ce1d7b948a8e57051fa45c2c5f221bde4728453a7a7d62d504a68c594b0e5f22d2d5fbcf5cf0fa69b1734349adcdaef2d26aa172b631253bd5743a5fc10ee23792cc040aa2e7a96c1222b604799e2ed061408aeecf1961a8bea35e80dce325931ec86b60b5b383c41d07442e04f7969b08ae375c6804920172b5cf6085aac2b7a423fd002f81201aa09e43056a2f3cc592a456171743523a83af2e27e51f23a50824a88824f67f318842adea9fc9c1d075df82a18cafd53b21ba24a048c1acba4d56b8263544eb4ad62bacc0fb5926ad4d696b207ca8c1b614a1d3fea30676f555487a6a51571b73c0e2f2a86d8fa29474d17983d3df26a2ffe039cca156dcd4d305528b4e98660daab5c895fd8c713922e810cb7582050f8387d8be037356d8bf3f1a09a1d6d2429415a0d235d5cb10a410d3167a5080f4d4cecbba4a4e3a2fbcefc2a55af7c449e9879d61b1c8fdecd02047f92cdd6906cfb0c9bb2f3290691c810e5658b1b4043be7d2ad03e3cb1d313409b37a3b7938499fa5ee3dab18e8ace4d4452f0ce2a8001c8143fbd89f516eaab005e62a6e4898963436efae15be99cd8b881b372a123361aba3d361575fafc81f8d26d646006ceaa2a562dfae7ab58aa07b8448b9d20a6dac0db538e54379c86c15ab5e27c3d6be8a316931175885b5a704501be97d153225d7b89f8b85eb9599ca9e7ea315ef4dee850cef5e1cd90a14fdbc3fc717f7dffd67c905a4ff1ce05f13aeee4e48422d8ce1cad761eebe8f8cb9449cbbba88e68cafa0fe331780be171c4e4875b3bfedcb45b9b6567eca0a3b2e7b74a16b8eb8f3971507246046f07f8345ef576263147d800fe0bf5be879de92daac216eebc0eadaf8b5345f13039c0ad87dab746b4740ecba57b2c6138499f119d42d91a878e60d9889ea5d0041e3670f301574f0257dd11a19277f6a3fc581e48c3ec6159191f9aa6d525c421d02b47700f430c3a47512705676862e86fee03434a0d4053596a1205cd5fd05b81517b772b045d13d69611ce977e3141fc35086355e5d53d4f2583e333996eeadb2f0bf0ed4d438c980b5176e20d01fe5af4fd5a0efda4f8af67185cb9bc3947624fa0d9e46a7b2cfe3236c02dd52dcc4972301d5a96f5b94673bf353fabfeefb44db3b23f831756a5aa19e8723a7b3e0103c53333bd3825eb7b73ed472dde58994f7e4b66585c5a8ee56e07336ae3c2c2a0dac1a1c1140a7e238a194405bf475414da08c6851bb4012d38ae39b96e2de1d1da26f7d991718e67f66816e5a3083c0382458a0e156f67c8d23a71080666dc00b3c95232aec18b063eb75365de5819b53d17322584c294f940d2327ce34b7de98ddfc1789fbd79ae070fe410f096b1ca0d967aea573a8df80d65ac3ff35defb6feebbd502754f75ac8ebaf71ecb05eafcfc3c47de677ef7a989c34e29349fe7074f6c0fb39463f8467c2469f1c3a91b2f00abf592451b6db0c700d70f3f9c7424c531a79a3c062b382d1cba66cf6a6a5dac953490f229b5d25072c2cba3953fa3625302ee297b0fa0aa5ae72aef5eb13c440a7977f51d02abe80cc894c48cb2c1cc410030fdf119ef80f3ab12592fd1e76b5e1f256805f980be253f5a2e765ffcfa52534b17e5c635710a504d8b310f4a02be32c97e17ef48e1cfca59cfdc3e33f3edc06c90ccb0f1840e36c1c7f5a9cbaab69b4a7aabccd732622d1a89870d9ee584312b0bf9af03d2845b87728813a203871d4064b6cf1c9cb8bb4f135a0cb05542a45361abff7dd218ee71b59bad3be4238aef1650b3723cb56e75728850c908827d500dc6bc2dbe53cd77433f1e2a93aa742aaca5289002a09d98c16961109d03da66d8b68390dcba10fbbaa05fe0c3509004e2755b8be38d0fe67fa1b50bcfc800db5f6e5e4ad8369a68145f0f0f47c4b2da1e4182791d0c95d693c508d3406fed9b53b562ded35330283667cbe36afea43b75b8c038c7ea3ffd4b07bf8c8ba54a5fc1d5f007d615c8ef54c1036602b4f1b4bac8db57bab84a79bcaac8fdd631a67c7e11d9332af6b77650fe487239d35c59ecf235fe57640c58f4f24b81b9fc65b068fdd11b7fd036743c049438b0c25a0347c8bcd8c55200a4d6bae6fca942f4a5b4124434fe3ecac52b8346d10433e7cbbc2e400e9e932711fce3623a587e2bb73dddf13acaa75b4db96f4a965f63ceab4bb158c5ee882f253f154d9c706f69b7e3c34c964b35f9c5423a23b39ea6d8b7d62c34beace858f5ef0ee882b8c3881002c3c11d2679c85e2aeeb5d8c10249ef675b6b9f479b13c2e56e445d5f014e736ff33259504db6f4684556a609f1bb87bf81651ffd1b311422adb3510cca3a366b35997322f56ef4758ca860b43b8270b9cf510d1db685aaf4bd4d29fabd73087465156ae5665f14078c202b87a23ba6a73a6ba83becb161545f4ed8bcf1fd13bb667f07f9b3f8c0fdfc10dc5deb89932f6235581ee2f2f29fe248f3e6563cc25f9931ad820fc32abc9c0bdc735d9edaeb1bcbd83ec0ee7c7f08ee046e03724fc25a903c3f7d38e87e1ca1d76eff40e4ae29d1dc6b035f84b2b56cce1254c123eb957221c0dfeef7b53589d67d392fbb2cb0a001aac5e63abb0ca4050d3e0b8c99e275aea4bec3f287e25b58bc7ed43b33b39dea8f791f6b72c410922f7d4db73eaf2f8a4eb939aad4a88a10b299ea560d0fd245396d02177dcb4f936c652d2bf926fbf527f4020bc344b6444e69be523df334069ae229e89fed416100c5532d78bec37b5e20c2facfaea9027a4df4c8ab6c1b70fa9aab5e909692c8b391d4fa140945837241c69d0a63acd110da5875432b2c0879190e6029bf78411266fdab83e9ac436015dddf51716492137f745abcd4d263f328003434cbb77bb358e3da6cecf6cc2df222805c9afe39e311cd75128cbebabe6af12ece1b19cab63221603daa1d459898b8e7c6d207a4d46f9c09290ef5d63ec42a2742dca4922a2b18b3a5df0e7a8146b585b30a1861a9789b32fc7bffa0319a861c988e1c6bc3bccc3197471462b5f86236d82df0a738c71939bf605a18af83b033883614472b6161da43cd4896537098c51fcfef176eed7a1c160158cbb6ca96247f4d32a3e74cfc025c92ab54935120 こんにちは、ここではパスワードが必要です。","link":"/about/index.html"}]}