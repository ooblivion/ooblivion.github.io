{"posts":[{"title":"HexoのIcarusテーマを使ってブログを構築","text":"本記事について 私は自分が記憶力があまり良くないことを知っていますので、何かを書いて記録するのが好きです。 これは一種の知識の復習とも言えます。 チャンスは、心の準備のできている人のところにやってくる。 TODO 让博客阅读页面更宽 双语切换按钮追加 添加一个可以隐藏右边栏目的按钮，点击之后只显示文章，可以更加专注阅读 如何无缝切换到其他设备编写博客 文章页面隐藏个人信息 如何禁止复制页面中的文本 音乐播放插件 seo搜索引擎优化 ok blogについて 本を読む記事 Amazon web service業務システム設計移行ガイド AWS認定 クラウドプラクティショナー 项目 设计 开发 上线 部署的流程记录 项目中用过的开发工具和相关软件和使用方法速记 細かい設定 渲染器升级 将自带的 hexo-renderer-marked 更换为功能更加强大，渲染速度更快的 hexo-renderer-markdown-it 渲染器 【Hexo】选择更高级的Markdown渲染器 添加图床，存储图片 jsDelivr CDN 对 Github 图床进行加速 图库目录设置 PostPic/Cover/ PostPic/Thunmail/ DailyLife/ Program/ Reading/ Anime/ Others/ 文章页面调整 主页以及文章页布局 文章样式 h1~h6 分享组件 评论插件 修改Google搜索结果中显示的图标 我该如何更改在Google搜索结果中显示的图标？ 其他 图片插件 文章排版设置 text licenses hide 在个人页面头部加入 aritcle: ? licenses 标签和目录的写法 tag&categories12345678910111213141516171819tags: - 123 - 456tags: [123, 456]多标签写法，这2种都是一样的效果，用哪个都可以，建议使用列表[]式，直观清晰。这是默认的写法，给文章添加一个分类。categories: 123这会将文章分类123/456子分类目录下。categories: [123, 456]这会将文章分类到123/456子分类目录下。categories: - 123 - 456多标签写法，文章被分类到123、456以及123的自分类789这3个分类下面，官方指定写法。categories: - [123] - [456] - [123, 789] プログラマーがブログを書くときにタグとカテゴリを柔軟に使用する方法 プログラマがブログを書くとき、タグとカテゴリを使用すると、読者が興味深いコンテンツをより迅速に見つけられるようになり、非常に便利です。以下にいくつかの提案を示します。 タグを使用する: 各ブログ投稿を、投稿コンテンツのキーワードまたはトピックである関連タグに関連付けます。 タグは簡潔かつ関連性を保ち、あまり多くのタグを使用しないでください。通常、記事ごとに 2 ～ 5 個のタグが適切です。 タグには技術用語、プログラミング言語、フレームワーク名、質問の種類などを使用できるため、読者は興味やニーズに基づいてフィルタリングできます。 カテゴリを使用する: ブログ投稿をトピックまたはコンテンツごとに分類し、各カテゴリが関連する投稿のグループを表します。 カテゴリには、技術分野、プロジェクトの種類、プログラミング言語、アプリケーション シナリオなどが含まれます。分類構造は、ブログの内容と読者のニーズに応じて設計されます。 読者の閲覧とナビゲーションを容易にするために、カテゴリの過度の細分化を避け、カテゴリの階層を明確に保ちます。 柔軟な使用: ブログを書くときは、記事の内容を説明する適切なタグとカテゴリを選択し、必要に応じて新しいタグとカテゴリを追加します。 タグとカテゴリは、読者のフィードバックや閲覧状況に基づいて調整および最適化され、読者の興味やニーズにより沿ったものにすることができます。 タグ クラウドまたはカテゴリ ナビゲーションを使用してタグとカテゴリを読者に表示し、読者が興味のあるコンテンツをすぐに見つけられるようにすることができます。 一貫性を維持する: 同じタグとカテゴリの命名規則を使用して、ブログ全体でタグとカテゴリの一貫性を保ちます。 複数の作成者またはチーム メンバーがブログを共同執筆する場合、統一されたタグとカテゴリの管理戦略を開発して、ブログ全体の一貫性と標準化を確保できます。 プログラマがブログのコンテンツを整理し、管理し、読者の読書体験を向上させるために、タグとカテゴリを柔軟に活用することが重要です。これにより、興味のあるコンテンツを簡単に見つけられ、技術的なトピックの理解と応用を深めることができます。具体的な記事の内容やテーマに応じて、適切なカテゴリーやタグを柔軟に選択し、読者が興味のある情報にすぐにアクセスできるようにします。同時に、タグとカテゴリの一貫性を保ち、標準化することは、ブログの読みやすさと検索性の向上に役立ちます。 &nbsp;中国語写博客时，使用 tags（标签）和 category（分类）是非常有用的，可以更快速地找到感兴趣的内容。 使用 Tags： 将每篇博客文章与相关的标签关联起来，这些标签应该是文章内容的关键词或主题。 保持标签的简洁和相关性，不要使用太多的标签，一般每篇文章使用 2 到 5 个标签比较合适。 标签可以是技术术语、编程语言、框架名称、问题类型等，以便读者可以根据自己的兴趣和需求进行筛选。 使用 Category： 将博客文章按照主题或内容进行分类，每个分类代表一组相关的文章。 分类可以是技术领域、项目类型、编程语言、应用场景等，根据博客的内容和读者的需求来设计分类结构。 避免过度细分分类，保持分类的层次结构清晰，方便读者浏览和导航。 灵活运用： 在撰写博客时，选择适当的标签和分类来描述文章内容，并根据需要添加新的标签和分类。 可以根据读者的反馈和浏览情况来调整和优化标签和分类，使其更符合读者的兴趣和需求。 可以使用标签云或分类导航等方式将标签和分类展示给读者，方便他们快速找到感兴趣的内容。 一貫性を維持する: 在整个博客中保持标签和分类的一致性，使用相同的标签和分类命名规范。 如果有多个作者或团队成员共同撰写博客，可以制定统一的标签和分类管理策略，确保博客整体的一致性和规范性。 中国語12345678910111213141516写博客时，使用 tags（标签）和 category（分类）是非常有用的，可以更快速地找到感兴趣的内容。1. 使用 Tags： - 将每篇博客文章与相关的标签关联起来，这些标签应该是文章内容的关键词或主题。 - 保持标签的简洁和相关性，不要使用太多的标签，一般每篇文章使用 2 到 5 个标签比较合适。 - 标签可以是技术术语、编程语言、框架名称、问题类型等，以便读者可以根据自己的兴趣和需求进行筛选。2. 使用 Category： - 将博客文章按照主题或内容进行分类，每个分类代表一组相关的文章。 - 分类可以是技术领域、项目类型、编程语言、应用场景等，根据博客的内容和读者的需求来设计分类结构。 - 避免过度细分分类，保持分类的层次结构清晰，方便读者浏览和导航。3. 灵活运用： - 在撰写博客时，选择适当的标签和分类来描述文章内容，并根据需要添加新的标签和分类。 - 可以根据读者的反馈和浏览情况来调整和优化标签和分类，使其更符合读者的兴趣和需求。 - 可以使用标签云或分类导航等方式将标签和分类展示给读者，方便他们快速找到感兴趣的内容。4. 一貫性を維持する: - 在整个博客中保持标签和分类的一致性，使用相同的标签和分类命名规范。 - 如果有多个作者或团队成员共同撰写博客，可以制定统一的标签和分类管理策略，确保博客整体的一致性和规范性。 サンプル Category: テクノロジー バックエンド/フロントエンド/インフラ/設計/基礎学習 ライフスタイル 思い/ジャーナル/日本語学習/日本の生活/趣味/ 作業 仕事ノート/勉強ノート/試験の準備/ その他 ランダムな考え/サイクリング/歌詞/ tags: front JavaScript/React/Vue/CSS/HTML/BootStrap/Jquery/Postman/Swagger backend Java/Kotlin/Spring/RubyOnRails/MVC/BFF/Node.js/JUnit5/Mockito db Oracle/MySQL/MongoDB/PostgreSQL/Redis/DB/SQL cloud&infra Docker/AWS/Azure/Kubernetes/CI-CD/Infra others Frontend/Backend/Music/Cycling/Hexo/MarkDown/Git/振り返り/筋トレ/雑記/EN/JP/CN/TOEIC/試験メモ/読書メモ/JLPT/作業メモ/開発メモ/勉強メモ/日本語メモ/英語メモ/エンジニア知識/単語/Linux/Mac/Win/Eclipse/Maven/IDEA/クイックチェック/work/外国人/ツール/TODO Waterfall-model 要件定義/基本設計/詳細設計/実装/テスト/リリース マークダウン Markdown 基礎 名称 描述 语法 示例 markdown-it-abbr 注释 *[HTML]: 超文本标记语言 *[HTML]: 超文本标记语言 markdown-it-emoji 表情 :) 😃 markdown-it-footnote 脚注 参考文献[^1] 参考文献[^1] markdown-it-ins 下划线 ++下划线++ 下划线 markdown-it-mark 突出显示 ==标记== 标记 markdown-it-sub 下标 H~2~O H2O markdown-it-sup 上标 X^2^ X2 markdown-it-checkbox 复选框 未选：- [ ]选中：- [x] 未选 选中 ハイレベル markdown-it-imsize：自定义图片宽高。 ![test](https://raw.githubusercontent.com/ooblivion/PicGo-repository/master/Others/202404042208048.jpg =100x200) 出力 实际上好像并无法自定义宽高，只会以值更小的那一边为准。 markdown-it-expandable：折叠/展开内容。 &nbsp;クリックで折りたたむこれが隠されている内容です。 12345678910111213141516171819+++ **クリックで折りたたむ** これが隠されている内容です。 +++## Closed++++ Click me!Hidden text+++ NestedInner hidden text+++++++## Open+++&gt; Click me!Hidden text+++ NestedInner hidden text++++++&gt; markdown-it-container：自定义容器。 12345678910111213141516171819::: tips**提示**这是一个提示:::::: warning**注意**这是一个警告:::::: danger**警告**这是一个危险信号:::::: success**成功**这是一个成功信号::: 提示 这是一个提示 注意 这是一个警告 警告 这是一个危险信号 成功 这是一个成功信号 title code","link":"/hexo-create-blog/"},{"title":"仕事用日本語ノート","text":"本記事について はじめまして挨拶 お疲れ様です。 れは、メッセージを送るときや、社内外で挨拶をするときに必ず最初に言う言葉でなければならない。 おはようございます！仕事はどうですか？順調ですか？ 簡単の進捗状況 昨日の作業実績は○○ ○○詰まっています リーダーさんに相談したいのもの、いくつかあります。 社内用語 申し出る表現と応答表現 (提供表达和响应表达) 何かお手伝いしましょうか? ありがとう、大丈夫です コビーをお取りしましょうか? ありがとう、だけどできますよ 私に何かできることがありますか? ありがとう、お願いします(ご親切謝します) 何かご用の場合は、遠慮なくお申し付けください ご親切ありがとう アドバイスを求める表現 (寻求建议的表达) お忙しいところすみませんが、少し質問がございます この件に関してどのように対処すべきか、ご存しですか? プレゼンの方法についてアドバイスが欲しいのですが. 予算の問題について何かアドバイスをいただければと思うのですが. 苦情を処理する方法についてアドバイスをいただけませんか? 良いアイデアが何か浮かんだら教えてください。 提案&amp;アドバイスの表現 (意见和建议的) 仕事に優先順位をつけることが大切です チェンさんと宜接お会いになることを提案します この帯ですと、タクシーよりも電車を使う方がよいでしょう 昨年の予算を見直すことを提案します 結論を箇条書きにした方がよいと思います 机のまわりを整理整頓した方がよいと思います それに関して謝罪した方がよいと思いますよ それに関しては議諭しない方がよいですよ Eメールの口調を変えたほうがよいでしょう それに不要になった秘書類はシュレッダーにかけてください 確認方法 1つ確認したいことがあります。通常の項目だけでなく、ボタンも○○の色に変更してもよろしいでしょうか？ この ○○ファイルはほぼ完成しましたが、まだいくつか不確実な点があります。それでも、次のステップに進んでいます。 不確定な部分には、オレンジ色を付けました。 すみませんか、一点だけ確認のことよろしいですか？ 雑談 通話で会話する感じの認識であってます？ 今から通話問題ございません 〇〇さんにデータベース更新定義の項目が記載されていないものについて確認してきました。 今は表現できていないため、後ほど追加しようと思います！ 特に指摘事項はありませんので、今日の作業分まで記載をお願いします。スケジュールの進捗率に反映もお願いしますね～ 今のレイアウトのまま、一旦別の画面も進めてもらって問題ないです。もし指摘があれば、後ほど合わせて修正してもらうかもしれませんが、よろしくお願いします。 仕様が決まりないのものいっぱいある 今日も一日、引き続きよろしくお願い致します。失礼します。 ありがとうございます。確認するので少々お待ちください。 申し訳ないですけど戻してください。修正する場合は、有識者に確認をお願いします。 今何を画面修正必要ですが？次の作業ご指示頂ければ幸いです次は、〇〇画面お願いします。資料、ソースに記載があるので大丈夫だとは思いますが、不足している場合は私に連絡ください。 夕方の説明を伺ってから、担当画面の割り振りを決めた方がよろしいでしょうか？ この仕事は私の能力の許す範囲内で可能な限り最善を尽くしました。 私はこの仕事において、自分の能力の範囲内で最善を尽くしました。 I have done my best within the limits of my abilities on this job. 休暇の申請 おはようございます。突然の連絡になりますが、昨日から私の体調が悪く、熱が出ていて作業が難しいため、本日はお休みをいただきたいと考えています。ご迷惑をおかけして申し訳ありません。 突然の状況報告 仕事がスムーズに進まない 今、仕事をしていると、分からない事が出てきて、行き詰ってしまいます。 これまでの経験で気になる点や詰まった箇所がありましたか？お手伝いできることがあれば教えてください。 トラブル ご迷惑をおかけしております 本件についてマネージャーとも相談を行い、原因を再発防止内容をまとめました。 お手数ですが、ご確認お願い致します。 経緯🙆、再発防止策⭕️ 本件がチーム関係者に事象と対応内容の共有を行い、チーム全体の対応向上を図りますに努めて ご回答いただき、ありがとうございます。 改めて、経緯・再発防止策についてご確認いただけますでしょうか。 遅刻あやまる 例１ まずは謝る 本日の遅刻に関しまして、誠に申し訳ございません。 原因説明 アラームの設定ミスにより、出社が遅れました。今後はより注意を払い、定刻に出社できるよう努めます。 再発防止 メールは送信しましたし、勤怠も打刻しました。10時半から仕事を開始し、現在も継続して業務を行っています。本日は残業し、遅れた業務を取り戻す所存です。また、午休時間も休息せず、業務システム作業に取り組みました。このような対応できるよう、努力してまいります。 ご迷惑をおかけして申し訳ございません。何卒、ご理解賜りますようお願い申し上げます。 例２ まずは謝る お疲れ様です。 皆さん、改めてお詫び申し上げます。この度は会議に遅れてしまい、大変申し訳ございませんでした。今後は時間を十分に配慮し、会議には必ず遅れないよう努めます。今回のことで皆様にご迷惑をおかけし、心よりお詫び申し上げます。 原因説明 また、会議に遅れてしまった原因は、ノートパソコンの充電器を持っていないことに気づき、家に戻って取りに行かなければならなかったためです。さらに、今日の朝、会議の予定を完全に忘れていたこともありました。このような状況を作ってしまい、本当に申し訳ございませんでした。今後はこのようなことが二度と起こらないよう、より一層の注意を払います。 再発防止 今後はこのようなことが二度と起こらないよう、自らの責任を強く意識し、改善に努めます。また、私は今後、携帯版のTeamsアプリをダウンロードし、いかなる場合でも事前に連絡を取るよう努めます。 退场寒暄 この短い間に、大変お世話になっております。 まだどこが会いましょう。 退職に向けたグループメッセージ IT単語 ITgo技术者之家 単語 【释义】 【例句】 ガバガバ（がばがば） 完全没有做必要的安全对策。 開発環境とはいえガバガバなのはどうかと思う。 虽然是开发环境，漏洞百出也不行吧。 お尻（おしり） 指期限的意思，有的时候也说成「ケツ」。 お尻ってずらせないの？ 完成期限能放宽一下吗？ ちくちく 和“しこしこ”类似，指一点点地做某事。 ちくちくログを追っかけてる。 正在一点点地分析日志。 ヌルヌル 页面切换的时候动作或过程顺畅，反义词是“カクカク”。 思った以上にヌルヌル動くね。 比想象中跑得要顺畅。 しこしこ 一点点实现想做的事，主要指利用空闲时间。 面倒だけどしこしこ作りました。 虽然很麻烦但是还是一点点地做出来了。 ゴリゴリ（ごりごり） 强行使用复杂的技巧实现一些机能。 昔の偉い人がゴリゴリ書いたSQLが読めない。 以前的大拿故弄玄虚写的那些SQL根本看不懂。 引く（ひく） 原意比较多。软件开发中多是指域名解析，有正向查找和反向查找，和查字典（辞書を引く）有点接近。 「サーバにつながらないです。」 「確認だけど、名前は引ける ？」 “服务器连不上了。” “确认一下，域名能查到吗？” サチる（さちる） 字典里一般没有这个词，是从单词saturate(饱和)衍生过来，用于形容资源的使用量比较高、剩余不多的情况。 ネットワークがサチってる。 网络很慢。 倒れる（たおれる） 原意有倒塌的意思，在ACT-STANDBY构成的系统中，ACT发生故障时启动备用系统（STANDBY）以确保系统的可用性和连续性。这过程通常称为“Failover”（故障切换）。 主系が落ちて副系に倒れて動いてるみたい。 主系统瘫痪了，切换到备用系统好像能跑通了。 踏む（ふむ） 愿意是踩、踏的意思，开发现场有时指遇到了不好的事情。和踩地雷有点类似。 「原因わかった？」 「バグ踏みました。」 “原因明白了吗？” “是bug。” 垂らす（たらす） 原意为垂下的意思，和“這わす”相反是指把配线从顶棚走。 「ここの配線ってどうするの？」 「天井から垂らします。」 “怎么布线？” “从天花板走。” 張り付く（はりつく） 原意为贴附，软件开发中经常指CPU或内存的使用率一直比较高的状态。 CPUがずっと100%に張り付いている。 CPU使用率一直都在100%。 掴む（つかむ） 原意是抓住、掌握的意思，软件开发中会用在进程等资源正在使用无法释放的情况。 原ファイルが掴まれててアンマウントできない。 原文件正在使用没法解除挂载。 流す（ながす） 原意是放、流的意思，软件开发中指执行处理，尤其是指启动批处理。 データ変更バッチを流す。 执行数据更新的批处理。 殺す（ころす） 【释义1】 指强制停止无法控制的进程。 【例句】 とりあえずプロセスを殺してみよう。 先杀一下进程试试看吧。 【释义2】 将系统或者程序的部分功能无效化的意思。 【例句】 圧縮は圧縮で負荷がかかるから殺しておこう。 压缩会增加负担，把这个功能关闭了吧。 カツカツ（かつかつ） 资源已经完全被占用。 今月はもうずっとカツカツ 。 这个月一直非常非常忙。 ガチガチ（がちがち） 原意是变硬、一丝不苟的意思。软件开发中是指严密、滴水不漏。 ガチガチにしたいのは分かるけどあんまりだ。 想做得滴水不漏可以理解，但是有点太过了吧。 ぐるぐる 原意是“转、卷”的意思，软件开发中特指进程一直转动而毫无进展。 ずっとぐるぐるしてるんだけど…。 虽然图标一直在转… くるくる 重复做某事的意思。 リクエストのたびに処理がくるくる動く。 每次一来请求处理就会反复运行。 倒す（たおす） 原意是扳、打倒的意思，有时指方针倾向。 この件は安全な方に倒したい。 这件事我们还是倾向于选择安全的方案。 渡す（わたす） 原意为转递的意思。软件开发中经常指数据传递，比如参数的传递。 パラメータを渡してプロセスを起動する。 传递参数启动进程。 立てる（たてる） 原意比较多。软件开发中经常指构建服务器。 あいつは家にDNSを立ててる変態だ。 那家伙是个能在家里搭DNS服务器的技术狂。 食べる（たべる） 原意是吃饭的意思。软件开发中有时指导入数据。 ログを監査のために食べさせている。 因为要监视日志，正在导入数据。 食う（くう） 原意是吃饭的意思。 软件开发中指系统或程序对资源的占有。 ちょっとこれメモリ食い過ぎでしょ。 内存吃得有点多啊。 吐く（はく） 原意是吐的意思。 软件开发中指数据生成。 吐かれたログを確認する。 确认一下生成的日志。 舐める（なめる） 原意有舔的意思。 软件开发中经常指走查数据。 そのバッチでは日次でテーブルを舐める 。 那个批处理每天都会把表格的数据走查一遍。 言う（いう） 原意是说的意思。 软件开发中有时指输出信息或者日志。 なんて言って落ちてるの？ 日志里出的什么内容？为啥跑不起来了。 喋る（しゃべる） 原意是说话的意思。 软件开发中，有时指根据协议进行数据的发送接收。 最近のBIOSというかUEFIはIPを喋れるので、直接アップデートがダウンロードできる。 最近的BIOS，或者说UEFI，已经能够发送IP通信，因此可以直接下载更新。 ネゴる（ねごる） 字典里应该是没有这个词，从negotiate（交涉）来的造词，和“握る”一样，事先和其他人商量某事。 先にネゴってきて。 刚才商量好了。 ゴネる（ごねる） 愿意是不满、牢骚等意思，有时指交涉失败妥协的意思。 お金でゴネてサポートを延長してもらった。 技术支持延长用钱摆平了。 ガリガリ（がりがり） 虽然处理比较简单，但是需要写大量代码。 ガリガリ書けばいいだけの話なんだけど、なんだかやる気がでない。 虽然都是些简单的处理只要做就可以，但就是不想做。 カリカリ（かりかり） （主要是性能方面）经过反复打磨的意思。 カリカリにチューニングされたWebシステム。 经过不断打磨调整优化过的WEB系统。 温度感（おんどかん） 对方的态度。 障害らしいけど、温度感どうなの？ 好像是bug，对方怎么说？ そもそも論（そもそもろん） 主要用于讨论的时候，讨论内容本身有可能就是有问题的。 そもそも論として、どうしてこの話してるんだっけ？誰が得するの？ 回到原点，我们为什么在讨论这个话题？对谁有好处？ 壁打ち（かべうち） 原义指对着墙壁练习打球，工作场景中多指用找人倾听的方式整理思路。 叩き台作るまでの壁打ちに付き合ってもらっていいですか？ 能陪我一直把草案做好吗？ プッシュ（ぷっしゅ） 督促。需要对方做的工作一直没有动静，推一下。 あれって忘れられてない？佐藤さんにプッシュしといて。 那个事不是忘了吧？去催一下佐藤。 言った言わない（いったいわない） 对立双方的主张没有记录，不知道谁对谁错。 このまま話したところで言った言わないにしかならないのでもうやめましょう。 这样说下去，也就只有说过没说过，所以不要争论了。 正直ベース（しょうじきべーす） 发现对方比较难于启齿的时候，告诉对方按实际情况说就行。 正直ベースでいいんだけど、間に合いそう？ 实事求是就行，来得及吗？ 運用でカバー（うんようでかばー） 系统难以解决的问题，通过改变运营方式回避问题，系统开发上叫“运用回避”。 開発が間に合わなかったから，当面は運用でカバーして！ 现在开发已经来不及了，暂时用运用来回避一下这个问题！ ネック（ねっく） 瓶颈的意思，是“ボトルネック”的缩略语。主要用在性能或者工作进行过程中的问题点。 結局、何がネックなの？ 到底瓶颈在哪里？ 刺さる（ささる） 产品或提案内容非常符合客户的需求。 そんなの持って行って刺さるの？ 拿着这种东西去提案有啥用吗？ はまる 【释义1】 非常合适的意思。 【例句】 RDBよりもKVSが今回はよくはまる 。 和RDB比较的话，这次选用KVS更合适。 【释义2】 非常着迷的意思，一般写成片假名。 【例句】 最近bot作りにハマっている。 最近热衷于做机器人。 紐づく（ひもづく） 【释义1】 数据和其它数据关联的时候使用。 【例句】 マスタとの紐付きがおかしいんじゃないの。 和master表的关联没问题吗？ 【释义2】 和特定的项目或客户有关联的意思，尤其是在营业的场合较多使用。 【例句】 佐藤さんって今紐付きあるの？ 现在和佐藤先生有业务联系吗？ キックする（きっくする） 英文kick的意思，软件开发中指作业调度器执行一个job或者命令。 25:00にジョブがキックされる。 25:00作业开始执行。 飛ぶ（とぶ） 【释义1】 消息发送的意思，尤其是指警告或者请求。 【例句】 動かした途端にアラートが飛んできた。 刚开始动就来了警告。 【释义2】 数据消失的意思。 【例句】 オンメモリDBだと落ちたら飛んじゃう 。 内存DB的话关机后数据就没了。 掘る（ほる） 原意为挖的意思，软件开发中有时指做成多层文件夹。 エラーログはもう1つディレクトリを掘ってそこに吐かせて。 再做一个子目录，把错误日志输出到新目录里。 丸投げ（まるなげ） 指不管不问把所有的工作都推给他人。 もうダメだ、あいつに丸投げする。 不行了，全都丢给那个家伙去干吧。 コケる（こける） 原意有跌倒、摔倒的意思。软件开发中经常指处理失败。 ログ収集バッチがコケた。 日志收集批处理失败了。 叩く（たたく） 原意为敲、打的意思，软件开发中经常用于人来执行job或命令（区别于用作业调度器执行job或命令）。 とりあえずpsコマンド叩いてみて。 先敲下ps命令看看。 落ちる（おちる） 原意有坠落的意思，软件开发中指服务器或者进程停止，系统异常。一般多指因负荷过重而发生系统异常，或者叫“ダウン”。 Webサーバが落ちた。 Web服务器宕机了。 回す（まわす） 原意比较多，软件开发中是指处理连续执行，尤其是指批处理等定期执行的状态。 2、3日回して、様子をみてみようか。 执行2、3天看看情况吧。 握る（にぎる） 原意为握的意思，也会用在和其他人事先商定某事。 納期ってもう握れてる？ 交付日期已经敲定了吗？ 切る（きる） 【释义1】 做成目录或者是区分资源的使用领域。 【例句】 /26でサブネット切って使うことにしよう。 用/26子网掩码分开使用。 【释义2】 用JIRA或Redmine等项目管理工具发行新的课题（ticket）的意思。日语中经常说的“起票”也是类似的意思。 【例句】 忘れないようにチケットは切っておいて。 不要忘记开个新课题。 這わす（はわす） 原意为爬的意思，在这里指把网线放到地板下面，主要是表达眼睛看不到的状态。 「ここの配線ってどうするの？」 「床下を這わせます。」 “怎么布线？” “从地板下面走。” サクサク 和“ヌルヌル”相似，页面切换的时候动作顺畅。反义词是“もっさり”。 サクサク動いて気持ちいい。 动作顺畅感觉不错。 ヌルヌル 页面切换的时候动作或过程顺畅，反义词是“カクカク”。 思った以上にヌルヌル動くね。 比想象中跑得要顺畅。 ポンチ絵（ぽんちえ） 指资料中的插图，比如系统构成图等。 今回の構成をポンチ絵で入れておいてくれる？ 这次的系统构成能加一张图吗？ マンガ 和“ポンチ絵”一样是指资料中的插图，但是二者不能同时使用。注意不是「まんが」、也不是「漫画」，而是「マンガ」。 今回の構成をマンガで入れておいてくれる？ 这次的系统构成能加一张图吗？ 抜く（ぬく） 原意有拔的意思。软件开发中经常指从数据中抽出一部分，尤其是调查bug的时候经常会被用到。 障害時刻の前後1時間分のログを抜いてきて。 把故障前后一小时的日志抽出来。 こぼす 原意是洒落、溢出的意思。软件开发中指数据遗漏的意思。 設計ミスで毎日1時間分のログを取りこぼしてました。 由于设计错误，每天都有1小时的日志被遗漏。 突合（とつごう） 进行数据比对的意思。 アクセスログとシステムログを突合して時系列を追う。 对比一下访问日志和系统日志，按照时间顺序追踪一下。 投げる（なげる） 原意为扔、投掷的意思。软件开发中也指数据传递，比如测试中投放数据。 集計APIにCSVでデータを投げると集計結果が返ってくるよ。 用CSV格式向统计API投放数据，就能得到统计结果。 イケてない 不好看。 動くとは思うけど、イケてないね。 动倒是能动，就是太难看了。 着火（ちゃっか） 用英语单词Trigger衍生而来的着火，通常被用做名次或动词，用于比喻引发某种行动，时间或者情况的启始点或原因 そこの処理って誰が着火してるの？ 哪个处理是谁出发的？ ボール 形象地把任务比做“球”，在完成需要多人配合的工作时候，就像玩传接球游戏一样，A做好自己负责的部分后传给B，此时就可以说“球在B手里” これって今誰がボール持ってるの？ 这个任务现在谁在做？ 1. プロジェクトのボールを渡す (Purojekuto no booru o watasu)：意为 “将项目的控制权转交给他人”，表示某个人将项目的责任或管理权交给另一个人。 2. ボールを投げる (Booru o nageru)：意为 “传递任务”，表示某人将工作的责任或任务交给另一个人。 3. ボールを拾う (Booru o hirou)：意为 “接过任务”，表示某人接受了被分配给他的工作任务。 这些用法都是将 “ボール” 比喻为工作中的责任或任务，并用于描述在团队协作中责任的转移和接收。","link":"/working-japanese-notes/"},{"title":"自分でやりたいプロジェクト","text":"写一个全平台音乐播放器项目 用ReactNative写一个麻将项目，还有各种卡牌桌游游戏规则可以分享导出 雀魂----从入门到入土（内附日本麻将基础教程） 美食美景记录 地图 使用手册记录app 各种家电说明书，以及游戏规则，组装，可以文字录入，也可拍照，AR识别 学会用wordpress写广告网站 写一个全平台的饭店软件（预约，菜单）可以变成saas 写一个上班可以摸鱼的网页，这个网页可以暂时存储代码，可以上班的时候写自己外包项目的代码 写一个个人的博客，并且可以在其他电脑上登陆和更新博客内容，并新建博客 TODO 做一个自己的音乐播放器，因为我喜欢听歌，要省电，全平台，云同步，方便好用。匹配最新的安卓和苹果，支持热更新 练手，从前后端弄一个ECサート 重新整理一下的我博客，记录开发中遇到的各种问题。 midworks 类似的项目(自由职业者接项目的网站) 并且用rn写一写移动端，从api设计，到部署上线，以及后续的更新 并且支持多语言 技术栈 java spring react vue rn 如何部署到云 如何省钱 是否支持个人展示界面 有哪些值得学习的大型 React 开源项目？推荐10个React开源项目使用 springboot 和 react 开发的博客系统","link":"/todo-project/"},{"title":"日本のIT職記録","text":"外国人として、日本に働いている。 日本職場のルール 外国人よく知らない常識 ビザについて 高度人材介绍 高度人材ポイント制による出入国在留管理上の優遇制度 ポイント評価の仕組みは？ 高度専門職ポイント計算表（高度専門職第１号イ・高度専門職第２号） 只需3年甚至最快1年就能取得日本的永久居留权，以及高度人才签证相较其他工作签证享有多种特殊待遇。 现在的分数，假设工作三年的情况下 75 学历 本科 收入 假设 400 工作年限 3年 年龄 小于30 日语资格 N2 其他资格 假设公司有加成 10 10 未满3年 0 15 10 软考 5 20 70 10 500w 10+5 满3年 0+5 15 n2→n1 10+5 基础情报技术者 5+5 20 90 这个有点难 10 10 15（可以开个高点的） 0 5 15 10 5 5 20 80 这儿 这儿 这儿 三选二 高度人才签证申请条件 要取得高度人才签证，首先要在高度人才积分表取得70分以上的点数。取得70分以上则可在叁年后申请取得永住权，如果80分以上则只需要一年。 但要注意的是，年收入(非过去收入，而是接下来的预估年收)300万日币是个最低门槛，如果低于300万日币，无论在评分表得到多高分数，都不符合高度人才签证的申请条件。 高度人才积分表总共有3种，分别是高度学术研究分野（高度专门职1号イ）、高度专门・技术分野（高度专门职1号ロ）、以及高度经营・管理分野（高度专门职1号ハ）。 这3种不同分野内的项目及其点数略有不同，但可整理出3个共同项目，就是学歷、工作经歷、及年收这3个，除此之外还有一些特别的加分项目，例如毕业于名校或取得日语检定N1、N2的资格等等。所以门槛或许没有想像的这么高。 學歷 高度學術研究 高度專門・技術 高度經營・管理 博士 30 30 碩士 20 20 大學 10 10 (加分)在不同的專業，取得一個以上的博士或碩士 5 5 職歷(工作經驗) 高度學術研究 高度專門・技術 高度經營・管理 10年以上 15 20 7-10年 15 15 5-7年 10 10 3-5年 5 5 年收/年齡 未滿30歲 30～34歲 35～39歲 40歲以上 15分 10分 5分 0分 未滿30歲 30～34歲 35～39歲 40歲以上 1000萬以上 40 40 40 900萬以上 35 35 35 800萬以上 30 30 30 700萬以上 25 25 25 600萬以上 20 20 20 500萬以上 15 15 — 400萬以上 10 — — 高度人才的特別積分(特別加算) 高度學術研究 高度專門・技術 高度經營・管理 研究實績 20~25 15 — 在公司的職階 — — 代表取締役 10分 取締役、執行役 5分 取得日本的國家資格 — 每個5分，最高10分 — 就職於創新政策所支援的機構 10 10 10 就職於R&amp;D費用超過營收3%的中小企業 5 5 5 職務相關的外國資格 5 5 5 於日本的高等教育機構取得學位 10 10 10 通過日本能力測驗N1或畢業於外國大學的日文系 15 15 15 通過日本能力測驗N2或同等學力 10 10 10 從事日本法務大臣認定的尖端成長事業 5 5 5 畢業於法務大臣所公告的世界頂尖大學 10 10 10 完成法務大臣公告的研修 5 5 5 投入超過1億日圓於所經營的事業 — — 5 從事投資運用相關的事業 — 10 10 关于中国软考在日本加分 中国における試験で次に掲げるもの イ 中国工業和信息化部教育与考試中心が実施する試験のうち次に掲げるもの（１） 系統分析師（システム・アナリスト）（２） 信息系統項目管理師（インフォメーション・システム・プロジェクト・マネージャ）（３） 系統架構設計師（システム・アーキテクト）（４） 軟件設計師（ソフトウェア設計エンジニア）（５） 網絡工程師（ネットワーク・エンジニア）（６） 数据庫系統工程師（データベース・システム・エンジニア）（７） 程序員（プログラマ） 典型的な事例 (1)「技術・人文知識・国際業務」の例 ○ 外国の大学の経済学部において経営学を専攻して卒業し、日本のIT 関連企業との契約に基づき月額25万円の報酬を受けて、システムエン ジニアとして売上管理システムの開発業務に従事する者 ○ 日本の大学の工学部において情報処理工学を専攻して卒業し、日本のソ フトウェア会社との契約に基づき月額30万円の報酬を受けて、プログ ラマーとしてソフトウェア開発業務に従事する者 ○ 外国の高校を卒業後、IT告示で定められている海外のITに関する試 験の一つに合格し、日本のIT関連企業との契約に基づき月額20万円 の報酬を受けて、システムエンジニアとしてシステムの保守・改善等の 業務に従事する者 ○ 外国の大学の工学部において工学を専攻して卒業し、日本のソフトウ ェア会社との契約に基づき月額35万円の報酬を受けて、ソフトウェア エンジニアとしてコンピュータ関連サービス業務に従事する者 引っ越し 引っ越しの手続き 転職について 役立つ税務知識 年金関して エンジニア交流会の話題 有空问一下各位开发者们觉得什么软件好用。","link":"/japan-it-working-memo/"},{"title":"面试&amp;自我介绍","text":"f844431ed9d9d0ed4ab18a7fa793fdb2b1b33fe50eb4593869a48095f52477ccd707a42207d8955fe5df99dd915f586a49aa7eb491634653d47bd32d8c710fada74eebb4d8fad1bccb5b5cb6fad79481c1df704d79dfe92b5f95a40ea898b652aeab058b68956e9566367ac4e58d52f4bb331f6194db1f816199052ab20307a4a788e9ce1d780246806aa1b732cdbd86e9897e68abdb70f1025c4caa455ff9fefbdb7b41c28bd15e300230b1e880b1f11dfa6d025c126178bc0a6df8aed895d6d0330d4c16fae85ea285252bf2734982fb9b65c499a267a42668d6aa0f652239acd42a3e1a621fc847ac9411ac7c4c48fe60cc9da685ddd55a0683eb009adae220b0fd2f110994a5256208c019d2220ba011197c7a1a4636d0045e454eba93cfa20a869e0b1983c47195196454ee4bb6c1f9fc79b25a84dbc155a3910422fa7d5854bdd432098145ae747aaf1eddb2a63aef5eb946ad3e872d123a4d5677d11e96c0ee9e809e90a7fdff74040a7fca79ae43202ceeee5e09bdcec5739aa5d7bc07598c038034f8cd06a0e2feef0e97b7b0dff74193e7b0a442be7ffe10bcf2770dd1b67a9b9128a71ffa34ef820abf19db14166837512c3b7f13331170718ec7a762842ec26b7e662535486a23373e7da6163c0f6c7930b9a67fa0a3f2a33606b1f49df00362ab359a10151c83b43754abebfe5712d1cff034036bad422935416a95de5142d9367faf8766c4bca88ac1717ebcb0ff96c65865b6cf59382f289407ee04e2ad3fd2e8cc585b12f1cf83e7f5c2d9241e488e15a9c8a64dc36cff9142f0243d311a795bc57bf3ddaf77f7674aa7c7a7b9fd66a57854f721a07aa100e9bbf469baca8ae9e43c768cd4161104beb47c5784669d2acdd5a0a0c2189e24acbb832c0884f0ff26ac919abcfffd63c67e2f3d760cefa9eaee174729cbd910086955caa97fdbb625cab1b0d699dc24919f25656739e24064646f74f20a91a3e3267d1a4aaa465c155fb77ab08a1124c49f28c4139c073c3a1393ee17108087f10cb4ec0f67a9b789a00c89a4aaf7f95c08243f8db031369d88808da2769a7a4ac5e3c800f0ebb84dd249274ab16c36fdf6110b750b03a966ca54f8e4136dccb9e1dc81ad27d33c815ed234e94ffaae62ab41f091ba841f3becc92adc6070cbaf357721f948699f83a3f59f72f84563587c94385be36bc0aae9c54624bc3774ff9e439eac94e905a3efb89aac829d4acce68273b868f6e09e2569aace09ac9a6df32c3c3dbeeee81bc6691e67f475ad33ff79ca5d18767648cc4630b93b4b4e01773abf47761f9bb6d0b59b631a36373b0e228449a30c461abad96f7783f1299f6ba3529ce8a6cb365d05d030e8a2186218691d93950c8c8747763ec131e7dec83d358f9a8cca2a3f20ccc4537bc21e3ed985fd44cf170335b66b6814842e5ceee30124bd92530d25918b750bcfbbc4e53bd480ef54a6a6032397249db917e293ce0436a360e353a64c204d40cd63e74b408fbc8ee896957479808b9ddaf90b41e845af854173ea7d703e9e796d6c45bc13a98f67df14bcf5b12490348b228ce21f29f037ec8ce5883694b0c34a3de2a13666596e0eeedf93ec9f33343697b702d29f184b8b2929bb8aa457b6e9062bd096274fa7c5266a3f0d6652d3ee1da075de9363d673633978f68d9315080f24486934cd213004fb61b837ae82ad3219e2f38822e8f5e35216ff6b9e9cad1bbbc24a6f952bafded083399e55a66d4e70ac70dd38acb24ab589b53dbc97982951c6b79b3ca92b24065912d4d1d3dfd420deb13bb3117e74c8479ca0624dcb154ac1a63b6d5283ebfef557fa9d5489f3643259caf4ca4811d8d1c5195cfc12c7a9608bd7887891325465b90d878906fa80f0a169abcabff7de5f5c17653374e9c4006aa35766ac5ffb5da61a14bc6310e97d0ab4510ca40be0df7d7c17b39cfc4e615a8e0f151c7f0a8d6ba3e92dea724a2efaeb017c7636f5e5011e456f8f2294ddb3d9ba2bd5289609651af847fdeee6c6e4a55a510ce7605089d90ecf8764ab0bf842f20312444643b7bb095895604451fd6b1167787814c4db3a5b85bc30ba7794596192aca9fc0289f5a4e35decede6553c01e0970e930b1ca589bcaf04470bd94cc970c42a8563ebb475db6dca566ecf91164392042117d5147a74c4a4c9a1035fb6b85c560053c2de1d33ecffe9c79eab83d95b036b69723d9111a18b6e6ac5f3bdb90b857820aeb89ad85e35dc0b844a993f230eb09e455ebb527641e01b90c474586fc7ab56557c69da8039d43716f294bd30ef2f3b4d7b4561e0a13e81d43c2d509ae4955dd3ab905f924726d69a620e078aedf3c00e0529e57f4acae376308620a3a5572c75585604ae4f880bd0270938772246b098e152328ed8ff50cda64454ce70ae727a6d5c6a8a1d03cceb062cdac362c312454f721e195184b07c54c184c8ea9a47c4414e163caaf1c88329ecc8f7a66188c680200e2d8ec500e4858e0c120bb8ba075ae5ba795b225769415107658afa676047f9cd133cd9c4fd3865c09e21ca4ee6bfd6e2d8cd102aa52d07b7d02845f2e6d7482220f528a65ad72befd2d7a534c7bc267643838befecb1495df06ed3d9fdf4ff2baeb1866f52ea2f1050af3ae288b06b4f7a1cb40e1c29d3f702a3d5d19fdbb958e28af4253431d11c14abb07eea3a28a5952951a8ef8d0083a7dfeccbdb69c9ce8416e29a68b0485dc144e291d92809c88a13a45890ebdaf3bca0af3f08fa7d06d27aa28f8b1ca3fbbf3db66027b3b026359d297665a6e08ad3539d9cb9d87806660dcd5b6d5f782bfdfcf02742f557db7d6e6b1df735820b0f3916fb45711a15c2f43ccf882f48974a42a60b2fe231124aabe5bfcafeae81268738a144f158a037dd41631da314a85c4ee032a1cef107c9bcc1c754b65a43d547aa795aff6570755da104d1a7223ccabfa0186c89ae928fa858192fc6d18ac4e7309febe188c08a03c18d31944550a4fe3ff44ab2915d99ca32bb6f5852460c08f686d03df18df696764617ea673122745d0389ce72ef0582c92db5b5b5dedb2e48459084879b7be8ae490f0db7cb6106873e94e7a0147ce22f89eaf33446dd86642c63136162298a80bad343efd92a2cce492c4f47fe49ed4d365b8c941be92d6a2cefe8620aa7c3af0b8a06ccdb9e88620b8a3e766abe246064f8ffef5292fae8ce9325819f92803657594ba2b2eeb2f300fa15e99c455a2eb38a99764fa4267216713d8e35b738219572c5a1b46a62207b162710223b329b64b4635d2c2d096176af9ceaf1006d24ecb739f5b2e91a454ecd348ccc98e863fd3c5519afd66fe67d037db36eee8214a9c7a34484f8f0f49bcf3ea3c0ce8145b0d5b0b3b16395118ef112b72993d88f7dd1ae8e10ab07ec5f61d74028b4ef18d0afbde49a90fa75a8248beadc8ece2298cecbfd892a57cd485615332a94bf6353c1b5554ebfff986b4c034441ae07c1259385f03c3fe5649f5a9b15c9b384a6a6de4ea4b55ec1af8612f9cec12c32f62c038f6b1f7108f4c28808f06233ca9d422dbbaf015e83075061fb6c053dd06498c5ff341570dd78b3f8009dec479389934e45706344e0281ced80ac4b4a019600b297f78e0267acdaff63875f6e0119fea67143c36d4ef58cf8dc2351d61dd8f319fad4ba15c9cf50d767ddc20c43d0af65b0bc184e3e3c1754b991314960b88576f36407499f1e16193829006a54c83e51129587ea61be0660b40fd53e824599a049a7d84678bbfe98a6f0f92fefca4d1c46584b552363d81edd7f7d7cbc340e67c91323ce5c9899f094d2d95ec311642278447700480b3e5794a864c268ae712ab97996eeb081be02305ef94be7f851cb2bcf64d17f993596f29154720b05ac21d17686885c754a41df447d4643f9081fa91d962436929408c491569876fd1eaddb3db391a35d47c4b712342da5feca5fa23b0e0b17dd83750d63326eb1bb11b6d34788341513cbd06740453d8fc6e7c10e01a3f90de5d1549fb683b5156c2b243b21daab1af3080054c052bf9ec3bf16bd6d5af157b83e79722d2b6f4e58fc3faa3a3c218692871025796220bc0cd0a2470571fc887ea9a87b77c296332fb20731e317726f22d0ea488bf483ad258f79b332232fd634cb4715cefa6b7e91c4fba40806a4f8a633ef101d77eb70100aca6e39bd17d13899c70802b5a854a420afcc03f0cc059029d7559f55c2c87cb17cf57d88c9d25a41d3c4b48c9898e48c090d5f075519861b6946c843fde9e51153ba2c4e9d07ebb4b373759f36e3db3ea9829e4cda4630b000195a2c0a9496651bc513c8ecc63e5903b8f230a425b7602fd59537307dd162b3ab6df42df21c0481de5083a73989835dd055e83fb91d159e1d091be11354498b671b3d3da68b4f06e9870e49e823af814f0dc78db3a83b5e3b8a9b1c9dc362645f3bf48eecdf6702aa893609cee8f1b0f38cce1fe062a12d4162e57491cba899b6584f1d32b08f48c3a3bc6b77e53bd09e6c1fca5b852d50f414e7544c455a45a3b5a6c89b0d1d79999093b0a798d03c86aee83ad90f6d9e43d3f0eb7a0adaaccc8d367e12b07de163672812cc6759fa5a9faeedd24ba9a893092cc131ae8c22066caa05d7b37db4b649bfdd614005a5f4be03ccb68ef12e86f8bfee535e1f67c24a420f47d9c541142cbb34a12407e30ba0b89f06206040666475d9810c168168bf05273cd4df2aa273991d5467182cee303ea4ace11fb1d68a50ddf654d1dc85bc7290dbb7af2417d6552edf9e89fb0ede8eac028ba54e9b4c2c1f1aec5b13f8f49d65b04eedd179dc028e9b847824581466a495f09d09eeedf084f3c5544e6da9204bac856ff12c6312a224b17adf0b97677a7a2704228ab9e68b57971a0076490bfcc2ff4940b7bb0b4210505d4d8d948106f2f519adbd2459dfae44840151b2178a694763f68d55a7cc9fb4303a3ed265d42d9412f089cf531b68b06d1cddeb4f7fdcaaa84720c81bad9f2f8d1ed6362c93587da64e77d27c5df563d41ea4b9e95ce6dca60bb1ea4ffe8b8ddc478a041fc2649741b80df896e7b84154588bf1805292b920d6f71c667f4c8f58feb880ecb5325c37ca31ae0323035163a6edeece23f60f5c1b4f3dc891f35c2f2f9b1e725d9ab51f1ad646f7f5f7745c04f4155eb2b7efb9565eb7fcceea8c14252f2d84039d370d400261ea02d877b1e23f033d6b96e33b693d6b83c5cd21a426004433771a29aed0f9cb9f711d699541e5cbe768a4d4ce1509322e2d750cf571ad0984aba21deb6454d2ff37da5f2eb256bb984fc69811bb04e6be6b234a4a8f7497ba2d8b9dfbc170988dd87895d937f9e6f8baa7f53d9c98d2e7e3243dc0670b77ad20ef0a31b26c378ce1329b1bb78d7bb64fb87bbb07127fa05f0f08af398a6e8084961d73757726a06620904dd274686395f713f119b6dd5a806c5d11ffdc37b955f818dd2edc8001eaf509fd3d459d1edd7f0fd915232b1a50f37b5e61f9cb5a509594ba0e9a28d4fd744d84ff39754a36bacda46b03c0a6242ce4e4376b9e7f7cb4ed2b34501b1eb493799f35ce8f88f84be09ef4912b02c90c52bb49f14272163085a23fd2020455b65d1f1584cd25ee457c701435bbb23d2532ef0aa80953b9b719e0e5e2971c393bf2364fe8a047acf713e2339cb9e12a2e34eab61b4a5155706112224410964a4c93a4d220b095efe49d29389b33ae15f5139df48536ad58ad4956a0c0eb3439f24850cfbfb85dc1f11999aa4d4cf9b2995e4556698749fc48331df2b34f8031cf78a187065286c10a75c72d296ce4c8aec775d8ce76101710b2c695aa90afe4dd4eaefc9fdb6aaf24438fe952b0560e38f2e3c52135958141b2b4e8ec1de10e31fbdc9bfcd9da35ba9eb6e0f8c14d7d6197ecf6c7d57ba1d2f39d5565f374cf08fb81ebed200d1a36e83403013b2f7321d5fb0eb04203d4c39388e53d624a6621a8096dbd27b8a913ca2ec1b65eeabd131bd573652438eb999cf94e7260844fe4334ee161590511a497673255f2398b33f164d115eaac24176e8196a8f6f88f801f1749cba7b6bad28c9ee8fa175741543aacc943a01e3fba14fe52bad5f2f03fb6c26828092fa29f057682d5c52ab4ccf3099b7d67df6dddd9271a2b505be6ff52806b9c3f62bb2ab5c4e1db891c79398186076bd8373fbc07ba25fcaf392feaa66b35e144de2cc6e5bee5f7f386acd12e659df6d3e4fb498ead888e66644dd0566583d06e61b009cc756564fd1609e00ff6c16cd42d26a73e6305b0a320fde5e24808e5a230739a218067454090907b54d51136cffc403db9f75d7e083e6a9b6b7ae209048dc0f2071994580353b452262d07a685ed49fa388ef820d843fd439986a606dac97fc7dd46b4e535b5079988f629b630ef4efb9c640f9e06733a657a43623e7d0039c40a13c89ed40a18509dae55f9a6b3c544901d751213ec13f45a02bb982392a5005e21fa198571dd73aeb3fef71171efe7a8a65ea4a2a493c1f502cd3fd2a913793e2a3070f2295af48725ae54547e42167ca948e31bb8c43b78679e37fd26485401a4fb7bd8a236ffaa40608537cc723dc3534a2d5277fe7c482bc081d3d48effc54b90920ec9ced3fc76527f0b4fbfe1c547311f3dfb5aa9fb7ad50bfe231f402cd6cfb17d189c8627c31ad280f7d1d8206a9e211244db813aa970222d3df7b87fa21885e9e37bfb0766565667ae2c3bcd302ed13925045fe2cdcec21fee2a0a93ee643088a3dde61e1c08a13a684cb41830bde0be7ade60f2834a3406b42b1c2013bf9ca2ee0d78e701173fe8ff6bdb9e989e9769a3ca61f08fc9ed37302f62d5ed2eaf8cd93a355f89ab8aace35c94f53c1158681ead56cf8701142150a0a84ca974e648267c4a4cfebe1f69648f79eccbbdc7a3a0bc28b3e0d1329bedccc992ded76afeb1412c234139be4c9ad1d600b53e024dbc4e6d1d5f532426444b758b560e2f06124d17f156239448cf77758a73f913de54da7dc769fb21b4c900f82f665103d24f3f252b8145faf11077f62a245e43172fc46dcbe70d61b4872693d744a35c0e19a3fecd775b4254da230294e69fbbfa832d99bbfa3a0e36e675b0f0383cf2c35bb656e463154038441e72b86f038ebaf1ea598fdce4a4cacb786ac3e923216e0f7aa8169ec04cde7d0760e996c315e48cdf9cd84e5ff586fc9f73d09f817225f69d43adc7a4bbf8804d1f51ea6a2ff5b04f9f950fc5641dc2f784294d0af586542923a96a7a39e89c557d94374d10e66725e44c770bf862028160cd91f4c2393869fc0b7a4e8808f3fa752fbf8275a526ef0a6b1ff174e132ae759b4f4b803634dc6d0f9f4dde9b963bd9ef919a688ad54315faa7a5d2908c91dc9cb7dbfb9bb3914e9779a08f4bf85160ba8900b3dfced1c213fc6200dc620021e5e734742fbb65dbc2bb5be6d0d07861c0ea1e71f75a67de4e7bdd450688834af6cac060acaf33f85a8ec432e0fd707e5e1273b161bd6e0ef3bdb3e1d18a22b22b24211b338c7bc0366a543d8322a27e1f01007ba85fad9bd42b12e976dd9fea3b1a1e052b22e4ff7e3c2a059f183869a9944eadb64fe4f5938cdf6340a02ef873636c3d42d7b1e8b90d899dd8d490a496a946bbf38ec7a90496b895e286b614cdc5f4eee54c5c78019a5662f972e8c9fd5d916f521af60874d97473688003d5b1d71d48d2ac4a694ae8b935de7416733d6a264657e37ebe7a75793400a149dfc7ba495aa34229488f39d877e74ad0efdb7ef7a9163ce55e6629ad5067b7a21f14501a21e5d87698641b9232aa49fae7f7a739f91bdfe1492b9d5028bac657d2a5b8f900c077665d09ee34e5b54a35d94bffe814c100ca1387af5e20520e25c3394b9d52bc534494aababdac9ac0e8e18ce04afc5842e74e29dbb1ab17a2405efef38bd1aef137f994d0e61b29b763bc8a18609b2aecc12c7489160b4bc5c0352442149aa133a818d6274d3cc47c8fc53deefbba8fcf46dfcd69a5bf3a14f3da9c3c77333455ea44d9cb2fd2d7faa6311f0b97d326a29c298487f885aaa36e9ad028e99f0afbaf52ac9f353e80cca74d99 こんにちは、ここではパスワードが必要です。","link":"/interview-and-self-introduction/"},{"title":"WBS作り方","text":"本記事について","link":"/WBS%E4%BD%9C%E3%82%8A%E6%96%B9/"},{"title":"お客さん打ち合わせ","text":"この記事について はじめに 本記事について 事前準備 要件説明 進捗確認 トラブル発生 顧客との打ち合わせが上手い人がやっていること クライアントと対面で打ち合わせする時に知っておきたいビジネスマナー 【人前で話すことが苦手】顧客との打ち合わせで緊張を軽くする方法","link":"/%E3%81%8A%E5%AE%A2%E3%81%95%E3%82%93%E6%89%93%E3%81%A1%E5%90%88%E3%82%8F%E3%81%9B/"},{"title":"エンジニア職種と契約種類の紹介","text":"本記事について フリーランスエンジニアとの業務委託契約書の種類とテンプレート、書き方や印紙税などを解説 SESエンジニアとは？業務内容や必要なスキル、契約形態までわかりやすく解説 SES案件とは？企業のメリットやSES案件で起用できる職種例を紹介 エンジニアの仕事内容をわかりやすく解説！ 15職種と適性も紹介 ITエンジニアはどんな種類がある？仕事内容、年収、適性を解説 請負SEの種類や仕事内容・単価を徹底解説！請負SEの納品物に求められるものは？フリーランスの請負契約での注意点も確認 SESとはどのような仕事？主な職務内容とキャリアパスを解説 SESエンジニアの業務内容・契約形態 SESとは？SES企業で働くエンジニアの仕事内容やメリット・デメリットを解説 SIerとSESの違いを紹介！契約形態や必要スキルなど比較して解説 IT・エンジニアってどんな仕事？IT系エンジニアの職種紹介・適性について解説！ ITエンジニアとは？種類や仕事内容、スキル、キャリア検討のポイントについても解説 エンジニアとは？全19職種の仕事内容と必須スキル・言語を解説！年収アップのコツもわかる","link":"/%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E8%81%B7%E7%A8%AE%E3%81%A8%E5%A5%91%E7%B4%84%E7%A8%AE%E9%A1%9E%E3%81%AE%E7%B4%B9%E4%BB%8B/"},{"title":"プロジェクト成功する方法","text":"本記事について","link":"/%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%88%90%E5%8A%9F%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/"},{"title":"プロジェクトマネジメントの仕事割り振り方法","text":"本記事について","link":"/%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AE%E4%BB%95%E4%BA%8B%E5%89%B2%E3%82%8A%E6%8C%AF%E3%82%8A%E6%96%B9%E6%B3%95/"},{"title":"議事録作り方","text":"本記事について","link":"/%E8%AD%B0%E4%BA%8B%E9%8C%B2%E4%BD%9C%E3%82%8A%E6%96%B9/"},{"title":"全体像を把握する方法","text":"本記事について 全体像把握の書き方 全体像を把握することが苦手な人のその克服法とは？","link":"/%E5%85%A8%E4%BD%93%E5%83%8F%E3%82%92%E6%8A%8A%E6%8F%A1%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/"},{"title":"【要約】ジェームズ・クリアー式 複利で伸びる１つの習慣【ジェームズ・クリアー】","text":"書籍について 停滞期 ブヨブヨ 確かに、何も言えない 結局のどころ人生なんて毎日１％改善し続ける「習慣」を持っている稼働かで差が。ついて","link":"/%E3%80%90%E8%A6%81%E7%B4%84%E3%80%91%E3%82%B8%E3%82%A7%E3%83%BC%E3%83%A0%E3%82%BA%E3%83%BB%E3%82%AF%E3%83%AA%E3%82%A2%E3%83%BC%E5%BC%8F%20%E8%A4%87%E5%88%A9%E3%81%A7%E4%BC%B8%E3%81%B3%E3%82%8B%EF%BC%91%E3%81%A4%E3%81%AE%E7%BF%92%E6%85%A3%E3%80%90%E3%82%B8%E3%82%A7%E3%83%BC%E3%83%A0%E3%82%BA%E3%83%BB%E3%82%AF%E3%83%AA%E3%82%A2%E3%83%BC%E3%80%91/"},{"title":"【エンジニアが知らないとヤバイ】SESの客席面談で受かるポイント","text":"本記事について はじめに https://www.youtube.com/watch?v=cJZp7X5RrrQ&amp;list=PLa5ZI4eFGQoIz0Ok2VzRY-wvXeyfq5Quo&amp;index=49 こんにちは ITPエンジニアチャンネルの白川です、津さです。 今回はSESで働くエンジニアにとって避けては通れない、客先面談の通過率を上げるポイントについてお伝えしていければと思います。 今回はですね、実際に私が経営してるIT企業でですね、営業やってる津沢という方に来てもらってるんですけれども。 実際に自社のエンジニアが客席面談をする前にですね、面談の練習とかを実際にするんですけれども、そこでどういったことをお伝えしている、どういうアドバイスをしているか。 そういった現場のリアルをですね、しっかりと お伝えできればと思いますので是非最後までご覧いただければなと思います 最初に津さんじゃ簡単に自己紹介をお 願いしますで今私はSESの会社でま営業 を行っておりまして担当している エンジニアのま面談対策であったりとかま 実際に面談の同席も行っていますまた 人材業界に3年以上在籍しておりまして、エンジニアの方の就職支援とかも行って おりまして普段からまエンジニアの方と あとは企業側の方ま双方とやり取りをし ながらま案件の決定であだったりとか就職 先の決定のサポートというところを行って おりますなので今回はその経験を元にお話 をさせていただけたらなと思っています はいありがとうございますじゃよろしくお 願いし ますじゃあまずはあの客先面談っていうの はどういうところか分からない方もしかし てらいるかもしれないので簡単に客先面談 についてお話ししていただいてもいい でしょうか客先面談というのは働く先で ある現場の方お客さんとの面談をすること をさします面談はエンジニアを探している 現場の方であったりとかお客さんとあとは 三角する案を探しているエンジニアの方の マッチングの場みたいな形ですお客さん側 としてはエンジニアに求めるまスキルで あったりとか現場の雰囲気に合ってるお 人柄かなだったりとかそういったところを 確認していてまエンジニアの方もこれから 入っていくかもしれない案件でどんな スキルがつけられるのかなだったりとか どんな環境で働けるのかなっていった ところをま確認するばそんな形でイメージ していただけると分かりやすいかなと思い ますもう少し詳しく客先面談の内容だっ たりとかっていうのを知りたい方はこちら の動画で詳しく解説してますので是非 こちらの動画を参考にご覧いただければと 思いますではですね実際に客先面談をする 上でどういうところがポイントになるのか だったりとかっていうところをですね実際 に弊社の営業はですねお客さんと面談を するエンジニアにですねアドバイスだっ たりとか対策ってことを結構やってたりし てますのでどういったポイントを伝えてる のかだったりとかっていうのを実際にです ねお伝えできればなと思いますのでじゃ 実際津サさんあのどういったことをこう エジナの方にポイントして伝えてるか みたいな簡単に教えてもらったもいいん ですかポイントていうのはまいくつか ございます今日はちょっと絞って2つお 伝えしたいなと思思います正直この2つ さえ抑えていれば面談している方からの 評価も上がって面談の通過率が上がること 間違いなしかなと思います1つ目は広角を 上げて話すことですほうえそんな簡単な ことてもしかして思われましたまそうです ねなんか結構当たり前なことかなと思い ましたけど実はこの面談においてこの基本 が1番大事になります現場の方というのは まゆくゆく一緒に働くかもしれない人です なで相手は一緒に働きたい人かどうかと いう目線で面談を行っていますなのでま 印象がとても大事な要素になるといところ なんですよねでは私が一度実践してみます ので実践素晴らしいですぜひはいはいもし ちょっとよかったら皆さんも面談を行う側 の立場になって見ていただけたらなと思い ますサと申します本日はよろしくお願いし ます続いて広角を上げて同じ挨拶をしてみ ますね津サと申します本日はよろしくお 願いし ますさていかがでしたでしょうか定側とし てはちょっと表情ちょっと見えなかったん ですけどまあのハキハキ聞こえやすいなっ ていうのはすごく思いましたねま私が意識 したこととしてはままず広角だけま一旦 あげようかっていうところ意識したんです けどま広角あげて話すとま笑顔にな るっていうところももちろんそうですしま 言っていただいたようにま自然とハキハキ とした聞き取りやすい声にまなりやすいか なというところがあります笑顔でお話し することであったりとかえっとハキハキお 話しすることって結構高印象に繋がり やすいなというところがありましてそれ こそ勝手に相手がなんか前向きに仕事 頑張ってくれそうだなだったりとかなんか 困ったことがあっても自分から相談して くれそうだなとかなんかそういった形で 前向きに捉えていただけるということが 多くなりますなので皆さんも騙されたと 思ってよかったら試してみてくださいもし なんか広角上げること難しいなって思う方 いらっしゃるかもしれないんですけど俺は もう鏡の前で無理やり広角をあげて練習し ていただくこちらは意識していただければ なと思います練習をすると意外とスムーズ にできるようになってもしますよ実際に 弊社のエンジニアとのこう面談の練習とか もそういう広角上げて話すみたいな練習を 何回かこうするみたいな感じをやってる みたいな感じますかあそうですね実際に あのエンジニアの方と面談練習をする時も この効果を上げて話すことができるか みたいなところは何度もはい練習すること も結構ありますねま確かに私も結構面接 するっていう側でいろんな方と コミュニケーション取ること多いんです けどま笑顔っていうのもあると思うんです けど効果が上がってるかどうかってなんか その人の印象って結構変わるなって思うの で言うて30分とか1時間の時間しかない 中での印象になってしまうので広角上げた 話は確かにめちゃくちゃ重要なポイントか もしれないです ねじゃあ2つ目はえ結論から話すことです よく話長いよなって思う人とかなんか だらだら続く長い話とか聞いていたらま いつ終わるのかなみたいな感じで正直眠く なってきませんかなりますねですよね ましてやま面談相手は普段現場であの 忙しく仕事をしている方になりますなので 限られた時間の中でしっかりアピールする いうことが重要になりますそのために大事 なのはとにかく結論からしっかり話すと いうことになりますよく結論から話すって いう風に言われてるとは思うんですがこれ が具体的にまどういうことなのかっていう ところをお伝えしたいなと思います特にま 面談の中でエンジニアの方が話す場面って いうのは大きく2つあるかなと思いますの でま場面ごとにポイントをお伝えしたいな と思い ます1つ目はスキルシートの説明です メナーの際に必ず使うものがあるんです けどそれがスキルシートというものです エンジニアの方のまこれまでの経験であっ たりとか持ってるスキルを記載しているま 職務経歴書に近いようなものですねこれに 基づいてまお話をするような流れがあり ます面談の中で面談をする方現場の方から ままるまるさんのこれまでのご経験を スキルシートに基づいてご説明して くださいという風に求められるような形 ですまずはその際の伝え方のポイントをお 伝えしますここで考えるポイントというの が言で言うならと考えてみることかなと 思います一言でやった後にその後に伝え たいこととかアピールポイントとかを詳細 説明でえ補足してあげるこの伝え方に公文 を変えてあげるとすごく聞き取りやすい 文章に変わります例を上げてやってみたい と思いますまずちょっとダラダラ話して しまうなという方私はこのプロジェクトに 参画させていただいてお客さん先で働いて いるんですけど銀行の案件になっていて 最初はテスト工程から入りましたまテスト を沸かされれていてうちに像合ちょっとる ことができるようになってでこから ちょっと像を3ぐらいされなりました時に をしていきたいないうに思ったのでま ちょっとっていいてが入ることできなて ちょっと確認でちょっとでるようになって たかなというとこですというのがパターン 1になります正直これ聞いてても何言っ てるか分からなくないですかもう私は喋っ ていながらもこれ聞いてたら絶対ルする だろうなと正直思ってしまいましたでは パターンに行きます私は3年間の エンジニアとしての経験がございます言語 はJavaで主にWeb系のシステムの 開発を行っております基本設計から参画し たことがあり詳細設計から製造テスト工程 は12章で対応が可能です基本設計は 分からないことは調べたり聞きながら進め ているような形になります今パターンに やらせていただいたんですけど内容として は同じ内容をパターン1とお伝えさせて いただきましたただ多分2の方が聞き取り やすかったんじゃないかなと思います ポイントとしてはまずは大枠ですね結論 どんなエンジニアなのかてっていうところ を話した上でじゃ次は工程を話すた言語を 話すた何なら1人で対応が可能なのか概要 を話すたまそういった形で区切って話を 進めていくことで相手が聞き取りやすい 文章に変えられるんじゃないかなと思い ますま確かに今の聞いて1つ目は非常に ひどいなと思いましたが確かに私も面接だ とちょっと伝える能力が弱いのかなとか 準備してないのかなって結構思ってしまう ので確かに校舎の伝え方ままるで区切ると かもそうですよねなんでそういうところ でん結構話すと確かにすごく聞き手として は聞きやすくその人の情報が直で入って くるのですごくいいんじゃないかなと思い ます今の放者の方で伝えてた時にま結論 から話しましょうってのあると思うんです けどその中でよりもとこういうことを 組み込むと客先メンダーの通過率が上がる よとかこういう部分を入れてくといいよ みたいなそういったポイントってあったり するんですかそうですねそこももちろん あります結論から話すプラスその内容も もちろん大事になりますよねその内容で 大事になるのはアピールポイントを明確に しておくことです具体的には自分自身が 持っている強みもありますしあは現場で 求められていそうだなと思うスキルとか 経験とかそういったところまこの大きく2 つがアピールポイントになりやすいなと いう風に思います例えば現場ではこういう 人を求めてますよだったりこういう プロジェクトの進め方だからこういう経験 をしてる人がいいですよそこてあると思う んですよそこを案件概要を聞いた上で自分 自身も生かせる部分があればそこを特に 尖らせてお話をしていただくここがえっと すごく大事になるかなと思います ありがとうございますま確かにそうですね なんかその人のストロングポイントみたい なのが明確に一言で分かるとかま面接でも 結構すごく重要な部分だなと思っていて変 な話面接で毎日5人とか6人とか面接する こともありますし書類ベースで言うと10 件20件30件大きい会社だと100件 近くの書類先行やってる会社とかも全然 あると思うんですよそのなった時にその 書類とかを見たりとか面接し終わった時に 書類を見返した時とか振り返った時にあの 人どんなエンジニアだったっけっていう風 に思い返した時にあこういう人ねっていう こういう人をちゃんと思ってもらえるか どうかってめちゃくちゃ重要だったりする んですよ面接の場合なので客先面談でも 多分同じことが言えるなと思っててあ JAV3でやってて基本設計から1人称で やっていてすごく明るかった人ねていう 印象を残すのかどんな人だっけとりあえず なんかエンジニア3年ぐらいあった人だな なんかどこの工程できたっけなんだっけ みたいな感じの印象で終わっちゃうのかに よって思い返した時に印象が違うだけで その後の通過率とも変わると思うのでそう いうストロングポイント何なんだっけって いうところを自分の中で落とし込むっての はすごく重要かなと思いますのでそういう ところも確かに意識してもらえといいん じゃないかなと思い ます2つ目は質疑応答です面談の中で スキルシートの説明をしていただいた後 必ずま現場の方とお客さんから質問が入り ますまるまるの経験ありますかとか まるまるはできますかといったところです ねなのでこの回答の仕方のポイントもお 伝えしたいなと思いますこの場合の回答 方法はもう分かりますよねまずは経験が あります経験はございませんの結論からお 話しするようにしましょう結論を話した上 でどのような経験をしたのかなど具体的な 補足をしてあげるといいですねでは具体的 に補足の内容になるんですが経験がある 場合は先ほどお伝えしたように具体的に スキルシートのどの案件でどういったこと をやったのかいうところを具体的に伝え られればOKです経験がない場合あ落とさ れちゃうんじゃないかなと不安になるかも しれないんですがここはマイナスに考え なくて大丈夫です大事なのは経験がない からと言って一言で終わらせないことです 相手に経験はないけどこの方なら頑張って くれそうだなできるようになりそうだなと 思わせることをゴールに考えてみて ください経験はないとお伝えした後に補足 で自己学習をしている胸であったりとかま 近しい経験があればそれを生かして頑張っ ていきたいであったりとか三角後も自分 自身でキャッチアップをして頑張っていく よという思いをしっかり伝えてあげ ましょうありがとうございますそうですね これも皆さんも分かる通りだと思います 確かにやってないとね不安になると思うん ですけどやってませんだけで終わるともう 本当にお話にならないので必ずそっから 補足説明としてこういうことを学んでいき たいと思ってますっていうこの向上心を 伝えるだったりとか別の経験でこういう ことをやってますやってるから大丈夫です だったりとかま何かしらちゃんと補足を しっかり伝えていくことが結構重要かなと 思いますのでそういったことやって いただけるといいんじゃないかなと思い ますじゃすいません今日はありがとう ございましたありがとうございますはい 以上でですね今回の客先メンダでの ポイントをお伝えさせていただきました 少しでも参考になった方は是非チャンネル 登録高評価をよろしくお願いします最後 までご視聴いただきありがとうございまし た現在ESではエンジニアの労働環境の 改善やケレに不満がある方をサポートする 授業をしています今より少しでも年収を 上げたい年収さてをしてほしい今よりいい 会社に転職したいそう思ってる方は是非 こちらのLINEを登録いただき私に気軽 にご相談 ください [音楽] H","link":"/%E3%80%90%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%8C%E7%9F%A5%E3%82%89%E3%81%AA%E3%81%84%E3%81%A8%E3%83%A4%E3%83%90%E3%82%A4%E3%80%91SES%E3%81%AE%E5%AE%A2%E5%B8%AD%E9%9D%A2%E8%AB%87%E3%81%A7%E5%8F%97%E3%81%8B%E3%82%8B%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88/"},{"title":"【即合格】未経験エンジニアを現役CTOがガチ面談してみた","text":"本記事について はじめに はじめてのプログラミングちゃんねる by ぽてパーン ああああああ今回はですね エンジニア転職を検討している方に対して 企業の採用担当者の方に感じで面接をして いただくという企画になっておりますいや 多分あの私が一番緊張すると思うんです けどあの心の中で応援しながらどんな面接 を実際しているのか見ていきたいなと思い ます はいということで早速なんですけれども 採用担当者の方を紹介したいと思います お願いします 株式会社コッペパンデー ct を押して いる浦上と申します 普段は自分自身で開発もしますけど 開発メンバーマネジメントもしていて それに加えてエンジニアの採用業務を指定 今日は楽しみになってきました お願いしますはい続きまして今回の面接に 挑んでいただくゲストの方を紹介したいと 思いますお願いしますはい 願いします知らなかって最中と申します 現在で28歳でございます 前職全然色では新うん社員として人材の 派遣営業の仕事をしており前職では海外 拠点の方で it 管理色仕事をしており ました本日はよろしくお願い致しますお 願いしますはいということで早速 面接にしたいと思うんですけれども大丈夫 ですかはい今回はですね村上さんに最終的 に 残酷なんですけど マルかバツであの採用したいかどうかを 判断していただきたいなと思うんですけど よろしいですかやっぱり最後にピード バッグもいただければと思います はいそれでは 本日 スタンどうよ はじめまして 株式会社とてパンでし po している 村上と申します 今日はあのカジュアルにちょっとお話を 伺いできればと思います でぜひいらっしゃいバスお願いします 道ではまずにご自身の自己紹介からお願い キサナかと申します 新入社員として人材派遣営業の仕事をして おりまして そこではスタッフのフォローアップであっ たり 行くコってい 既存顧客のん 会のスタッフの提案であってとフォローの 現在周りので仕事をしておりましたんその 後 色がありまして グループ会社の方で海外拠点のをで it まあ奥所は解説ようなものをしておりまし てそちらの方に入って進捗管理であったり 安渓のヒアリングなどをしております 現在になります 電飾では越冬海外の押しは買いですね排出 ジョブ管理稼働されていたということなん ですけどそこからなぜエンジニアになり たいと思われたんですか そうですまあ科の新入社員のときからも そうなんすけどまぁ縁寿の方と触れ合う 機会であったりとか ございましてで前職でも 外国人のエンジニアの方特には議会があっ ています自分でサービスを作るっていう ところにすごく憧れであったりとか もともと理系出身っていうともあって ものづくりだったりサービス作りみたいな ところを自分で出来る自分のてれていると いうところにすごい魅力を感じて自分 まあ一年ってと臨時何 目指してみようということで入っ 勉強している最中でございます 前職ではエンジニアへのキャリアチェンジ 今は入って実現はできなさそう そうですねまぁ海外拠点だったので そもそも日本人のエンジニアがいなかっ たっていうのは大きかったんです とまぁなかなか未経験で はいるっていうな余地がなかったので 今回その勉強は松浦げあをやっていたので 今回 タイミングで全職人 しようという形になりましたはい って言われて弊社の志望理由 簡単で結構ですので教えて頂けます 二つございまして一つは アベンジャーであるっていうところでま 自分の 裁量の大きいところで自分の花の精 大きく挑戦できるかなというところが一つ と 2つ埋めがまあ hr テック系のあのを サービスされておりますのでそこにすごく サービスと共感できたというところが ベン食も人材系だったので そのあたりビジネスよりの目線で [音楽] 頭に来て いればなっている所も 今回 死亡させていただきになります では江藤な学習中ということですはいそれ これまで衛藤 どんな経緯でプログラミングの学習を進め て来られました 基本的には僕が区で可能をしておりまして 今バックエンドであれば ruby プロントインドであれば javascript 行ったりビュー うんじゃあところを使って あの勉強しおりましてまぁちょっと自分で ポリお店なんて作ったりとか というところも入ってござい なんかこれまで独学されている中で何か エラーとかっていう そうですのエラー真狩長谷減るじゃんと 言われまして やっぱりなかなか後独学で解決するのは 大変なんですけれども今ノイズでかなり長 が転がっている ありますのでですまず番組破壊 そこで調べながら コピー&amp;ペーストではなくて うんレスポなぜなぜバックが発生したのか ところをしっかり なぜこの方法で解決できるかというところ あとこの具みたいな形で残して方 おまわりもう一度そのバックにあった時に 対処できるようになっておりますはい すばらしいです なんかその学習方法とかってどこかで参考 にされていく そう爪の周りにエンジニアの方がいちゃう ので まこの本読んだ方がいいよとか 誰かに教えてもらうというよりは自己解決 を うっていうことを変形に僕が来た 1回まあのー少し 参考書品 あ最近お読みになったもんでよかったな 参考になるかなと言うか参考書10日 はいっ はいそうねええええええ ビューを勉強していたのでもうちょっと javascript の深いところを 勉強したいと思って オライリーの javascript はい ています松岡回ところまでいいですよねー あなたが知らないことだらけです とてもハハッ もらい結構 あの初心者の方がすぐにはちょっと今は市 が難しかったりとか 過去が牛来にボンデー javascript 意外とかで読まれ たりしますそうですマグ b とかも可能 てい ちょっとある日の方で正規表現と加速 香椎部分があったので おれーにんぐ生協下マッハっ苦しいはいよ ね思います お話です 結構あの読み進めるの通学中っていうと そうですね結構辛いですね までも自分の右があると思った ています ありがとうございます は仮にセット弊社に入っていただいて エンジニアとしてお仕事していただく場合 にはそれは今後5年ぐらいのスパンで どんな染みやになっていきたいとかそう いったキャリアプランみたいものを聞かせ いただけます まだ未経験というところもありますので march 年ぐらいはまあ月カリガリと こう報道を改定 ええまあイクイクはインフラ周りであっ たりとか 設定のことも勉強して上流の部分を やっていけるだけ違って 越冬ここ弊社に入っていただいてまずは 先ほどおっしゃったように ガリガリと行動を書いている系ただはい その後まぁあのー 新しく cg エンジニア書くのが入って きてをある程度教育係だったりとか ディレクションみたいと思うこちらもお 任せできればと思う こちらは味方ですけどそうですあの やれるっていう風にできることであれば 挑戦した なんか最近注目している新しい美術とかー 一つ窓 javascript の延長線 上ではタイプスクリプトが正 夜中には非常に流行っているの 自分の底を もやっていこうかなっているましょうおら 駅を選んでください になります今回まあその時点で何か学習で されていますが退屈クリックに貼ってそう です魔情報と言いますかあのーマイ dvd はみたいなところで また5区立東の情報であっていくところは これはちょっと8連勝2のことについてお 伺いれています 電飾が 越冬オフショア開発の進捗巻2号ていたと いうこともあるんですけど 結構進捗管理とかしてると問題が発生する と思うんです 今までで一番大きなインパクトの大きい 問題を買っていてどんな問題ね そう まあ結構いろいろあったんですけれども 一つはのエンジニアの方が aws の 管理をしている 方がいたんですけれども その方あのー新しくインスタンスを 堂園なかった pie コードみたいな外部に漏らしては いけないと 普通に切符ハムの行動に上げてい 例が現出して 意外に悪用されていい算数がいっぱいもう 作られている てかなり結構応援者的にもそう物の台詞 被害額とですかそうはい その a 棟 まあ流出させてしまった方のより上新型に 付託されません そうスマートなりのチームだったんです けどまぁ同じ感覚ということでん色々と クライアントに入ってやるっていうことが はいしますはい あそそこは問題が発生しましたという ところからどういうフローで 最終的な解決までですいただいています まあお前いろいろまずん何が起きたの かっていうのが最初がわからなくてその 請求書を見てあーやばい 何が起きてるんだってところであの まあ問題どうか汗していうかっていうのを まーす 調査してこれだっていうのを見つけて まずすぐに蔵屋さんに報告 ねっ 今こういうことが来ましたと思う まずどのように対応していくかっていうの は私の裁量ではできない部分ではあったん でまぁぴょん 自社 常識を取るとます まあ まじん 10場所みたいなものを書いてまぁ今後 こういうことが起きないようにするって ユーロま組み立てますけど 入ってくださいん ではちょっとー 続いていたんですけど ご希望の練習もらってござい そういう希望が3型でではあるのであまり 高望みはできないというふうには 意識しておりまして 電飾の亀有もあって 貴方としは400万円ん やっぱりマァムリキの通り経験です いけないと思うやっぱりー ちょっと現職よりも下がってしまう可能性 も多い こちらん またそうですかね まあ実はまあ グラマー咲く未経験というところからなん です 語りの覚悟ができてい 弊社の像業務を色々とを調べに効くんじゃ ないかと思うんですけど まず一番最初に取り組んでみたいサービス とか ボランティアがございます 本は b to do メリーのサービス になるんですけれど 業務委託 関連ぞ 階層に やっていきたいなと思いますません いうか8最後にです こちらにです質問とかって感じ つまり分 今はまだ未経験というところあるんです けれども 住宅ところを割っていた [音楽] 歌ってくださいね 等弊社がまあ基本的にはバックエンド rb で帰っ 員制度は やは作ることであった理由ゲーソフトなっ ているのでまずは東北地震どちらをやって いきたいか言うところのヒアリングをさせ ていただき まずは現在ところがあったやっていただけ ますそれでまぁ最初は雪 いいな気をする お酒をするという形になると思います でえっとまさしくなんですけどまず海経験 からということなんですねこちら側でへと 昇華していただけるようなユーロまで タスクは細分化してそれを準備お任せして いくという形になるかな 移動でございます じゃあ今日はこれで以上にくるんです パンプス大磯ガーデンズかありがとう ございました ございでございましたん おつかれさまでした os 撮り下ろし内訳 何か良いか何でもいいですよそう言えない 展開 じゃまず小さな傘部門からと 誰かいません 二高評価道ですん そうです魔10分がアピールしたいところ は feel できたかなん [音楽] 結果を進みます ranal 薄毛透かし 入ったみんなでは 間伐デー 検討お願いします 結果は マルチカーですよね クラウンだと思いますなって村上さんの 反応でも いい みたいで見てました 私がを入れてなんかすごい優しい 俳風答えて下さったり 質問 されてるから 答えるホームねうんか エイだろうな そうね本当にまあいろいろ面接受けてき ました本当に色んなことを聞いてくださっ て話しやすかったです フィードバッグはいお願いします やっぱりまず 最初に大事になるのかどれだけエンジニア になりたいか プログラミングに興味があるかという ところを税金のか 別では一番重視んです ええええあの エンジニアを目指そうと思ったきっかけと いったまあ 側で働いている方の 姿を見て楽しそうだな 分離思われたてくださいまずその楽しそう という印象を持つことが大事 そこから越冬 前職ではできないので辞めて行動に移す っていうところで実際 本当にエンジニアになりたいだという女 ついから伝わってきましたそれが非常に 良かったですねここは8まあ 採毒が消されている学習姿勢というのも 素晴らしくて今はその ある程度 やっている言語を調べられてそういうの キャッチャー口を進めたい とは選べた時もだいたいそのコピペして1 回解決すれば ok 心が多いんですけど それからまた深掘りしてその原因は何だっ ミドと繰り返しない市井栗繰り返さないし 税 このもうすごい好印象です 冥術の中に 年収 赤どれぐらいがいいですかっネクターはん にゃんそれ 1才6400 どうが 実際ですね経験から 定植するとなると大体300万円前後 が多くて お高くても350万円ぐらい になってしまいますで実際その まあ採用企業がもう前職の経験とかを見 たりするんです 伊佐那かさんみたいに もともと it 系の進捗管理の花咲く いったということであればヘッド+の判定 材料にはなる [音楽] というのは ある花王 ですよねー に登っていただきましたけど どうでしょうか今日どうでした海さかっ 装置すごいあの緊張をしたんですけれども はい をまこういう場面でん ていただきたいと思うなかなかないと思う ので本当に楽しいです をさせていただきました 角度ではいお疲れ様でしたさあ はい今回はエンジニア転職を検討している 方の面接を実際にさせていただきました いやーやっぱりで見てみないとどんなこと を質問してどんなことを答えているのか わからないので皆さんも勉強になったかな と思います それではまた見てくださいありがとう ございましたーーー いっ","link":"/%E3%80%90%E5%8D%B3%E5%90%88%E6%A0%BC%E3%80%91%E6%9C%AA%E7%B5%8C%E9%A8%93%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%82%92%E7%8F%BE%E5%BD%B9CTO%E3%81%8C%E3%82%AC%E3%83%81%E9%9D%A2%E8%AB%87%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/"},{"title":"未経験エンジニアを面接したら優秀すぎて引いてしまった件","text":"本記事について はじめに ist では現在 web エンジニアと pm 積極採用中です 詳細は概要欄をチェックしてください どのセットです今回なんですけども面接の実況解説第二弾でございます この間ですねまぁプログラミングスクールと開発会社をやられている a ランク ティックさんですねそことコラボしてきましていき意見ティア方を集めの穴してき たっていうね動画を出してますのでまぁよかったらねあのオリジナルの4を見て頂けれ ばと思うんですけど そちらの方 方で実際に面接してここが良かったですねとか合格判定が今くらいですみたいな味した んですけど今回はそれを見ながらですね 実際僕は何でこんな質問したのかとかこの回答快適とリッジはどういうこと思ってたと かそういう話をねできれば人生これから面接行く人にとっては 連接買ってこういうところ見てんだとか逆にですね面接 とする側はこういう質問するとエンジニアさんが鈍化優秀方をすれば分かるのねとか 走行にとって勉強になるかなと思いましたんでを日々に楽しんでいただければと思うん ですが 結論からいうと今回の人はかなり優秀でして合格判定が abcde 中の b でし た で者問題なんですけども僕は この面接のどのタイミングでこの1 b 判定だとしたでしょうかというね クイズをしていきたいなと思いますのでぜひですね 視聴者の方はこの本なんじゃないかっていうのはちょっと予想しながら動画見てて ください最後の方でね 結果発表したいと思いますのでお付き合いください 妻そんな感じで普段このチャンネルでは web it 業界の話とかプログラミング コードの話を発射してますんでチャンネル登録がまだの方は今のうちに登録してもらう と幸いですでは早速本題の方入り抹消をどうぞ この動画は on my プログラミングスクールのペックアカデミーの提供でお送り します 本日はよろしくお願い致しますはいよろしくお願いします 面接を担当させていただきます株式会社生徒先生の web it 塾の代表の堀口 ですよろしくお願いします 米代表のページですよこう紹介 少しだけど すかここねあの前回と同じなんですけどもまぁ自己紹介は必ず自分からするようにして います自己紹介嫌いしなさいというようなこっちからして じゃあこういうものなんですけどお願いしていいですかった方が自然な流れなんでねと いう風にしておりますと今年26歳になります 高校卒業して自動車部品メーカーに入社して 8 年8年目に今なります業務でやりづらいことだったパパのでピクセルのプログラミング 言語であると首へを窓グラフで学びながら 8パンタのシステムをつくったりしていましたこの中です時間が出来たので web 制作副業なども行ったりしていましたその頃からちょっとエンジニアを目指し たいと思ったためえっと昨年 10月にぼらんてぃくに留学しました2月からはえっとスタートアップテクノロジー様 にて特許みたく と指定と開発に携わっています今年の4月に行われた プログラミングスクール神戸コンテストなエビ家では一方個人開発した 3月末プレイでオーディエンス賞などいただくことができました はい以上ですよろしくお願いしますありがとうございます この上昇がやすごく良くていいところがまあ23これかなと思うんですけどまず食玩 短いですね もういいちょいくらいですかねもうちょっとゆっくり喋られる方があったっていうのも あると思うねちょっとじゃあないんですから する内容的には違和感なく必要な情報だけ入ってたなという感じ方へ無駄に長くなかっ たなと思います でもう一つはあの結構多くのポイントポイントでクックになるようなワードを結構入れ てたかなと思います 例えば未経験のエンジンってのは解っている上で面接してるんで 敬虔ないっていう感じでこう見てるんですけど ただ前職ね自動車メーカーっていうところで普通に与えたけどそこで bd をやって たってはてぃ自動車メーカーで働いての bb なんかやるのっていう疑問がちょっと フックになりましたし それから副業で web 制作やってたという話ば履歴書にはなかったかもしれないす けどそんなに旧チャーできないことですねそういうところがあったりとか あとまあそのらんてぃくさん今スクールに入っ 言うけどそこから業務委託でもこうやってると月さにプログラミングのなんか ものですとか墓さんなのかと出てショートたって言うとどれぐらいそう衣装がわかるん ですけどこの段階ではね また こういう感じで結構フックになりそうなわぁポンプオーバー入っていいですよね なのでこれアートからこの質問と記してみたいなとここもちょっと深掘りしてみたいな あって思うようなワードが結構ちりばめられてて ず小屋の興味を引かせるような自己紹介だったかなと思います 業務効率化のために vba でっていう話があったと思うんですけどこれはなんか きっかけはあったんですか そうですねえと紙で管理しているものが多くて 金型を使用する部署だったんですけども定期的に使ったかな方っていうのはねわから ないんですよ ブーバー目ちょっとメンテナンス akir ああちょっとアップんでそこをどうにか 解決できないかアウディ a ちょっと wavy と excel システム化して a here 車でも動いているですかそうです今でも使ってます これねあのすごくいいエピソードなぁと思いました というのもなぜかというといいポイントが3つあっでこの人です1セクションにいい ところ3つこういうカフェくる人たんですけどこの人何がいいかというとまず1つは 実際に仕事をしている上でこんな字作業は機械に在らせて我々人間もとクリエイティブ な意義の高い子 と仕様でっていうこれはもうテクノロジーエンジニアの本質だと思う エンジンへ向いていそうな人がこの人っていうそういうエピソードが感じれるって言う のが一歩来てもう一つ目は実際に火を書いたということですね誰かにやってもらうとか やらせると金ではなくて実現するところまで好チームで自走して勉強してやったらやり きったっていう女成功と 経験でもあるし勉強をしたっていうね学習力が高いなってぴ外でもあるしということで すごくはの価値の高い学習経験っていうふうに変わりますそして三つ目は今も動いて いる ぶつかるというサービスナースつまりこれはどっちかただなんてことを言いたかって いうようななんか実績とか仕事に近いだと思うけどやっぱり誰かに使われているものを を作ったっていう構成がでかいんですよねそこが結局ただのポートフォリオと業務実績 との差かなと思うんですけど歳以下をもらった上で仕事をしてましたというね でしかもだ以外にも使う役に立ってますっていうのは全然やっていた仕事をしてなこの 人って言うエピソードが垣間見える一面だったかなと思います なんでねこれねあの頃のエピソードぜひ皆さんを活用していただきたいなと思うんです けど エンジニアなろうでもいまは仕事が違うから転職しなきゃってなるんですけどまずその 会社内でエンジンができないのかなっていうのはいっぱい考えてみていただくといいと 思いますやばい 中にはエンジンになりたくてまーちゃん内の業務効率化をしたりと隠せるからね入って この vb でなんとかしましたっていう人とかマーガスが来ましたとか 2ヒトの実多くないけどあるんですよなのでまだを社内でエンジニアに今の立場から なっちゃうとは実はができたりするのでいきね会社辞める場合にそこで実績作っちゃっ て エンジニアや てからでも遅くはないんじゃないかとか思うんですよねたこともとプログラミングとか その辺はなんかの知見があるわけではなく 高校の頃ま少しだけほんと c 言語さあケーキあるんですけども まあそうの かなんかですかうそして一応情報をの授業やってたんですけども正直その時触ったりで 全然特にパソコンも兄がで意識があったんだけどウンギョやっぱり夏けっもう僕も広報 情報課だったんでわかるんですけど高校の情報科っていうのはで正直に ほとんど実際にせずにおいては評価されないと思います大学がコンピューターさん演奏 だったら結構表されると思うんですけど情報化でもコンピューターサイエンスチックな ことするんですよただ学校の先生のレベルが全然高くないので 起業3年間やってだけど触りなんじゃねーかなっていう感覚ですねまたが通ってたと いうことは別に 能力とか に評価ならないですけどエピソードとしてはいいところこの web 制作の副業や られいう話があったと思うんですけどそれはランどうやってお仕事をとっぺたんですか 最初はちょっと知らない人と仕事妻ちょっと雪が入ったんでちょっと知り合いに農家を 経営している 言わになりましてちょっとその人にちょっといる 10版と相談しましてホームページとかいらないってちょっと相談したら是非おほし いってことだったんで ぞそこでや味噌の農家の最初のあの暗記んくらでした 15万円分お前ね 5万円ですね このエピソードもねすごく良くてっていうのはその5万円とはいえの開花をもらって 仕事をしたという実績これ非常に良いですねやっぱりねお金は貰った仕事とそうでない 趣味とかでやるのではかなり雲泥の差があるんでこの経験の勝ちというところでお金を もらう以上はやっぱりそれ 米達成しなかった場合は問題なわけですよ お金が発生してないのであれば正直責任感ないじゃないですか途中で止めてのベティ どっちも悪くないしっていうことなんですよお金をもらって行為はやり金なきゃいけ ない責任を伴うのでそういう意味だとそうと価値が高い なのでぜひですね皆さんもまずその周りテーマウェブサイトでもアプリもなんでもいい ですけど何か 作りたいもんあるっていい人から本当に比べもんに仕事として受注できたほうがいい です でそれはもう全然このアップをその手中所轄する際にエピソードとして話せるって前 使って頂ければと思うんですよね ちなみ屋の facebook の音ザッカーバーグは一番そして子供の頃にお父さん まで歯医者行ってるんで その歯医者の予約プログラムを作ったってよね 子供でやるのか それみたいな話なんですけどそういうところから始まってます ケニアの職歴のところにちょっとあたパテックのおじさんからお仕事お嫁食べでやられ ていて帰って あったかなと思うんですけどこれはどういうことされてますか? と今フランチャイズシステムを剥い開発しているんですけどもその面開発メンバーとして、えっと開発業もはいここだっていますまあ値段てプーさんってこのプログラミング スクールの運営会社がスタートアップテクノロジーぞというところでそこから2ヶ月前 くらいから興味ある同小てもらってる みたいなことなんですけど少しだしまぁ身内とは業務経験で仕事をもらえているんです よねそれがなんかすごくいいなと思って 兄経験といえも一応仕事行っちゃってるっていうねそこですよねなんてクソの プログラムでプログラミングの勉強をやったあと家から仕事を発注してますが絶対入れ てるわけじゃないみたいなんでたまたま運が良かったっていう話もあるらしいんです けど プレすごくいいんであるもしかしたらワンちゃんラン pict そういう一ムーティ 集めるかもしれない ワンちゃんネコ科のででわからないんですけどそれはね結構いいかなと思うならで さっきの話ともかぶるんですけどなんでもいいけど仕事を査定経験な奴ですねもう1本 も会社 選んだよねちっとも業務をどの業界でも選べるようって言う 条件だったとしたら5 校友会誌いきたいとかこういう妖怪1体とかいうプロジェクトに関わりたいとかそう いう気持ちは何かありますか ペット僕は今まで自動車業界にしか努めてなかったのでいいこれからちょっといろいろ な業界のポットを知りたいなって興味があるので と自宅系でちょっと色々サービスと授業作ってくような 会社疑えっ就職したいな考えています これねあのすごく良い回答だなぁと思うんですよね仕込経験地にあって言うと とりあえず自社サービス行きたいでき米話なんですけどその自社サービスつってもね いろいろあるわけです良い8型の樹サービスあれば金融系な事実サービスがあれば多幸 いろいろある中で自社 サービスに行きたいだと弱いというかなんでっていう感じがしたんですけどその中でも この方がいろいろ経験者で自宅の方行きたいっていうのは妄想し過ぎが通ってるかなぁ と思うでいい絞りいうかなと思いますであのまあ偶然的いうとで僕は練習部で スタートアップとカブ者サービス系の会社さん相手に開発支援をするって言うよ いう web 住宅みたいな仕事をよくやってたんですけれどもそれがいいところは いろんな業界いろんなサービスお客さんと付き合うことができるので音それこそ を固めの it の歯医者さんもいた試合もが知っているような情報って外資コンサル 誰でもいいよし案件とかもあったしファッション系の間さんもあったしあとは医療系の スタッフもあったし 炭鉱系のスタートアップもあったしとかね結構多岐にわたるんですよ それが自社開発もそれしかい昔やらないんで入ったらホーズ年だと思うけど自宅の場合 は てバーンと人が入ってんだがは会社に居るんですけど何らかのスパンで変わった ブーブーいろいろな会社ティル here かなと思いますけどねいいえぜひ会い車 ティアティアのラインの立ち上げを任されますてその中で 5人ほどの入りちょっと一番最年少だったんですけども 一応日こそ排ガスもありましたねディーター経験とかなんか出資したことがある人って いうのはぜひぜひどっかのタイミングでアピールするといいと思います今日はもう やっぱりあのリーダー敵将っすよだからリーダーでもあるんですけどリーダーになりた いっ という気持ちと実際にその能力がある人っていうのは両方を兼ね揃えてさてかなり市場 的に良いないのでそれこそね約2位てなくて リーダーっていうだけでもうそれだけで一向頭かけるのでそれはねあのアピールできる 人は便でした方がいい ブーブ主な機能としては2つありまして 1 2つめはえっとあーランダムでへパティ なるほど今ミューザさんが出せるけどそうもですね父横線 pv と105ユーザーは 先週の人で配送人数いい リリースしたのが入ってですヘッド4月の17 ニッチだった報道だとこだわりのポイントとか何かあったりしますか パーンえっとまず2つほどあるんですけども 越冬ショートカットを出題する時に最初テキストで問題だけを出題するような形式にし ていったんですけども ゆだからそれだとどのショットパット打てばいいのかわからないっていうちょっと声を 頂いたのでちょっと問題出すときにエッジ麩を使っ このエピソード印象ねちょっとショートアップのを8問題で表示するようにしました もう一つこだわった点としましては熱湯ショートパット入力する時に 例えばコマンド s が正解いパティコマンド入力し m 2 e 行きこれがきれい 難しいと思ったロジクールかちょっと大変でこだわった部分でもあります 今すごくいい話があんこが汚れないで弾いたんですけど まずそのポートフォリオの話をしているんですけどポート4 d 夜中にもいい を取るとはリバティのいいところはまず評価されているとこれね話後で聞くともう何人 かのうちの何番目くらいの感じだったんでしょ すごい賞ではないんですけど客観的に評価されましたっていう経験がある をところだということと街に使われているといっかけてで線なのかな まあなんかそんなで対処するじゃないかもしれないし100 user っていうのも 送らが値札使っている規模からするとこのくらいかもしれんけどすごい数字ですよこれ をところ一発ですかね どんだけ使われているものを作れたというのはすごいと思います本当にやっぱり使わ れるサービスを作ったって姫系犬中と関係なしになかなかいないんで1本目疲れてって のすごいいいですさらに3つ目 ユーザーぽい聞いて改善しましたっていうところがやっぱりあのすごくいい これらの自社サービスの人は結構あ欲しい mind と思うんですよねやっぱりユーザーの交易で発作ばサービス良くなるようないっていう マインドが割と大事だったりするので なんかコーディングスキルもちろんレンジが大事だと思うんですけどそれ以上に言われ たねユーザーの事を考えられたりとかこういう方がいいんじゃないかっていうなんか そういうコミュニケーション力だったりとか サービスを良くしようという思考とか技術じゃないよ部分の 能力っていうのが僕の会社を助けると思うんで特に釈迦やつ系はこうだと思います もう1個はのこだわりのポイントでコマンドをしながら s だったらをけれど s を してからコマンドだと不正解にするってこの路地これねちょっとヴォクレールずわかる んですけど結構面倒くさいというか難しいポイントなんじゃないかと思いますでなんか キラキラした技術なんか例えば最近だ その号とかどっかぁとかねまあそういうのはあると思うんですけどそういうのをやって たってよりこういう中でチー民意 大変なことやって奴のほうが実は能力たかってすっていうのがあって コマンドを知ってから s じゃないと判定を ng にするとや恋来 調整みたいな能力っていうのはそういうところに気がついてが数をこなしていかないと 付かない能力だったですのでこれ早々に身に付けられている 語ったすごくいいなと思うのでちょっと面接する側のなかなか気付きづらいエピそうだ と思うんです後孤児デーにすごく良いそうだと思うんですけど多分これは気づく面接官 もそんな多くないかもしれないです こういうエピソ ブーブーといいエンジンアニェリますあぁし そしてちょっと舞う今のところはまだこれ公開してるのはコレ このサービスだけとなっています 湖面あのちょっと惜しいポイントだなぁと思いますこの方 ポートこれ以外にも空でね web サイト制作行ったりとか 前職でその vba でこのやったってのがあったと思うけどあれを もちろんアピールできたほうがターンと思うけど1本これ一個だと 飾り少ないのでいい事だと思うんですけどただたくさん家族なられた方がいいと思い ますよねもちろん中には見せられないものとかあると でもそれだったらそれで甘いもの説明するようの音エピソードすればいいと思うんです よ 例えばビッグストアで簡単に自分の所持をご紹介制度をつくったとしましょうでそこに 何か works のページ作って過去に行ったこととかというのはこう書いたとし たらそこでなんかこういうものを作ったってなんか説明文とイメージ図とかやるとかね そんなんでもいいと思いますし せっかく作ってディスティというかアウトプットとして成立しているものにアン氏は 打力ハッピーるした方がいすっ た以上で面積は追われますので本日はどうもありがとうございましたありがとうござい ました はいしますクリスレイします ハイツ容疑でいかがだったでしょうか面接をねやってきたわけなんですけれども総評と してはプロ方総じてすごく仲いい あのエピソードが良い回答多かったですね人からとしてもそう さわやかな方だったなぁという印象でしたし質問に対しても簡潔に復旧となるような ものを混ぜながらこうですね話してくれたでかなり効い 優秀な方だなという印象でしただいたいみっきぃ県の方に関しては何点者になりたいと かで結構話聞きたりするんですけどたこの方に感謝あんまり深掘りをしてませんなぜか というともう一今までの人生の中で縁寿になりそうなフラッグが結構コンボ3弾で説得 力があるからなんかこれで聞く必要ないかなぁと思って早々ニックのやめたんですけど こんな感じですかね あとはまあゲートの話か でもそんなに聞いてないですやっぱりに経験の方だとそんなに技術の話しても0 p 4 p できますても pgp レベル1だとしきっとできますその技とレベル1樽を知っ て来てそこまでね よほどなんかぶっ飛んでタイ人限りはは聞かないんですけども一通り出来る方だなって ことでは入社した後もちょっと入ってこれるだろうなっていう印象を受けましたね 桃 いうところでじゃあとモン段階でこの方合格版 tv だと思ったあっていうとこです ねどこだと思いますでしょうか 正解はですね 青商会終わったタイミングですはやってはもうかもしれないけどこれ面接が始まる前に まず履歴書とか峯殿で事前に書類として見ているのでこういう人がきますということだ けど知ってるでしょ てその段階で結構いい人かもってことで自分の中では合格判定映画らしい もうラインだろうなーって思ってたんですね てまあ自己紹介が終わった時点でほぼ右になりました まあええわそもそもないんですよありえないですよこれだったら命がベンチャーができ ちゃうんじゃないですかぐらいの人の案では基本的になる人ってのまあまあはいないん ですけど 市五条が終わったタイミングで書類がこれで5個紹介がこれで雰囲気こういう人だっ たら b だろうなっていうふうにほぼ確信にしましたね でこのパターンけっこうよくあるんですよ書類見ていい子だと思って面接で選んでと 話し聞いたらすごく良かったっていうまたあるんですけどただその後の時間何かって いうとここでやっぱりあの面接で大事なのはいくら良いと思っても月半島に聞い 上げて君内定なんてこと絶対には行きはない そこは慎重に行くとかあらがない方は自分が来ましたこと良いと思いたいだけでなんか 本当はデメリット部分もあるんじゃないかなとかっていうのを考えながら答え合わせを していくって感覚なんですけど結局時間最後まで使わなきゃいけないし もうちょいすごく uc 人なんだけどやりたいとちょっと寺社やということと内容が 違う試合パティ 米給与の話とかってなったときに自分これほしいってなったときにじゃあこの人にそれ ぐらい払うほどのプラスになるだろうかっていう判定をするときにやっぱりエピソード をたくさん知らないとってこの給与って妥当だよねとか妥当じゃないよって判断でき ないので いくら良い人がいたとしても母校物事を考えて必ず面接な十分に時間を取ってやるべき だと強思う いますので壁に冒頭でわかったとしても最後まで行ったと思いますっていう話でした なのでね皆さん是非上類はかなり大事そこで期待値が結構変わったりとかまぁ方てので パンチ面接してるの感じだと それで落としたりするんですけどやっぱりそれであるてその人がどんな人が優秀さとか は買っちゃうっていうのが やっぱり面接官もわかってるんですよねなんとその辺を意識してもらえるといいんじゃ ないかなと思います いうわけでね今度が良かったと思ってくれた方はぜひ高評価とチャンネル登録しておい てもらえると幸いですでは次の動画でまた会いましょうばいばいん この動画は on my プログラミングスクールの撤回た大妃の提供でお送りしまし た どうぞ最後まで観ていただいてありがとうございます経済弊社では法人のお客様向けに 下文人やの採用やサービスダイハツのフォン猿てぃんぐ youtube やティックトックの門されていくを承っています競技興味のある方 是非会いようなキャラことへ みてください んじゃ皆さん北へ向かいます ん ん","link":"/%E6%9C%AA%E7%B5%8C%E9%A8%93%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%82%92%E9%9D%A2%E6%8E%A5%E3%81%97%E3%81%9F%E3%82%89%E5%84%AA%E7%A7%80%E3%81%99%E3%81%8E%E3%81%A6%E5%BC%95%E3%81%84%E3%81%A6%E3%81%97%E3%81%BE%E3%81%A3%E3%81%9F%E4%BB%B6/"},{"title":"インデクシングとは？MySQLインデックス作成のヒントと考慮点記事","text":"本記事について 目的 この記事でどこまで詳しく書くか 〇〇とは 〇〇の流れ 〇〇におけるメリット 〇〇におけるデメリット 〇〇に向いているプロジェクトとは 〇〇を行う際のポイント 〇〇以外の〇〇はあるの？ 一. インデックスの役割 一般のアプリケーションシステムでは、読み書きの比率は10:1程度であり、挿入操作や通常の更新操作にはあまり性能の問題が発生しません。最も多く遭遇し、かつ問題が発生しやすいのは、複雑なクエリ操作です。したがって、クエリの最適化は明らかに最重要事項です。 データ量とアクセス量が少ない場合、MySQLのアクセスは非常に高速です。インデックスを追加してもアクセスに影響はほとんどありません。しかし、データ量とアクセス量が急増すると、MySQLが遅くなり、時にはダウンしてしまうことがあります。その場合、SQLの最適化を考えなければなりません。データベースに正確かつ合理的なインデックスを作成することは、MySQLの最適化における重要な手段です。 インデックスの目的は、クエリの効率を向上させることにあります。これは辞書に例えることができます。例えば、「MySQL」という単語を検索する場合、まずmの文字を特定し、その後、yの文字を見つけ、最後に残りのsqlを見つける必要があります。インデックスがない場合、すべての単語を見る必要があるかもしれません。辞書以外にも、駅の時刻表や書籍の目次など、インデックスの例は生活の中でよく見られます。その原理はすべて同じで、データを取得する範囲を狭め、最終的に求める結果を選択し、ランダムなイベントを順序付けられたイベントに変換することです。つまり、常に同じ方法でデータを検索します。 インデックスを作成する際は、どの列がSQLクエリで使用されるかを考慮し、これらの列に1つまたは複数のインデックスを作成する必要があります。実際、インデックスもテーブルの一種であり、主キーやインデックスフィールド、実際のテーブルを指すポインタが格納されています。データベースのユーザーはインデックスを見ることはできません。それらはクエリを高速化するために使用されます。データベース検索エンジンは、レコードを迅速に特定するためにインデックスを使用します。 インデックスがあるテーブルでINSERTやUPDATE文を実行すると、実行に時間がかかる場合がありますが、SELECT文は実行が速くなります。なぜなら、挿入や更新が行われる際に、データベースはインデックス値を挿入または更新する必要があるためです。 二. インデックスの作成と削除 インデックスの種類： UNIQUE（一意インデックス）：同じ値が出現することはできませんが、NULL値は許可されます。 INDEX（通常のインデックス）：同じインデックス内容が出現することが許可されます。 PRIMARY KEY（主キーインデックス）：同じ値の出現を許可しません。 fulltext index（全文検索インデックス）：値の中の特定の単語に対して検索できますが、効率はあまりよくありません。 複合インデックス：実質的には複数のフィールドを1つのインデックスにまとめ、列の組み合わせが一意である必要があります。 (1) ALTER TABLE文を使用してインデックスを作成します。 これは、テーブルが作成された後に追加されることが適用されます。 ALTER TABLE テーブル名 ADD インデックスの種類（unique, primary key, fulltext, index）[インデックス名]（列名） 123456//normal indexalter table table_name add index index_name (column_list) ; //unique idnex alter table table_name add unique (column_list) ; //primary key index alter table table_name add primary key (column_list) ; ALTER TABLEを使用して、普通インデックス、ユニークインデックス、およびプライマリーキーインデックスの3つのインデックス形式を作成することができます。テーブル名はインデックスを追加するテーブルの名前であり、column_listはどの列にインデックスを追加するかを示し、複数の列がある場合は各列をコンマで区切ります。インデックス名index_nameはオプションであり、指定しない場合、MySQLは最初のインデックス列に基づいて名前を付けます。また、ALTER TABLEでは、単一の文で複数のテーブルの変更を許可しているため、複数のインデックスを同時に作成することもできます。 (2)CREATE INDEX文を使用してテーブルにインデックスを追加する CREATE INDEXは、テーブルに通常のインデックスまたはユニークインデックスを追加するために使用でき、テーブルを作成する際にインデックスを作成するために使用できます。 1CREATE INDEX index_name ON table_name(username(length)); CHARやVARCHARの場合、長さはフィールドの実際の長さよりも短くすることができます。ただし、BLOBやTEXTの場合は、長さを指定する必要があります。 12//create文は、普通のインデックスとユニークインデックスの2つのタイプのインデックスのみを追加できます。 CREATE INDEX index_name ON table_name (column_list) CREATE UNIQUE INDEX index_name ON table_name (column_list) table_name、index_name、column_listはALTER TABLE文と同じ意味を持ちますが、索引名は指定できません。また、CREATE INDEX文を使用してPRIMARY KEYインデックスを作成することはできません。 (3)删除索引 删除索引可以使用ALTER TABLE或DROP INDEX语句来实现。DROP INDEX可以在ALTER TABLE内部作为一条语句处理，其格式如下： 123drop index index_name on table_name ;alter table table_name drop index index_name ;alter table table_name drop primary key ; 其中，在前面的两条语句中，都删除了table_name中的索引index_name。而在最后一条语句中，只在删除PRIMARY KEY索引中使用，因为一个表只可能有一个PRIMARY KEY索引，因此不需要指定索引名。如果没有创建PRIMARY KEY索引，但表具有一个或多个UNIQUE索引，则MySQL将删除第一个UNIQUE索引。 如果从表中删除某列，则索引会受影响。对于多列组合的索引，如果删除其中的某列，则该列也会从索引中删除。如果删除组成索引的所有列，则整个索引将被删除。 (4) 组合索引与前缀索引 在这里要指出，组合索引和前缀索引是对建立索引技巧的一种称呼，并不是索引的类型。为了更好的表述清楚，建立一个demo表如下。 12345678910create table USER_DEMO( ID int not null auto_increment comment 'PRIMARY KEY', LOGIN_NAME varchar(100) not null comment 'ユーザー名', PASSWORD varchar(100) not null comment 'パスワード', CITY varchar(30) not null comment '城市', AGE int not null comment '年齢', SEX int not null comment '性别(0:女 1：男)', primary key (ID)); 为了进一步榨取mysql的效率，就可以考虑建立组合索引，即将LOGIN_NAME,CITY,AGE建到一个索引里： 1ALTER TABLE USER_DEMO ADD INDEX name_city_age (LOGIN_NAME(**16),CITY,AGE);** 建表时，LOGIN_NAME长度为100，这里用16，是因为一般情况下名字的长度不会超过16，这样会加快索引查询速度，还会减少索引文件的大小，提高INSERT，UPDATE的更新速度。 如果分别给LOGIN_NAME,CITY,AGE建立单列索引，让该表有3个单列索引，查询时和组合索引的效率是大不一样的，甚至远远低于我们的组合索引。虽然此时有三个索引，但mysql只能用到其中的那个它认为似乎是最有效率的单列索引，另外两个是用不到的，也就是说还是一个全表扫描的过程。 建立这样的组合索引，就相当于分别建立如下三种组合索引： 1LOGIN_NAME,CITY,AGE LOGIN_NAME,CITY LOGIN_NAME 为什么没有CITY,AGE等这样的组合索引呢？这是因为mysql组合索引“最左前缀”的结果。简单的理解就是只从最左边的开始组合，并不是只要包含这三列的查询都会用到该组合索引。也就是说name_city_age(LOGIN_NAME(16),CITY,AGE)从左到右进行索引，如果没有左前索引，mysql不会执行索引查询。 如果索引列长度过长,这种列索引时将会产生很大的索引文件,不便于操作,可以使用前缀索引方式进行索引，前缀索引应该控制在一个合适的点,控制在0.31黄金值即可(大于这个值就可以创建)。 12SELECT COUNT(DISTINCT(LEFT(`title`,**10)))/COUNT(*) FROM Arctic; -- 这个值大于0.31就可以创建前缀索引,Distinct去重复 ALTER TABLE user ADD INDEX uname(title(10)); – 增加前缀索引SQL,将人名的索引建立在10,这样可以减少索引文件大小,加快索引查询速度**` 三.索引的使用及注意事项 EXPLAIN可以帮助开发人员分析SQL问题,explain显示了mysql如何使用索引来处理select语句以及连接表,可以帮助选择更好的索引和写出更优化的查询语句。 使用方法,在select语句前加上Explain就可以了： 1Explain select * from user where id=**1;** 尽量避免这些不走索引的sql： !https://assets.cnblogs.com/images/copycode.gif !https://common.cnblogs.com/images/copycode.gif 123456789101112131415161718SELECT `sname` FROM `stu` WHERE `age`+10=30;-- 不会使用索引,因为所有索引列参与了计算SELECT `sname` FROM `stu` WHERE LEFT(`date`,4) &lt;1990; -- 不会使用索引,因为使用了函数运算,原理与上面相同SELECT * FROM `houdunwang` WHERE `uname` LIKE'后盾%' -- 走索引SELECT * FROM `houdunwang` WHERE `uname` LIKE &quot;%后盾%&quot; -- 不走索引-- 正则表达式不使用索引,这应该很好理解,所以为什么在SQL中很难看到regexp关键字的原因-- 字符串与数字比较不使用索引;CREATE TABLE `a` (`a` char(10));EXPLAIN SELECT * FROM `a` WHERE `a`=&quot;1&quot; -- 走索引EXPLAIN SELECT * FROM `a` WHERE `a`=1 -- 不走索引select * from dept where dname='xxx' or loc='xx' or deptno=45 --如果条件中有or,即使其中有条件带索引也不会使用。换言之,就是要求使用的所有字段,都必须建立索引, 我们建议大家尽量避免使用or 关键字-- 如果mysql估计使用全表扫描要比使用索引快,则不使用索引 !https://common.cnblogs.com/images/copycode.gif !https://assets.cnblogs.com/images/copycode.gif 索引虽然好处很多，但过多的使用索引可能带来相反的问题，索引也是有缺点的： 虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT,UPDATE和DELETE。因为更新表时，mysql不仅要保存数据，还要保存一下索引文件 建立索引会占用磁盘空间的索引文件。一般情况这个问题不太严重，但如果你在要给大表上建了多种组合索引，索引文件会膨胀很宽 索引只是提高效率的一个方式，如果mysql有大数据量的表，就要花时间研究建立最优的索引，或优化查询语句。 使用索引时，有一些技巧： 1.索引不会包含有NULL的列 只要列中包含有NULL值，都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此符合索引就是无效的。 2.使用短索引 对串列进行索引，如果可以就应该指定一个前缀长度。例如，如果有一个char（255）的列，如果在前10个或20个字符内，多数值是唯一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。 3.索引列排序 mysql查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作，尽量不要包含多个列的排序，如果需要最好给这些列建复合索引。 4.like语句操作 一般情况下不鼓励使用like操作，如果非使用不可，注意正确的使用方式。like ‘%aaa%’不会使用索引，而like ‘aaa%’可以使用索引。 5.不要在列上进行运算 6.不使用NOT IN 、&lt;&gt;、！=操作，但&lt;,&lt;=，=，&gt;,&gt;=,BETWEEN,IN是可以用到索引的 7.索引要建立在经常进行select操作的字段上。 这是因为，如果这些列很少用到，那么有无索引并不能明显改变查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。 8.索引要建立在值比较唯一的字段上。 9.对于那些定义为text、image和bit数据类型的列不应该增加索引。因为这些列的数据量要么相当大，要么取值很少。 10.在where和join中出现的列需要建立索引。 11.where的查询条件里有不等号(where column != …),mysql将无法使用索引。 12.如果where字句的查询条件里使用了函数(如：where DAY(column)=…),mysql将无法使用索引。 13.在join操作中(需要从多个数据表提取数据时)，mysql只有在主键和外键的数据类型相同时才能使用索引，否则及时建立了索引也不会使用。","link":"/MySQL-indexing-tips/"},{"title":"SQL最適化のヒント","text":"– JP – – CN – SQL优化方面的一些技巧和方法 SQLの最適化に関するいくつかのヒントとトリック。 介绍 SQL 优化在提升系统性能中是：成本最低和优化效果最明显的途径。 如果你的团队在 SQL 优化这方面做得很优秀，对你们整个大型系统可用性方面无疑是一个质的跨越。 优化成本：硬件&gt;系统配置&gt;数据库表结构&gt;SQL 及索引。 优化效果：硬件&lt;系统配置&lt;数据库表结构 SQL优化原则 首先，对于MySQL层优化我一般遵从五个原则： 减少数据访问：设置合理的字段类型，启用压缩，通过索引访问等减少磁盘 IO。返回更少的数据：只返回需要的字段和数据分页处理，减少磁盘 IO 及网络 IO。减少交互次数：批量 DML 操作，函数存储等减少数据连接次数。减少服务器 CPU 开销：尽量减少数据库排序操作以及全表查询，减少 CPU 内存占用。利用更多资源：使用表分区，可以增加并行操作，更大限度利用 CPU 资源。总结到 SQL 优化中，就如下三点： 最大化利用索引。尽可能避免全表扫描。减少无效数据的查询。理解 SQL 优化原理 ，首先要搞清楚 SQL 执行顺序。 SELECT 语句，语法顺序如下： SELECT DISTINCT &lt;select_list&gt; FROM &lt;left_table&gt; &lt;join_type&gt; JOIN &lt;right_table&gt; ON &lt;join_condition&gt; WHERE &lt;where_condition&gt; GROUP BY &lt;group_by_list&gt; HAVING &lt;having_condition&gt; ORDER BY &lt;order_by_condition&gt; 10.LIMIT &lt;limit_number&gt; SELECT 语句，执行顺序如下： 12345678910111213141516171819202122FROM &lt;表名&gt; # 选取表，将多个表数据通过笛卡尔积变成一个表。 ON &lt;筛选条件&gt; # 对笛卡尔积的虚表进行筛选 JOIN &lt;join, left join, right join...&gt; &lt;join表&gt; # 指定join，用于添加数据到on之后的虚表中，例如left join会将左表的剩余数据添加到虚表中 WHERE &lt;where条件&gt; # 对上述虚表进行筛选 GROUP BY &lt;分组条件&gt; # 分组 &lt;SUM()等聚合函数&gt; # 用于having子句进行判断，在书写上这类聚合函数是写在having判断里面的 HAVING &lt;分组筛选&gt; # 对分组后的结果进行聚合筛选 SELECT &lt;返回数据列表&gt; # 返回的单列必须在group by子句中，聚合函数除外 DISTINCT # 数据除重 ORDER BY &lt;排序条件&gt; # 排序 LIMIT &lt;行数限制&gt; 以下 SQL 优化策略适用于数据量较大的场景下，如果数据量较小，没必要以此为准，以免画蛇添足。 避免不走索引的场景 ①尽量避免在字段开头模糊查询，会导致数据库引擎放弃索引进行全表扫描 如下： SELECT * FROM t WHERE username LIKE ‘%陈%’ 优化方式：尽量在字段后面使用模糊查询。 如下： SELECT * FROM t WHERE username LIKE ‘陈%’ 如果需求是要在前面使用模糊查询： 使用 MySQL 内置函数 INSTR(str，substr)来匹配，作用类似于 Java 中的 indexOf()，查询字符串出现的角标位置。使用 FullText 全文索引，用 match against 检索。数据量较大的情况，建议引用 ElasticSearch、Solr，亿级数据量检索速度秒级。当表数据量较少(几千条儿那种)，别整花里胡哨的，直接用 like ‘%xx%’。 ②尽量避免使用 in 和 not in，会导致引擎走全表扫描 如下： SELECT * FROM t WHERE id IN (2,3) 优化方式：如果是连续数值，可以用 between 代替。 如下： SELECT * FROM t WHERE id BETWEEN 2 AND 3 如果是子查询，可以用 exists 代替。 如下： – 不走索引 select * from A where A.id in (select id from B); – 走索引 select * from A where exists (select * from B where B.id = A.id); ③尽量避免使用 or，会导致数据库引擎放弃索引进行全表扫描 如下： SELECT * FROM t WHERE id = 1 OR id = 3 优化方式：可以用 union 代替 or。 如下： SELECT * FROM t WHERE id = 1 UNION SELECT * FROM t WHERE id = 3 ④尽量避免进行 null 值的判断，会导致数据库引擎放弃索引进行全表扫描 如下： SELECT * FROM t WHERE score IS NULL 优化方式：可以给字段添加默认值 0，对 0 值进行判断。 如下： SELECT * FROM t WHERE score = 0 ⑤尽量避免在 where 条件中等号的左侧进行表达式、函数操作，会导致数据库引擎放弃索引进行全表扫描 可以将表达式、函数操作移动到等号右侧，如下： – 全表扫描 SELECT * FROM T WHERE score/10 = 9 – 走索引 SELECT * FROM T WHERE score = 10*9 ⑥当数据量大时，避免使用 where 1=1 的条件 通常为了方便拼装查询条件，我们会默认使用该条件，数据库引擎会放弃索引进行全表扫描。 如下： SELECT username, age, sex FROM T WHERE 1=1 优化方式：用代码拼装 SQL 时进行判断，没 where 条件就去掉 where，有 where 条件就加 and。 ⑦查询条件不能用 &lt;&gt; 或者 != 使用索引列作为条件进行查询时，需要避免使用&lt;&gt;或者!=等判断条件。 如确实业务需要，使用到不等于符号，需要在重新评估索引建立，避免在此字段上建立索引，改由查询条件中其他索引字段代替。 ⑧where 条件仅包含复合索引非前置列 如下：复合(联合)索引包含 key_part1，key_part2，key_part3 三列，但 SQL 语句没有包含索引前置列&quot;key_part1&quot;，按照 MySQL 联合索引的最左匹配原则，不会走联合索引。 select col1 from table where key_part2=1 and key_part3=2 ⑨隐式类型转换造成不使用索引 如下 SQL 语句由于索引对列类型为 varchar，但给定的值为数值，涉及隐式类型转换，造成不能正确走索引。 select col1 from table where col_varchar=123; ⑩order by 条件要与 where 中条件一致，否则 order by 不会利用索引进行排序 如下： – 不走age索引 SELECT * FROM t order by age; – 走age索引 SELECT * FROM t where age &gt; 0 order by age; 对于上面的语句，数据库的处理顺序是： 第一步：根据 where 条件和统计信息生成执行计划，得到数据。第二步：将得到的数据排序。当执行处理数据(order by)时，数据库会先查看第一步的执行计划，看 order by 的字段是否在执行计划中利用了索引。如果是，则可以利用索引顺序而直接取得已经排好序的数据。如果不是，则重新进行排序操作。第三步：返回排序后的数据。当 order by 中的字段出现在 where 条件中时，才会利用索引而不再二次排序，更准确的说，order by 中的字段在执行计划中利用了索引时，不用排序操作。 这个结论不仅对 order by 有效，对其他需要排序的操作也有效。比如 group by 、union 、distinct 等。 ⑪正确使用 hint 优化语句 MySQL 中可以使用 hint 指定优化器在执行时选择或忽略特定的索引。 一般而言，处于版本变更带来的表结构索引变化，更建议避免使用 hint，而是通过 Analyze table 多收集统计信息。 但在特定场合下，指定 hint 可以排除其他索引干扰而指定更优的执行计划： USE INDEX 在你查询语句中表名的后面，添加 USE INDEX 来提供希望 MySQL 去参考的索引列表，就可以让 MySQL 不再考虑其他可用的索引。例子: SELECT col1 FROM table USE INDEX (mod_time, name)… IGNORE INDEX 如果只是单纯的想让 MySQL 忽略一个或者多个索引，可以使用 IGNORE INDEX 作为 Hint。例子: SELECT col1 FROM table IGNORE INDEX (priority) … FORCE INDEX 为强制 MySQL 使用一个特定的索引，可在查询中使用FORCE INDEX 作为 Hint。例子: SELECT col1 FROM table FORCE INDEX (mod_time) … 在查询的时候，数据库系统会自动分析查询语句，并选择一个最合适的索引。但是很多时候，数据库系统的查询优化器并不一定总是能使用最优索引。 如果我们知道如何选择索引，可以使用 FORCE INDEX 强制查询使用指定的索引。 例如： SELECT * FROM students FORCE INDEX (idx_class_id) WHERE class_id = 1 ORDER BY id DESC; SELECT 语句其他优化 ①避免出现 select * 首先，select * 操作在任何类型数据库中都不是一个好的 SQL 编写习惯。 使用 select * 取出全部列，会让优化器无法完成索引覆盖扫描这类优化，会影响优化器对执行计划的选择，也会增加网络带宽消耗，更会带来额外的 I/O，内存和 CPU 消耗。 建议提出业务实际需要的列数，将指定列名以取代 select *。具体详情见《为什么大家都说SELECT * 效率低》 ②避免出现不确定结果的函数 特定针对主从复制这类业务场景。由于原理上从库复制的是主库执行的语句，使用如 now()、rand()、sysdate()、current_user() 等不确定结果的函数很容易导致主库与从库相应的数据不一致。 另外不确定值的函数，产生的 SQL 语句无法利用 query cache。 ③多表关联查询时，小表在前，大表在后 在 MySQL 中，执行 from 后的表关联查询是从左往右执行的(Oracle 相反)，第一张表会涉及到全表扫描。 所以将小表放在前面，先扫小表，扫描快效率较高，在扫描后面的大表，或许只扫描大表的前 100 行就符合返回条件并 return 了。 例如：表 1 有 50 条数据，表 2 有 30 亿条数据;如果全表扫描表 2，你品，那就先去吃个饭再说吧是吧。 ④使用表的别名 当在 SQL 语句中连接多个表时，请使用表的别名并把别名前缀于每个列名上。这样就可以减少解析的时间并减少哪些友列名歧义引起的语法错误。 ⑤用 where 字句替换 HAVING 字句 避免使用 HAVING 字句，因为 HAVING 只会在检索出所有记录之后才对结果集进行过滤，而 where 则是在聚合前刷选记录，如果能通过 where 字句限制记录的数目，那就能减少这方面的开销。 HAVING 中的条件一般用于聚合函数的过滤，除此之外，应该将条件写在 where 字句中。 where 和 having 的区别：where 后面不能使用组函数。 ⑥调整 Where 字句中的连接顺序 MySQL 采用从左往右，自上而下的顺序解析 where 子句。根据这个原理，应将过滤数据多的条件往前放，最快速度缩小结果集。 增删改 DML 语句优化 ①大批量插入数据 如果同时执行大量的插入，建议使用多个值的 INSERT 语句(方法二)。这比使用分开 INSERT 语句快(方法一)，一般情况下批量插入效率有几倍的差别。 方法一： insert into T values(1,2); insert into T values(1,3); insert into T values(1,4); 方法二： Insert into T values(1,2),(1,3),(1,4); 选择后一种方法的原因有三： 减少 SQL 语句解析的操作，MySQL 没有类似 Oracle 的 share pool，采用方法二，只需要解析一次就能进行数据的插入操作。在特定场景可以减少对 DB 连接次数。 SQL 语句较短，可以减少网络传输的 IO。 ②适当使用 commit 适当使用 commit 可以释放事务占用的资源而减少消耗，commit 后能释放的资源如下： 事务占用的 undo 数据块。事务在 redo log 中记录的数据块。释放事务施加的，减少锁争用影响性能。特别是在需要使用 delete 删除大量数据的时候，必须分解删除量并定期 commit。 ③避免重复查询更新的数据 针对业务中经常出现的更新行同时又希望获得改行信息的需求，MySQL 并不支持 PostgreSQL 那样的 UPDATE RETURNING 语法，在 MySQL 中可以通过变量实现。 例如，更新一行记录的时间戳，同时希望查询当前记录中存放的时间戳是什么? 简单方法实现： Update t1 set time=now() where col1=1; Select time from t1 where id =1; 使用变量，可以重写为以下方式： Update t1 set time=now () where col1=1 and @now: = now (); Select @now; 前后二者都需要两次网络来回，但使用变量避免了再次访问数据表，特别是当 t1 表数据量较大时，后者比前者快很多。 ④查询优先还是更新(insert、update、delete)优先 MySQL 还允许改变语句调度的优先级，它可以使来自多个客户端的查询更好地协作，这样单个客户端就不会由于锁定而等待很长时间。改变优先级还可以确保特定类型的查询被处理得更快。 我们首先应该确定应用的类型，判断应用是以查询为主还是以更新为主的，是确保查询效率还是确保更新的效率，决定是查询优先还是更新优先。 下面我们提到的改变调度策略的方法主要是针对只存在表锁的存储引擎，比如 MyISAM 、MEMROY、MERGE，对于 Innodb 存储引擎，语句的执行是由获得行锁的顺序决定的。 MySQL 的默认的调度策略可用总结如下： 写入操作优先于读取操作。对某张数据表的写入操作某一时刻只能发生一次，写入请求按照它们到达的次序来处理。对某张数据表的多个读取操作可以同时地进行。 MySQL 提供了几个语句调节符，允许你修改它的调度策略： LOW_PRIORITY 关键字应用于 DELETE、INSERT、LOAD DATA、REPLACE 和 UPDATE。 HIGH_PRIORITY 关键字应用于 SELECT 和 INSERT 语句。 DELAYED 关键字应用于 INSERT 和 REPLACE 语句。如果写入操作是一个 LOW_PRIORITY(低优先级)请求，那么系统就不会认为它的优先级高于读取操作。 在这种情况下，如果写入者在等待的时候，第二个读取者到达了，那么就允许第二个读取者插到写入者之前。 只有在没有其它的读取者的时候，才允许写入者开始操作。这种调度修改可能存在 LOW_PRIORITY 写入操作永远被阻塞的情况。 SELECT 查询的 HIGH_PRIORITY(高优先级)关键字也类似。它允许 SELECT 插入正在等待的写入操作之前，即使在正常情况下写入操作的优先级更高。 另外一种影响是，高优先级的 SELECT 在正常的 SELECT 语句之前执行，因为这些语句会被写入操作阻塞。 如果希望所有支持 LOW_PRIORITY 选项的语句都默认地按照低优先级来处理，那么请使用–low-priority-updates 选项来启动服务器。 通过使用 INSERTHIGH_PRIORITY 来把 INSERT 语句提高到正常的写入优先级，可以消除该选项对单个 INSERT 语句的影响。 查询条件优化 ①对于复杂的查询，可以使用中间临时表暂存数据 ②优化 group by 语句 默认情况下，MySQL 会对 GROUP BY 分组的所有值进行排序，如 “GROUP BY col1，col2，…;” 查询的方法如同在查询中指定 “ORDER BY col1，col2，…;” 。 如果显式包括一个包含相同的列的 ORDER BY 子句，MySQL 可以毫不减速地对它进行优化，尽管仍然进行排序。 因此，如果查询包括 GROUP BY 但你并不想对分组的值进行排序，你可以指定 ORDER BY NULL 禁止排序。 例如： SELECT col1, col2, COUNT(*) FROM table GROUP BY col1, col2 ORDER BY NULL ; ③优化 join 语句 MySQL 中可以通过子查询来使用 SELECT 语句来创建一个单列的查询结果，然后把这个结果作为过滤条件用在另一个查询中。 使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的 SQL 操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，有些情况下，子查询可以被更有效率的连接(JOIN)…替代。 例子：假设要将所有没有订单记录的用户取出来，可以用下面这个查询完成： ELECT col1 FROM customerinfo WHERE CustomerID NOT in (SELECT CustomerID FROM salesinfo ) 如果使用连接(JOIN)…来完成这个查询工作，速度将会有所提升。 尤其是当 salesinfo 表中对 CustomerID 建有索引的话，性能将会更好，查询如下： SELECT col1 FROM customerinfo LEFT JOIN salesinfoON customerinfo.CustomerID=salesinfo.CustomerID WHERE salesinfo.CustomerID IS NULL 连接(JOIN)…之所以更有效率一些，是因为 MySQL 不需要在内存中创建临时表来完成这个逻辑上的需要两个步骤的查询工作。 ④优化 union 查询 MySQL 通过创建并填充临时表的方式来执行 union 查询。除非确实要消除重复的行，否则建议使用 union all。 原因在于如果没有 all 这个关键词，MySQL 会给临时表加上 distinct 选项，这会导致对整个临时表的数据做唯一性校验，这样做的消耗相当高。 高效： SELECT COL1, COL2, COL3 FROM TABLE WHERE COL1 = 10 UNION ALL SELECT COL1, COL2, COL3 FROM TABLE WHERE COL3= ‘TEST’; 低效： SELECT COL1, COL2, COL3 FROM TABLE WHERE COL1 = 10 UNION SELECT COL1, COL2, COL3 FROM TABLE WHERE COL3= ‘TEST’; ⑤拆分复杂 SQL 为多个小 SQL，避免大事务 如下： 简单的 SQL 容易使用到 MySQL 的 QUERY CACHE。减少锁表时间特别是使用 MyISAM 存储引擎的表。可以使用多核 CPU。 ⑥使用 truncate 代替 delete 当删除全表中记录时，使用 delete 语句的操作会被记录到 undo 块中，删除记录也记录 binlog。 当确认需要删除全表时，会产生很大量的 binlog 并占用大量的 undo 数据块，此时既没有很好的效率也占用了大量的资源。 使用 truncate 替代，不会记录可恢复的信息，数据不能被恢复。也因此使用 truncate 操作有其极少的资源占用与极快的时间。另外，使用 truncate 可以回收表的水位，使自增字段值归零。 ⑦使用合理的分页方式以提高分页效率 使用合理的分页方式以提高分页效率 针对展现等分页需求，合适的分页方式能够提高分页的效率。 案例 1： select * from t where thread_id = 10000 and deleted = 0 order by gmt_create asc limit 0, 15; 上述例子通过一次性根据过滤条件取出所有字段进行排序返回。数据访问开销=索引 IO+索引全部记录结果对应的表数据 IO。 因此，该种写法越翻到后面执行效率越差，时间越长，尤其表数据量很大的时候。 适用场景：当中间结果集很小(10000 行以下)或者查询条件复杂(指涉及多个不同查询字段或者多表连接)时适用。 案例 2： select t.* from (select id from t where thread_id = 10000 and deleted = 0 order by gmt_create asc limit 0, 15) a, t where a.id = t.id; 上述例子必须满足 t 表主键是 id 列，且有覆盖索引 secondary key：(thread_id, deleted, gmt_create)。 通过先根据过滤条件利用覆盖索引取出主键 id 进行排序，再进行 join 操作取出其他字段。 数据访问开销=索引 IO+索引分页后结果(例子中是 15 行)对应的表数据 IO。因此，该写法每次翻页消耗的资源和时间都基本相同，就像翻第一页一样。 适用场景：当查询和排序字段(即 where 子句和 order by 子句涉及的字段)有对应覆盖索引时，且中间结果集很大的情况时适用。 建表优化 ①在表中建立索引，优先考虑 where、order by 使用到的字段。 ②尽量使用数字型字段(如性别，男：1 女：2)，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。 这是因为引擎在处理查询和连接时会 逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。 ③查询数据量大的表 会造成查询缓慢。主要的原因是扫描行数过多。这个时候可以通过程序，分段分页进行查询，循环遍历，将结果合并处理进行展示。 要查询 100000 到 100050 的数据，如下： SELECT * FROM (SELECT ROW_NUMBER() OVER(ORDER BY ID ASC) AS rowid,* FROM infoTab)t WHERE t.rowid &gt; 100000 AND t.rowid &lt;= 100050 ④用 varchar/nvarchar 代替 char/nchar。 尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。 不要以为 NULL 不需要空间，比如：char(100) 型，在字段建立时，空间就固定了， 不管是否插入值(NULL 也包含在内)，都是占用 100 个字符的空间的，如果是 varchar 这样的变长字段， null 不占用空间。","link":"/sql-optimization-tips/"},{"title":"AWSラーニングノート","text":"本記事について aws関連のチュートリアルや公式サイトを見てより良いですが、インターネットの残りの部分はあまりにも断片的ですが、公式サイトのホワイトペーパーは、英語の多くは、唯一の勉強に多くの時間を費やすことができます。 AWSとは何か、その具体的サービスの紹介 AWS（Amazon Web Services）は、Amazonが提供するクラウドコンピューティングプラットフォームであり、個人、企業、および組織にさまざまなクラウドサービスを提供しています。AWSのサービスは、グローバルに配置されたデータセンターネットワークを基盤にしており、顧客は必要なサービスを柔軟に利用することができます。これにより、従来のインフラ構築や管理の複雑さとコストを回避することができます。 AWSは、コンピューティング、ストレージ、データベース、機械学習、インターネット・オブ・シングス（IoT）、セキュリティ、ネットワーキング、開発ツールなど、さまざまな領域で多様なサービスを提供しています。以下は、主なAWSのサービスの一部です： コンピューティングサービス Elastic Compute Cloud（EC2）：可変長の仮想サーバーインスタンスを提供し、必要に応じて計算リソースを拡張または縮小できます。 AWS Lambda：サーバーレスコンピューティングサービスで、サーバーの管理なしにコードを実行し、実際の実行時間に応じて課金されます。 ストレージサービス Simple Storage Service（S3）：高度にスケーラブルで耐久性のあるオブジェクトストレージサービスで、画像、動画、文書などあらゆるデータを保存・取得できます。大量のデータの格納やバックアップに適しています。 Elastic Block Store（EBS）：EC2インスタンスに永続的なブロックレベルのストレージを提供し、データベース、アプリケーション、およびオペレーティングシステムに使用されます。 データベースサービス Amazon Relational Database Service（RDS）：リレーショナルデータベースの簡単なセットアップと管理を提供します。MySQL、PostgreSQL、Microsoft SQL Serverなど、複数のリレーショナルデータベースをサポートしています。RDSはデータベースのセットアップと管理を簡素化し、高可用性と自動バックアップを提供します。 Amazon DynamoDB：全管理型のNoSQLデータベースサービスで、高度にスケーラブルで低遅延のパフォーマンスを提供します。 ネットワーキングサービス Virtual Private Cloud（VPC）：AWS内でカスタム仮想ネットワーク環境を作成し、アプリケーションリソースを隔離・保護する機能を提供します。 Elastic Load Balancing（ELB）：負荷分散サービスで、トラフィックを複数のEC2インスタンスに自動的に分散し、アプリケーションの信頼性とスケーラビリティを向上させます。 コンテンツ配信サービス Amazon CloudFrontは、高速でセキュアなコンテンツ配信ネットワークを提供します。 インターネットオブシングス（IoT）サービス： AWS IoT Core：大量の物联网デバイスとの接続、管理、データ収集をサポートする包括的なサービスです。IoTデバイスの接続、管理、およびデータ収集を実現します。大規模な物联网デバイスからのデータの接続、管理、収集をサポートする包括的な物联网サービスです。 セキュリティサービス AWS Identity and Access Management（IAM）：ユーザー、グループ、および権限の管理に使用され、AWSリソースへのアクセスを制御します。 AWS Key Management Service（KMS）：暗号化キーの作成と管理を支援し、データの安全な保管と転送を確保します。 機械学習サービス Amazon Machine Learning（Amazon ML）やAmazon SageMakerなど、機械学習モデルの構築と展開をサポートします。 人工智能サービス Amazon Polly：テキストを音声に変換するサービスで、自然な音声を提供します。 Amazon Rekognition：画像とビデオの分析サービスで、オブジェクト、シーン、および顔を認識・分析します。 これらのサービスは、AWSの一部であり、さまざまなビジネスニーズに合わせて使用できる多様なサービスが提供されています。AWSの利用により、ユーザーは高度にスケーラブルなアプリケーションを迅速に構築し、運用コストを削減し、イノベーションとビジネスの発展に集中できるようになります。 その他 Amazon DynamoDB 是什么 Amazon DynamoDB 是亚马逊公司提供的一种全托管的 NoSQL 数据库服务。它被设计用于处理大规模的分布式应用程序，提供了高可用性、高性能和可扩展性。 DynamoDB 是一个键值存储系统，可以存储和检索数据，并且可以根据需要进行自动扩展。它支持结构化数据、半结构化数据和文档数据，并提供了强大的查询功能。DynamoDB 以分区和复制的方式来实现数据的可扩展性和高可用性，它将数据分布在多个分区中，并将数据副本复制到多个可用区域中，从而确保数据的可靠性和持久性。 DynamoDB 提供了灵活的数据模型，允许开发人员根据应用程序的需求定义数据结构。它支持快速读取和写入操作，并能够处理大量的并发请求。此外，DynamoDB 还提供了一些高级功能，如自动缓存、自动备份和恢复、数据流和触发器等。 使用 DynamoDB，开发人员可以构建具有低延迟、高可扩展性和高可靠性的应用程序。它适用于各种应用场景，包括 Web 应用程序、移动应用程序、游戏、物联网设备和大数据分析等。 需要注意的是，DynamoDB 是亚马逊的商业产品，使用它可能需要支付相应的费用。详细的定价信息可以在亚马逊的官方网站上找到。 公司每月对 AWS 基础设施进行维护。在这些维护操作期间，公司需要在多个 AWS 区域轮换其 Amazon RDS for MySQL 数据库凭证。 哪种解决方案能够以最少的运营开销满足这些要求？ 对于在多个 AWS 区域轮换 Amazon RDS for MySQL 数据库凭证，以下是一种解决方案，以最少的运营开销满足要求： 使用 AWS Secrets Manager 进行凭证管理和轮换。AWS Secrets Manager 是一项托管服务，用于安全地存储和管理敏感凭证，如数据库密码、API 密钥和其他访问凭证。 以下是步骤： 创建 AWS Secrets Manager 密钥：在 AWS Secrets Manager 中创建一个“Secret”，将 Amazon RDS for MySQL 数据库凭证作为密钥的值存储在该“Secret”中。 配置轮换策略：AWS Secrets Manager 允许你配置轮换策略，定义凭证何时应该轮换。你可以根据需要设置一个每月轮换的计划。 配置自动轮换：为了满足自动轮换要求，可以使用 AWS Lambda 来触发轮换操作。你可以编写一个 Lambda 函数，该函数在预定的时间间隔内触发并调用 AWS Secrets Manager API，以更新存储在“Secret”中的数据库凭证。 配置多个 AWS 区域：AWS Secrets Manager 支持多个 AWS 区域。你可以在不同的区域中创建相同的“Secret”，并在每个区域中使用相应的数据库凭证。 通过使用 AWS Secrets Manager 进行凭证管理和轮换，你可以在不同的 AWS 区域中轮换数据库凭证，同时保持凭证的安全性和自动化。这种解决方案可以减少手动操作和管理开销，提供一致和可靠的凭证轮换过程。 什么是轮换，为什么要轮换 在安全和凭证管理的上下文中，&quot;轮换&quot;是指定期更换敏感凭证（如密码、密钥、令牌等）的过程。这是一种安全最佳实践，旨在减少潜在的安全风险和减轻凭证泄露的影响。 以下是为什么要进行凭证轮换的主要原因： 增加安全性：通过定期更换凭证，可以降低被未经授权访问或滥用的风险。如果凭证不断变化，即使旧凭证被泄露，攻击者也无法持续访问和利用系统。 响应潜在威胁：如果存在潜在的威胁或怀疑凭证已经被泄露，及时轮换凭证可以防止攻击者进一步利用已获取的凭证。 遵循最小权限原则：凭证轮换是将最小权限原则应用于安全凭证管理的一种方式。通过定期更换凭证，可以限制长期凭证的使用，并确保只有授权用户拥有有效的凭证。 合规要求：许多合规标准和法规要求定期更换敏感凭证。通过执行凭证轮换，可以满足合规性要求，并为审计和合规性审核提供证据。 恢复数据的保护：对于数据加密场景，定期更换加密密钥可以提高数据的安全性。如果加密密钥被泄露，更换密钥可以防止对已加密数据的未经授权访问。 凭证轮换是一项重要的安全实践，确保敏感凭证的安全性和完整性。它应该作为整体安全策略中的一部分，并与其他安全措施结合使用，以提供最佳的安全保护。","link":"/aws-learning-note/"},{"title":"CI&#x2F;CD ハンズオン","text":"","link":"/cicd-handson/"},{"title":"Springでクロスドメインアクセスを実現する方法","text":"Spring でのクロスドメイン アクセスの問題を解決するには、さまざまな方法があります。以下に、いくつかの一般的な解決策と対応するコード例を示します。 @CrossOrigin アノテーションを使用します Spring MVC コントローラー メソッドに @CrossOrigin アノテーションを追加すると、特定のオリジンがドメインを越えてメソッドにアクセスできるようになります。 12345678910111213import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class MyController { @CrossOrigin(origins = &quot;http://example.com&quot;) @GetMapping(&quot;/data&quot;) public String getData() { return &quot;Some data&quot;; }} WebMvcConfigurer を使用して構成します Spring Boot では、WebMvcConfigurer インターフェイスを実装することで、クロスドメイン アクセスをグローバルに構成できます。 1234567891011121314151617import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.config.annotation.CorsRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;@Configurationpublic class CorsConfig implements WebMvcConfigurer { @Override public void addCorsMappings(CorsRegistry registry) { registry.addMapping(&quot;/api/**&quot;) .allowedOrigins(&quot;http://example.com&quot;) .allowedMethods(&quot;GET&quot;, &quot;POST&quot;) .allowedHeaders(&quot;header1&quot;, &quot;header2&quot;) .allowCredentials(true) .maxAge(3600); }} フィルターフィルターを使用します Filter フィルターを作成し、その中にクロスドメイン関連の応答ヘッダー情報を構成します。 12345678910111213141516171819202122import javax.servlet.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;public class CorsFilter implements Filter { @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { HttpServletResponse httpResponse = (HttpServletResponse) response; HttpServletRequest httpRequest = (HttpServletRequest) request; httpResponse.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://example.com&quot;); httpResponse.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;GET,POST&quot;); httpResponse.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;header1,header2&quot;); httpResponse.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;); httpResponse.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;); chain.doFilter(request, response); }} 上記は、Spring でクロスドメイン アクセスの問題を解決するための一般的な方法をいくつか示していますが、どの方法を選択するかは、プロジェクトのニーズと設計によって異なります。","link":"/spring-cross-domain-achive/"},{"title":"内部クラスのモッキング・ソリューション","text":"本記事について ava内部クラスに関する クラス内の内部クラスが存在すると、PowerMockや通常のMockitoを使用できなくなることがあります。 Javaでは、内部クラス（inner class）は別のクラス内に定義されたクラスです。これらの内部クラスは静的（static）または非静的である場合があります。内部クラスの存在は、PowerMockや通常のMockitoなどのモッキングフレームワークの使用に影響を与える可能性があります。 通常、PowerMockやMockitoは、内部クラスのモッキングを正しく処理できます。ただし、内部クラスが非静的である場合、モッキングフレームワークを正しく使用するためには、より多くの設定や処理が必要になる場合があります。これには、アクセス権限、コンストラクタ、モックオブジェクトの作成などが含まれる場合があります。 モッキングフレームワークを使用する際に内部クラスに関連する問題が発生した場合は、フレームワークのドキュメントを参照したり、関連するヘルプリソースを探したりして、正しい設定と使用方法を取得することができます。 内部クラスがprivateの場合 内部クラスがprivateであると、モッキングフレームワークを使用する際にいくつかの制限や問題が生じる可能性があります。私有内部クラスのアクセス権限が制限されているため、モッキングフレームワークはこれらのクラスの振る舞いを模倣するために特別な処理が必要です。 私有内部クラスに関しては、以下の点を考慮することができます： リフレクションの使用： Javaのリフレクションメカニズムを使用して、私有内部クラスにアクセスして操作し、テスト中に模倣することができます。この方法はやや煩雑で、エレガントではありませんが、問題を解決することができます。 設計の変更： 可能であれば、私有内部クラスをモックする必要がないようにコードを再設計することを検討してください。これは、内部クラスを独立したクラスとして抽出したり、アクセス権限を変更してテスト中にアクセス可能にしたりすることを意味します。 PowerMockの使用： PowerMockは、私有メソッドやコンストラクタなどを処理するより強力なモッキング機能を提供しています。PowerMockを使用して、私有内部クラスの振る舞いを模倣することができます。 テストカバレッジの考慮： 内部クラスの実装がシステムの振る舞いに影響を与えない場合は、それを個別にユニットテストする代わりに、外部クラスのテストに依存してその機能をカバーすることができます。 どの方法を採用するかは慎重に考える必要があります。そして、テストがコードのロジックを十分にカバーしていることを確認する必要があります。 内部クラスをモックする方法 私有な内部クラスをモックしたい場合、PowerMockitoを使用することを検討してください。これは、MockitoとPowerMockを組み合わせたものであり、私有メソッドやコンストラクタのモックなど、より強力なモッキング機能を提供しています。 以下は、PowerMockitoを使用して私有内部クラスをモックする方法を示す簡単な例です。 123456789101112131415161718192021222324252627javaCopy codeimport org.junit.Test;import org.junit.runner.RunWith;import org.powermock.core.classloader.annotations.PrepareForTest;import org.powermock.modules.junit4.PowerMockRunner;import static org.mockito.Mockito.*;@RunWith(PowerMockRunner.class)@PrepareForTest(OuterClass.class)public class OuterClassTest { @Test public void testPrivateInnerClass() throws Exception { // Mock InnerClass InnerClass mockedInner = mock(InnerClass.class); // Mock OuterClass and return mocked InnerClass OuterClass outerMock = PowerMockito.spy(new OuterClass()); PowerMockito.when(outerMock, &quot;createInnerInstance&quot;).thenReturn(mockedInner); // Test the method that uses InnerClass outerMock.methodThatUsesInnerClass(); // Verify any interactions as needed verify(mockedInner).someMethod(); }} この例では： @RunWith(PowerMockRunner.class) および @PrepareForTest(OuterClass.class) アノテーションは、PowerMockitoがOuterClassを事前処理することを示し、内部クラスをモック化することを可能にします。 PowerMockito.spy(new OuterClass()) は、OuterClassのスパイオブジェクトを作成し、内部メソッドをモック化できるようにします。 PowerMockito.when(outerMock, &quot;createInnerInstance&quot;).thenReturn(mockedInner) は、createInnerInstance() メソッドが呼び出されたときに、期待されるモックされたInnerClassオブジェクトを返すように指定します。 最後に、outerMock.methodThatUsesInnerClass() を呼び出して、OuterClassでInnerClassを使用するメソッドをテストし、InnerClassの特定のメソッドが呼び出されたかどうかを検証します。 MavenやGradleの設定ファイルにPowerMockitoの依存関係を追加することを忘れないでください。 この例では、PowerMockitoを使用して私有内部クラスをモックする方法が示されていますが、PowerMockitoの使用には注意が必要であり、テストの複雑さが増加する可能性があるため、慎重に使用する必要があります。 PowerMockito.spy(new OuterClass()) 创建了一个 OuterClass 的 Spy 对象，使我们能够 Mock 内部的方法。 PowerMockito.when(outerMock, &quot;createInnerInstance&quot;).thenReturn(mockedInner) 指定了当 createInnerInstance() 方法被调用时，应该返回我们预期的 Mocked InnerClass 对象。 最后，我们调用 outerMock.methodThatUsesInnerClass() 来测试 OuterClass 中使用 InnerClass 的方法，并验证了 InnerClass 中的某些方法是否被调用。","link":"/internal-class-mocking-solution/"},{"title":"開発によく使われるツールやwebサイト","text":"開発ツール VisualCode VisualStudio 2022 2017 2012 IDEA Eclipse &amp; Eclipse Spring Tool Suite（STS） その他のツール コード比較：WinMerge テキストエディタ：Sakura Typora DBツール：A5M2 Navicat MySQLWorkbench ログ解析ツール：ELK Sentry APIツール：Swagger Postman サーバ：Apache Tomcat コンテナツール：Dcoker WEBデザインツール：figma 図作り：drawio（AWSフローチャート） 印鑑： コミュニケーション Ipmsg Slack Teams プロジェクト管理ツール Redmine Backlog Notion Jira コード管理ツール GIT：github gitlab SVN：TortoiseSVN TFS：VisualStudio組み込み ウェブサイト 快速免费下载Youtube字幕 https://downsub.com/zh/site/youtube/ 在URL之前添加 subtitle.to/ 図作り https://app.diagrams.net/ ランダム生成時間 https://www.lddgo.net/string/random-date 正規表見 https://regex101.com/ ひらがなカタカナ http://www.hipenpal.com/tool/japanese-hiragana-to-katakana-converter-in-simplified-chinese.php エクセルからhtmlへ https://tableconvert.com/zh-cn/excel-to-html markdwon編集する Hexo博客的Markdown语法 Linux command https://wangchujiang.com/linux-command/ Linux性能监控工具 https://www.brendangregg.com/linuxperf.html codesheet 工具汇总网站 https://github.com/rd2coding/Road2Coding?tab=readme-ov-file 菜鸟工具 https://www.jyshare.com/ 程序员的 Mac 高效手册 https://yuzhouwan.com/posts/190101/ 程序员开发常用速查手册 https://github.com/hbulpf/devbook?tab=readme-ov-file 为开发人员分享快速参考备忘清单(速查表) https://github.com/jaywcjlove/reference?spm=a2c6h.12873639.article-detail.10.3d1d3d43ErqhWt","link":"/development-usually-use-websites-and-tool/"},{"title":"Spring BootでAmazon S3にファイルをアップロードする方法","text":"この記事について Amazon Simple Storage Service（Amazon S3）は、スケーラブルでセキュアかつ高性能なオブジェクトストレージを提供するAmazon Web Servicesのサービスです。この記事では、Spring Bootを使用してAmazon S3にファイルをアップロードする方法について説明します。 前提条件 Javaについての基本的な理解があること。 コンピュータにJava Development Kitがインストールされていること。 好きなIDEがあること。私は[Intellij Community Edition]を使用していますが、無料です。 具体的な流れ Amazon Web Servicesアカウント アプリケーションの作成を開始する前に、[AWS Management Console]にアクセスしてアカウントを作成してください。ここで、さまざまなAWSサービスをテストできる12か月間の無料アクセスを取得できます。 登録後、[AWS Management Console]に移動し、提供されている検索ボックスでAmazon S3を検索します。 Amazon S3バケット 上記の手順でAmazon S3を選択したら、新しいS3バケットを作成して、アプリケーションからアップロードされるファイルを保存するために使用します。 このバケットをspring-amazon-storageと名前を付け、すべての他の設定をデフォルトのままにして、バケットを作成します。 アクセスキーとシークレットキー マイセキュリティ資格情報ナビゲーションメニューから、新しいアクセスキーを作成します。生成されたアクセスキーとシークレットキーをコピーしておきます。これらを使用して、作成するアプリケーションからバケットにアクセスします。 アプリケーションの作成 アプリケーションを作成するために、spring initializrを使用します。spring initializrにアクセスし、新しいSpring Bootアプリケーションを作成し、h2、spring boot dev tools、spring data jpa、およびspring webを依存関係として追加し、プロジェクトを生成します。 ダウンロードしたプロジェクトを解凍し、お気に入りのIDEで開きます。 Amazon SDKの依存関係を追加する Amazon SDKを使用することで、アプリケーションからさまざまなAmazonサービスとのやり取りが可能になります。pom.xmlファイルにAmazon SDKの依存関係を追加します。 123456&lt;!-- https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk --&gt;&lt;dependency&gt; &lt;groupId&gt;com.amazonaws&lt;/groupId&gt; &lt;artifactId&gt;aws-java-sdk&lt;/artifactId&gt; &lt;version&gt;1.11.931&lt;/version&gt;&lt;/dependency&gt; プロジェクトの構造: 1234567891011121314config/|--- AmazonConfig.java|--- BucketName.javacontrollers/|--- TodoController.javadomain/|--- Todo.javarepositories/|--- TodoRepository.javaservice/|--- FileStore.java|--- TodoService.java|--- TodoServiceImpl.javaSpringAmazonApplication.java 配置パッケージ 配置パッケージには、Amazon S3を検証するための1つのJavaファイルと、バケット名を含む別のJavaファイルがあります。 12345678910111213141516171819202122import com.amazonaws.auth.AWSCredentials;import com.amazonaws.auth.AWSStaticCredentialsProvider;import com.amazonaws.auth.BasicAWSCredentials;import com.amazonaws.services.s3.AmazonS3;import com.amazonaws.services.s3.AmazonS3ClientBuilder;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configurationpublic class AmazonConfig { @Bean public AmazonS3 s3() { AWSCredentials awsCredentials = new BasicAWSCredentials(&quot;accessKey&quot;, &quot;secretKey&quot;); return AmazonS3ClientBuilder .standard() .withRegion(&quot;ap-south-1&quot;) .withCredentials(new AWSStaticCredentialsProvider(awsCredentials)) .build(); }} 上記の AmazonConfig クラスは @Configuration アノテーションで注釈付けされており、Springコンテキストに提供される設定クラスとして機能します。 AWS Management Consoleから取得したAWS認証情報を使用して、pom.xml に追加したAmazon SDKの AmazonS3ClientBuilder を使用して、S3に認証します。 123456789import lombok.AllArgsConstructor;import lombok.Getter;@AllArgsConstructor@Getterpublic enum BucketName { TODO_IMAGE(&quot;spring-amazon-storage&quot;); private final String bucketName;} 上記のBucketName列挙型では、AWS Management Consoleで事前に作成したバケットの名前を渡します。このバケットは、すべてのファイルアップロードを保存するために使用されます。 @AllArgsConstructorアノテーションは、列挙型内の変数を含むコンストラクタを生成します。bucketName @Getterアノテーションは、列挙型内の変数に対してgetterを生成します。bucketName ドメインパッケージ このパッケージには、Todoモデルがあります。このモデルは、データベース内のTodoを表します。 123456789101112131415@Data@AllArgsConstructor@NoArgsConstructor@Builder@Entitypublic class Todo { @Id @GeneratedValue private Long id; private String title; private String description; private String imagePath; private String imageFileName;} @Data アノテーションは、Todo クラスに、getters、setters、toString、equals メソッドを生成します。 コンピュータプログラミングにおいて、@Data アノテーションは通常、Javaクラス内のgetter、setterメソッド、equals、hashCode、toStringなどのメソッドを自動生成するためのアノテーションを指します。これは通常、LombokなどのJavaライブラリと共に使用されます。 具体的には、@Data アノテーションは以下のことができます： getterとsetterメソッドの自動生成：@Data アノテーションを使用することで、getterとsetterメソッドを手動で記述する必要がありません。コンパイラはこれらのメソッドを自動生成し、コード量を減らし、開発効率を向上させます。 equalsとhashCodeメソッドの自動生成：@Data アノテーションは、equalsとhashCodeメソッドも自動生成することができます。これはオブジェクトの比較やハッシュ処理に非常に便利です。 toStringメソッドの自動生成：@Data アノテーションは、toStringメソッドも生成することができます。このメソッドは、オブジェクトの文字列表現を出力するために使用され、デバッグやログ記録が容易になります。 全体的に言えば、@Data アノテーションはJavaクラス内の冗長なコードを減らし、開発効率を向上させ、コードをより簡潔で読みやすくします。 @AllArgsConstructor アノテーションは、Todo クラスに、すべての引数を持つコンストラクタを生成します。 @NoArgsConstructor アノテーションは、Todo クラスに、引数なしのコンストラクタを生成します。 @Builder アノテーションは、Todo クラスに、ビルダーパターンを作成します。 @Entity アノテーションは、Todo クラスをデータベースエンティティとしてマークします。 @Id アノテーションは、id フィールドをデータベースの主キーとしてマークします。 @GeneratedValue アノテーションは、id と todo フィールドを新しい Todo インスタンスがデータベースに保存されるたびに自動的に増分されるようにします。 リポジトリパッケージ このパッケージには、JPAのCrudRepository インターフェースを拡張して、さまざまなデータベースクエリを実行できるリポジトリクラスがあります。 123public interface TodoRepository extends CrudRepository&lt;Todo, Long&gt; { Todo findByTitle(String title);} サービスパッケージ 123456789101112131415161718192021222324252627282930313233@AllArgsConstructor@Servicepublic class FileStore { private final AmazonS3 amazonS3; public void upload(String path, String fileName, Optional&lt;Map&lt;String, String&gt;&gt; optionalMetaData, InputStream inputStream) { ObjectMetadata objectMetadata = new ObjectMetadata(); optionalMetaData.ifPresent(map -&gt; { if (!map.isEmpty()) { map.forEach(objectMetadata::addUserMetadata); } }); try { amazonS3.putObject(path, fileName, inputStream, objectMetadata); } catch (AmazonServiceException e) { throw new IllegalStateException(&quot;Failed to upload the file&quot;, e); } } public byte[] download(String path, String key) { try { S3Object object = amazonS3.getObject(path, key); S3ObjectInputStream objectContent = object.getObjectContent(); return IOUtils.toByteArray(objectContent); } catch (AmazonServiceException | IOException e) { throw new IllegalStateException(&quot;Failed to download the file&quot;, e); } }} 上記のFileStoreクラスでは、Amazon S3にファイルをアップロードおよびダウンロードするためのロジックが含まれています。 uploadメソッドでは、以下のパラメータが渡されます。 path: Amazon S3バケットの保存パスです。 fileName: アップロードされるファイルの実際の名前です。S3からファイルをダウンロードする際には、これがキーとして使用されます。 optionalMetaData: ファイルの詳細情報（ファイルタイプやファイルサイズなど）を含むマップです。 inputStream: Amazon S3に保存される実際のファイルが含まれています。 123456ObjectMetadata objectMetadata = new ObjectMetadata();optionalMetaData.ifPresent(map -&gt; { if (!map.isEmpty()) { map.forEach(objectMetadata::addUserMetadata); } }); 上記のコードブロックでは、optionalMetaData マップをループして、すべてのファイル情報をS3の objectMetaData に追加します。 amazonS3.putObject(path, fileName, inputStream, objectMetadata); を使用してファイルをAmazon S3バケットに保存します。 download メソッドでは、以下の手順が実行されます。 S3Object object = amazonS3.getObject(path, key); ：指定されたパスからファイルをダウンロードし、ファイル名はメソッドに渡されたキーと類似しています。 S3ObjectInputStream objectContent = object.getObjectContent(); ：Amazon S3から返されたオブジェクトから入力ストリームを取得します。 IOUtils.toByteArray(objectContent) ：入力ストリームをRestful APIで送信可能なバイト配列に変換します。 1234567public interface TodoService { Todo saveTodo(String title, String description, MultipartFile file); byte[] downloadTodoImage(Long id); List&lt;Todo&gt; getAllTodos();} 上記のTodoServiceインターフェースには、todosを保存および取得するために実装する必要のあるさまざまなメソッドが含まれています。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354@Service@AllArgsConstructorpublic class TodoServiceImpl implements TodoService { private final FileStore fileStore; private final TodoRepository repository; @Override public Todo saveTodo(String title, String description, MultipartFile file) { //check if the file is empty if (file.isEmpty()) { throw new IllegalStateException(&quot;Cannot upload empty file&quot;); } //Check if the file is an image if (!Arrays.asList(IMAGE_PNG.getMimeType(), IMAGE_BMP.getMimeType(), IMAGE_GIF.getMimeType(), IMAGE_JPEG.getMimeType()).contains(file.getContentType())) { throw new IllegalStateException(&quot;FIle uploaded is not an image&quot;); } //get file metadata Map&lt;String, String&gt; metadata = new HashMap&lt;&gt;(); metadata.put(&quot;Content-Type&quot;, file.getContentType()); metadata.put(&quot;Content-Length&quot;, String.valueOf(file.getSize())); //Save Image in S3 and then save Todo in the database String path = String.format(&quot;%s/%s&quot;, BucketName.TODO_IMAGE.getBucketName(), UUID.randomUUID()); String fileName = String.format(&quot;%s&quot;, file.getOriginalFilename()); try { fileStore.upload(path, fileName, Optional.of(metadata), file.getInputStream()); } catch (IOException e) { throw new IllegalStateException(&quot;Failed to upload file&quot;, e); } Todo todo = Todo.builder() .description(description) .title(title) .imagePath(path) .imageFileName(fileName) .build(); repository.save(todo); return repository.findByTitle(todo.getTitle()); } @Override public byte[] downloadTodoImage(Long id) { Todo todo = repository.findById(id).get(); return fileStore.download(todo.getImagePath(), todo.getImageFileName()); } @Override public List&lt;Todo&gt; getAllTodos() { List&lt;Todo&gt; todos = new ArrayList&lt;&gt;(); repository.findAll().forEach(todos::add); return todos; }} 上記のTodoServiceImplでは、すべてのtodosを保存および取得するためのメソッドの実装が提供されています。 コントローラーパッケージ このパッケージには、受信したHTTPリクエストを処理するTodoControllerクラスが含まれています。 12345678910111213141516171819202122232425262728@RestController@RequestMapping(&quot;api/v1/todo&quot;)@AllArgsConstructor@CrossOrigin(&quot;*&quot;)public class TodoController { TodoService service; @GetMapping public ResponseEntity&lt;List&lt;Todo&gt;&gt; getTodos() { return new ResponseEntity&lt;&gt;(service.getAllTodos(), HttpStatus.OK); } @PostMapping( path = &quot;&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE, produces = MediaType.APPLICATION_JSON_VALUE ) public ResponseEntity&lt;Todo&gt; saveTodo(@RequestParam(&quot;title&quot;) String title, @RequestParam(&quot;description&quot;) String description, @RequestParam(&quot;file&quot;) MultipartFile file) { return new ResponseEntity&lt;&gt;(service.saveTodo(title, description, file), HttpStatus.OK); } @GetMapping(value = &quot;{id}/image/download&quot;) public byte[] downloadTodoImage(@PathVariable(&quot;id&quot;) Long id) { return service.downloadTodoImage(id); }} S3バケットからのアップロードとダウンロードのテスト 結論 おめでとうございます！これで、S3にファイルをアップロードしてダウンロードする方法を学びました。次は、複数のファイルをS3にアップロードするロジックを実装することを学びます。","link":"/How-to-upload-files-to-Amazon-S3-in-SpringBoot/"},{"title":"日本語の句読点をざっとチェック","text":"記号 一般的な読み方 JIS X 0201 規格での名称 ASCII 規格での名称 ! びっくりマーク、エクスクラメーションマーク 感嘆符 Exclamation Mark ” ダブルクオート、二重引用符 引用符 Quotation Mark # シャープ、いげた 番号記号 Number Sign $ ドルマーク、ダラー ドル記号 Dollar Sign % パーセント パーセント Percent Sign &amp; アンパサンド、アンド アンパサンド Ampersand ‘ シングルクオート、一重引用符 アポストロフィー、アクサンテギュ Apostrophe ( 左(丸)かっこ、開き(丸)かっこ 左小かっこ Left Parenthesis ) 右(丸)かっこ、閉じ(丸)かっこ、こっか 右小かっこ Right Parenthesis * アスタリスク、星、スター アステリスク Asterisk + プラス(記号)、たす、プラ 正符号 Plus Sign , コンマ、カンマ コンマ、セディユ Comma - マイナス(記号)、ハイフン、ひく ハイフン、負符号 Hyphen-Minus . ドット、ピリオド、点、ぽち ピリオド Full Stop / スラッシュ、スラ、斜線 斜線 Solidus : コロン コロン Colon ; セミコロン セミコロン Semicolon &lt; 小なり(記号) 不等号(より小) Less-Than Sign = イコール、等号 等号 Equals Sign &gt; 大なり(記号) 不等号(より大) Greater-Than Sign ? はてなマーク、クエスチョンマーク 疑問符 Question Mark @ アットマーク 単価記号 Commercial At [ 左ブラケット、左鍵かっこ、左大かっこ 左大かっこ Left Square Bracket ¥ バックスラッシュ、バックスラ、逆スラッシュ Reverse Solidus ] 右ブラケット、右鍵かっこ、右大かっこ 右大かっこ Right Square Bracket ^ ハット、カレット、やま アクサンシルコンフレックス Circumflex Accent _ アンダースコア、下線、アンダーライン アンダライン Low Line ‘ バッククオート、逆クオート、逆引用符 アクサングラーブ Grave Accent { 左中かっこ、左ブレース、左カーリーブラケット 左中かっこ Left Curly Bracket | 縦棒、縦線 縦線 Vertical Line } 右中かっこ、右ブレース、右カーリーブラケット 右中かっこ Right Curly Bracket ~ チルダ、波線、にょろ Tilde JP 。 てん 句号 、 てんてん 逗号 ！ えっくすくらめーしょんまーく 感叹号 exclamation mark 記号 一般的な読み方 JIS X 0201 規格での名称 ASCII 規格での名称 ! びっくりマーク、エクスクラメーションマーク 感嘆符 Exclamation Mark &quot; ダブルクオート、二重引用符 引用符 Quotation Mark # シャープ、いげた 番号記号 Number Sign $ #ドルマーク、ダラー ドル記号 Dollar Sign % パーセント パーセント Percent Sign &amp; アンパサンド、アンド アンパサンド Ampersand ' シングルクオート、一重引用符 アポストロフィー、アクサンテギュ Apostrophe ( 左(丸)かっこ、開き(丸)かっこ 左小かっこ Left Parenthesis ) 右(丸)かっこ、閉じ(丸)かっこ、こっか 右小かっこ Right Parenthesis * アスタリスク、星、スター アステリスク Asterisk + プラス(記号)、たす、プラ 正符号 Plus Sign , コンマ、カンマ コンマ、セディユ Comma - マイナス(記号)、ハイフン、ひく ハイフン、負符号 Hyphen-Minus . ドット、ピリオド、点、ぽち ピリオド Full Stop / スラッシュ、スラ、斜線 斜線 Solidus : コロン コロン Colon ; セミコロン セミコロン Semicolon &lt; 小なり(記号) 不等号(より小) Less-Than Sign = イコール、等号 等号 Equals Sign &gt; 大なり(記号) 不等号(より大) Greater-Than Sign ? はてなマーク、クエスチョンマーク 疑問符 Question Mark @ アットマーク 単価記号 Commercial At `` 左ブラケット、左鍵かっこ、左大かっこ 左大かっこ Left Square Bracket `` バックスラッシュ、バックスラ、逆スラッシュ Reverse Solidus `` 右ブラケット、右鍵かっこ、右大かっこ 右大かっこ Right Square Bracket `` ハット、カレット、やま アクサンシルコンフレックス Circumflex Accent `` アンダースコア、下線、アンダーライン アンダライン Low Line バッククオート、逆クオート、逆引用符 アクサングラーブ Grave Accent { 左中かっこ、左ブレース、左カーリーブラケット 左中かっこ Left Curly Bracket ` ` 縦棒、縦線 縦線 } 右中かっこ、右ブレース、右カーリーブラケット 右中かっこ Right Curly Bracket ~ チルダ、波線、にょろ Tilde ’ optioin+[ moji标点符号补充 日文所有标点符号应该如何读 日本語のすべての句読点の読み方 在日文中，标点符号的读法如下：日本語では句読点は次のように読みます。 句号（。）：「てん」（ten） 逗号（、）：「てんてん」（tenten） 问号（？）：「はてな」（hatena） 感叹号（！）：「えっくすくらめーしょんまーく」（exclamation mark） 以上是一些常见标点符号的读法，其他符号的读法可以根据上下文进行确定。上記は一般的な句読点の発音ですが、その他の記号の発音は文脈に応じて決定できます。 于是今天，我们就来重新认识一下日语中的“符号”！ 首先，来看文章中常用的一些标点符号。 比如这句话： 「h」は、ハ・ヘ・ホの子音である。 简单的一句话，就包含了好几种标点符号，而且它们在句子中都有各自的职责。 比如这个半框**“「」”**，在日语中叫做“かぎかっこ”，如果要引用某人的话，或者想强调某种东西，引起读者的注意的时候就可以使用这个符号。 **“、”**在日语中叫做“読点”（とうてん），它实际上相当于我们的逗号，用来表示句子内部的停顿。 **“・”**这样的小点点。叫做中点(なかてん・ナカグロ)，表示两者之间的并列关系。 **“。”**这个符号在日语中叫做句点（くてん），这个符号相信大家熟悉的不能再熟悉了吧，用在句末表示句子的结束，语意传递完毕。 半括号的符号，除了上面提到的还有表示书籍名的**“『』”**（二重かぎかっこ），这个可以和上面的那个括号联系起来记忆。 还有**“（）”，就读作“かっこ”**，汉字写“括弧”，可以推测出这个符号可能是括号鼻祖，其它都是在它基础上发展起来的。 我们中文中常说的大括号**“{}”**，在日文中叫做“チュウカッコ”（可理解为“中括弧”）。 我们现在和朋友交流，很少会采取写信的方式，都是用电子设备。那么，在电子设备键盘上的各种形形色色的符号又是什么意思呢？ 比如，我们在复制粘贴文字片段的时候，必须用到的ctrl键，读成（コントロール）。这是一个外来语，是英语的control的音译。大家可以联系起来记，一下能记住两个词…… 还有： Alt(オルト) shift(シフト) Esc（エスケープ） Tab(タブ) F１ーF12(ファンクションキー) ——都是音译的读法，对于那些熟练电脑的朋友这些词应该不难记。 除了这些键，还有一些平时我们会用到的特殊符号。 比如写邮箱用的**@**符号读成：アットマーク； ¥ 读成：円マーク 拨电话号码时经常用到的**“#”**，在日语中有几个读法，比如：シャープ、ナンバー、井げた(いげた)。 &amp; 在英语中表示and，在日语中就读成“アンドマーク”。 这些符号的读法都有一个共同点，那就是都是英译过来的，想想电脑的历史就不会觉得奇怪了。 还想和大家介绍一些比较常用的数学符号的读法。 其中，最简单的数学运算加减乘除，分别读成： ➕（プラス） —（マイナス） ✖️（かける） ➗（ワル） 档次高一点的数学符号，比如 平方根：√（ルート） 立方根：³√（リッポウコン） 无穷大符号∞（無限記号「むげんきごう」） 求和符号 ∑（総合記号「そうごうきごう」） ……其实早就还给数学老师了。 网上冲浪时，偶然看到一张日语“符号”的名称对照表，欢迎收藏： 名称 半角 全角 チルダ・チルダー・にょろ ~ なし キャレット・ハット ^ ^ アットマーク ＠ ＠","link":"/japanese-punctuation-check/"},{"title":"バージョン管理ツール","text":"はじめに Git Gitを使うためのヒント SVN TFS 優れたコミットメッセージを書く方法 優れたコミットメッセージを書くことは、チームメンバーがコードの変更をよりよく理解し、追跡するのに役立つ良いプログラミングの実践です。以下は、優れたコミットメッセージを書くためのいくつかの提案です： 簡潔で要約的：コミットメッセージが変更の要点を明確に示し、冗長な説明を避け、できるだけ50文字以内に収めることを確認します。 不要なコメントを削除 Remove unnecessary comments 動詞と現在形を使用：コミットメッセージの冒頭に動詞を使用して、変更が何を行ったかを明確に表現します。現在形を使用することで、メッセージがより直接的で具体的になります。 機能の修正: ユーザーのログインバグを修正 Fix bug in user login functionality 変更内容の説明：コミットメッセージには、変更内容が明確に記述されており、どの機能、ファイル、モジュールなどが追加、変更、削除、修正されたかが含まれています。 ファイル構造の変更: 新しいフォルダ '画像' を追加&quot; Change file structure: Add new folder 'images' テーマの分離：コミットが複数の異なるテーマや変更に関連している場合は、できるだけそれらを独立したコミットに分割し、各コミットが1つのテーマに焦点を当てるようにします。これにより、コードレビューと変更の追跡が効率化されます。 機能の追加: ユーザー登録フォームのバリデーションを実装&quot; と &quot;ドキュメントの更新: ユーザー登録手順の追加 Add feature: Implement validation for user registration form&quot; and &quot;Update documentation: Add steps for user registration 問題やタスクへの参照：コミットが特定の問題やタスクを解決する場合は、関連する参照番号、リンク、またはキーワードをコミットメッセージに含めて、コミットを関連付けます。 バグ修正: issue #123 に関連するログインエラーの修正&quot; Fix bug: Resolve login error related to issue #123 絶対的な言葉の使用を避ける：コミットメッセージで「絶対に発生しない」や「完全に修正された」などの絶対的な言葉を避け、代わりに変更の影響や範囲を客観的に記述します。 機能の更新: メール送信機能の改善 Update feature: Improve email sending functionality 一貫したスタイルの維持：コミットメッセージで一貫したスタイルとフォーマットを維持し、チームメンバーが読みやすく理解しやすいようにします。タイトルと本文の区切りや最初の文字の大文字を使用するなど、いくつかの規則を定めることができます。 機能の追加: ユーザー登録ページのデザインを改善 Add feature: Enhance design of user registration page 小さくて頻繁なコミット：多くの変更を1つのコミットに累積するのではなく、小さくて頻繁なコミットを行います。これにより、コミット履歴が明確で追跡可能であり、後で戻ることができます。 バグ修正: ユーザーがログアウトできない問題の修正&quot; と &quot;機能の追加: ユーザーのプロフィール編集機能の追加 Fix bug: Resolve issue preventing users from logging out&quot; and &quot;Add feature: Implement user profile editing functionality バージョン管理ツールの他の機能の使用：Gitなどの一部のバージョン管理ツールには、コミットメッセージのテンプレート、関連する問題のリンク、自動化された操作などの追加機能があります。これらの機能を知り、利用して、コミットメッセージの品質と可読性を向上させます。 ドキュメントの更新: README.mdに新しいセクションを追加し、プロジェクトの概要を追記 Update documentation: Add new section to README.md and append project overview 最も重要なことは、コミットメッセージを書く際に常に後続の読者のニーズを考慮することです。これには、チームメンバーやメンテナー、将来のプロジェクト参加者が含まれます。明確で簡潔、具体的で一貫性のあるコミットメッセージは、コードの品質、チームの協力、プロジェクトの保守性を向上させるのに役立ちます。","link":"/version-control-toll/"},{"title":"テスト記事","text":"本記事について 目的 システム開発における 試験 とは ■試験 システム開発における試験とは、開発したプログラムが要件や設計書通りに作成されているか、問題なく動作するかの確認を行う工程です。 プログラミングは人が行うため、ヒューマンエラーの可能性があり、バグや不具合が検出されます。 そのため、リリース前には必ず試験を行ってバグを洗い出し、必要に応じて修正しアプリが期待通りの動作をするか確認してからクライアントに納品する必要があります。 試験の工程では、以下の工程があります。 単体試験 画面や機能ごとに、動作の検証をする 結合試験 他の機能やシステムと連携させて、動作の検証をする 総合試験 本運用を想定して、システム全体の動作を検証する 試験工程では、以下の成果物を作成していきます。 ・試験計画書 ・単体試験仕様書 ・結合試験仕様書 ・総合試験仕様書 ・不具合管理表 ・試験結果集計 試験計画書 ■試験計画書とは 試験計画書は、試験の目的を正しく実行するために必要なドキュメントです。 具体的には、テストすべき内容の見落としや、方向性に誤りがないかの事前確認などに寄与します。 ■試験計画書での記載事項 ・試験概要 試験毎にどのような試験を行うか、どのような試験手法を使用するかを記載します。 ・試験スコープ 試験の範囲や対象を明確にします。 ・試験密度 テストの量が十分であるかを示す指標です。テスト計画時に目標値を定めておき品質評価の基準の参考とします。 ・試験観点表 試験観点表とは、試験対象の機能毎に試験観点をまとめたリストのことです。 試験対象毎に、観点（大）・観点（小）・観点パターンといったようにまとめています。 試験観点表を活用することによって、試験観点を整理でき作業が効率化します。 また、項目毎に試験観点を俯瞰できるようになることから抽出の漏れを防ぐことも可能です。 試験仕様書 ■試験仕様書 試験書は、ソフトウェアの品質保証やバグの特定・修正において重要な役割を果たします。開発者やテスターがテストの実施状況や結果を共有し、ソフトウェアの機能性や品質に関する情報を文書化するために作成します。 implでは、試験仕様書について標準化しており、単体試験書、結合試験書、総合試験それぞれ作成する必要はあるものの雛形は同じものとなっています。 記載箇所については、下記図の赤枠に囲まれた項目を記載していただきます。 試験項目については、試験項目毎に大項目・中項目・小項目といったようにまとめ、試験観点表をもとに記載していきます。手順なども全て「確認内容」に記載した上で試験手順から何を確認するべきかを記載しましょう。これによって、対象システムを理解していない人も一意の認識で試験を行いやすくなります。 単体試験 ■単体試験 単体試験とは、システム開発における工程の一つであり、結合前の機能が顧客の要望通りに動作することを確認するテストのことを言います。 一般的にシステムを作る時には、システム全体をまとめて一気に作ることはありません。 機能毎に分けて作り、最後にそれを結合することで完成するのが一般的です。 単体試験は「Unit Test（ユニット・テスト）」の頭文字を取って「UT」と表現される場合もあり、「Program Test（プログラム・テスト）」や「Part Test（パート・テスト）」の頭文字を取って「PT」と表現される場合もあります。 プロジェクトの文化次第となりますので、どちらも単体試験であると認識しましょう。 例として「日本語辞典」というアプリで以下の機能を開発したとします。 ・用語を登録する機能 ・用語を表示する機能 ・用語を検索する機能 単体試験では、個々の機能がきちんと動作するかを確認するのが単体試験となります。 結合試験 ■結合試験とは 結合テスト【integration testing/統合テスト】とは、システムやソフトウェアの検証手法のひとつであり、個々のモジュール（部品・機能）での単体テスト後に実施されます。 その名の通り、複数のモジュールを組み合わせた上でシステムに不具合がないかを検証します。結合テストは主に、モジュール間の接続部分（インターフェース）を対象範囲とします。 検証方式は、インターフェースが正常に機能しているかを確認するケースと、結合した状態で外部から観察し、一体として正常に機能するかを確認するケースがあります。結合テストは、テスト対象を単体ではなく独立したひとつのシステムとして包括的に捉えた、ユーザビリティ重視の検証方法です。 先程と同一の例として「日本語辞典」というアプリで以下の機能を開発したとします。 ・用語を登録する機能 ・用語を表示する機能 ・用語を検索する機能 結合試験では、上記三つの機能を組み合わせてテストし、正常に動作するか確認します。 総合試験 ■総合試験とは 単体テスト、結合テストの実行後に、本番とほぼ同じ環境でテストを実施します。（開発環境でのテストでは発見できない不具合を検出するため。） 故障一覧表 ■故障一覧表 故障一覧表とは、単体試験で抽出した「バグ」を記載しているリストになります。 リストに記載しておくことでバグ管理を適切に行い、バグがどれくらいあるのか、またバグの修正状況を適切に把握できるようになり、修正作業や再テストが効率的に行えるようになります。 バグを漏らさず記録し、再発を防ぐためにもきちんとバグ管理を行うことが大切です。 バグが発生した場合こちらを記載します。 試験結果集計 ■試験結果集計 試験結果集計のファイルのマクロ実行方法シートに記載の方法にて集計シートを作成します。 ※こちら動作しない可能性があります。 工程完了報告とは ■工程完了報告 工程完了報告は、工程完了確認の確認項目が全て完了した際に顧客に提出する報告書になります。 こちらは提出物となるため全ての項目に不備がないか確認し、記入する必要があります。","link":"/%E3%83%86%E3%82%B9%E3%83%88%E8%A8%98%E4%BA%8B/"},{"title":"ウォーターフォール開発","text":"本記事について はじめに https://hnavi.co.jp/knowledge/blog/waterfall/ ウォーターフォール開発は、伝統的で基本的な開発手法の1つです。この手法では、開発に必要な工程を段階的に区切って、順番に進行していきます。工程ごとに品質を管理できるため、最終的に高い品質が期待できるのが特徴です。 品質が求められるような大規模なシステム開発や、複雑なソフトウェア開発に適しています。ウォーターフォール開発は、高い品質の製品を開発できる一方で、柔軟性の不足が弱点です。開発の途中で修正や仕様変更が発生すると、工数や納期に大きな影響が出てしまいます。開発手法はほかにも存在しますので、プロジェクトが始まる前に状況やニーズを把握して、どの手法で開発するか選択することが重要です。 今回は、ウォーターフォール開発の流れや、開発におけるメリット・デメリットについて詳しく紹介します。 目次 1.ウォーターフォール開発とは 2.ウォーターフォール開発の流れ 3.ウォーターフォール開発におけるメリット 4.ウォーターフォール開発におけるデメリット 5.ウォーターフォール開発に向いているプロジェクトとは 6.ウォーターフォール開発を行う際のポイント 7.ウォーターフォール型以外の開発方法はあるの？ 8.外部へ委託することで効率的に進めよう ウォーターフォール開発とはウォーターフォール開発とは、システムやソフトウェア開発で用いられる開発手法の一種で、ウォーターフォール型開発とも呼ばれます。ウォーターフォールという名が示すとおり、「滝（Waterfall）のように落下するが如く開発が進む」ことから、その名が付けられています。ウォーターフォール開発は、主に大規模で複雑なプロジェクトに向いています。 例えば、新しい製品やシステムの開発、インフラシステムの構築、大規模なソフトウェア開発などです。開発における各工程が細かく独立して区切られているため、工程ごとの進捗管理や品質管理がしやすいためです。 ウォーターフォール開発の流れウォーターフォール開発は、大きく8つの工程に分かれているのが特徴です。以下の流れでプロジェクトを進行します。 ■ウォーターフォール型開発の流れ 工程 詳細 ➀要件定義 システムの機能や、開発に必要となる予算や人員を決める。 ②外部設計 ユーザーインターフェース（外見的な見た目のこと）を設計する。 ③内部設計 システム内部の動作や機能、物理データ部分を設計する。 ④実装 外部と内部設計に基づき、実際にプログラムを作成・実装する。 ⑤単体テスト 実装したプログラムが、正しく機能するかテストをする。 ⑥統合テスト 複数のプログラムを組み合わせ、正しく機能するかテストをする。 ⑦運用テスト 完成したシステムが、実際の業務に使用できるかテストをする。 ⑧リリース テストが完了したシステムをリリースする。 ウォーターフォール開発では、このように上段から順を追って開発が進みます。 ●ウォーターフォール型の具体的な開発手順とはウォーターフォール開発は、「開発手順が極めてシンプルでわかりやすい」という特徴があります。上図のとおり、システムやソフトウェア開発には多くの工程（プロセス）が存在しますが、この工程を「上から順番に行う」のが、ウォーターフォール開発なのです。 ウォーターフォール開発の大まかな手順としては、システムに搭載する機能や細かな仕様をすべて決めてから開発がスタートします。その後、1つひとつの工程をしっかりと完了させながら行う、という流れです。「前の工程には戻らないこと」を前提に開発が進行するのも、ウォーターフォール開発の特徴と言えるでしょう。すべての工程が完了した後、晴れてシステムやソフトウェアがリリースされる仕組みです。 ここからは、各工程について順番に解説します。 1.要件定義 要件定義工程では、システムがどのような機能や性能を持つべきか、どのような制約条件があるかなどを明確に定義します。要件定義は、システムが成功するために必要不可欠な工程であり、その後の工程の進行方向やスケジュールに大きな影響を与える工程です。 2.外部設計 外部設計工程では、要件定義で定義された機能や性能を達成するために、どのようなシステム構成が必要かを定義する工程です。具体的には、システムアーキテクチャ、ユーザーインターフェース、データ入出力方法などが含まれます。 3.内部設計 内部設計工程は、外部設計で定義されたシステム構成を実現するために、具体的な実装方法を設計する工程です。具体的には、プログラムのモジュール化、データ構造、アルゴリズムなどが含まれます。 4.実装 実装工程では、内部設計で定義された設計に基づいて、プログラムを記述します。プログラミング言語やフレームワークを使用して、プログラムを実装する工程です。大規模なプロジェクトの場合は、大人数で作業を分担します。 5.単体テスト 単体テスト工程は、個々のプログラムモジュールが、要件定義で定義された機能や性能を満たしているかを確認・検証する工程です。プログラムモジュールごとにテストケースを用意し、正しく動作することを確認します。 6.統合テスト 統合テスト工程は、複数のプログラムモジュールを組み合わせた場合の動作を確認・検証する工程です。テストケースを用意し、全体的なシステムの動作を確認します。この工程においては、要件定義で定義された機能や性能を満たしているかを確認します。 7.運用テスト 運用テストでは、システムが正常に稼働することを確認するテストを実施します。ユーザーが利用する状況を想定しながらシステムを稼働させるフェーズです。実際にシステムを稼働させて、ユーザーが操作した場合に問題がないかどうかを確認・検証します。例えば、サイトのアクセス数が急増した際に、システムが安定して動作するかどうかなどを確認します。このテストで問題があった場合は、修正を加えてから再度テストが必要です。 8.リリース すべての工程を終えた後、システムをリリースします。リリース後は、ユーザーによるシステム操作・閲覧が可能です。リリース前には、システム全体の品質を最終確認します。また、リリース後も適切に運用されるよう保守・運用についても考慮が必要です。リリース後は、システムの品質についてユーザーからのフィードバックを収集し、改善点を検討するフェーズに入ります。 ウォーターフォール開発におけるメリットウォーターフォール開発におけるメリットは、大きく以下の3つです。メリットを理解して、自分のプロジェクトで活用できそうか検討してみましょう。 品質を担保したシステム開発を行いやすい スケジュールや進捗管理がしやすい 事例が多く、様々な開発に応用ができる ●品質を担保したシステム開発を行いやすい先に挙げたとおり、ウォーターフォール開発は「何を作りたいか」を明確にしたうえで、事前に決められた手順どおりに開発が進みます。そのため、ウォーターフォール型のシステム開発は完成品の品質を担保しやすいというメリットがあります。仕様に沿った物が予定どおりに作られる分、クライアントに安心感を与えやすいのもウォーターフォール開発の利点と言えるでしょう。 ●スケジュールや進捗管理がしやすい計画的にシステム開発を進めやすいウォーターフォール開発は、開発にかかわるエンジニアやスタッフの管理がしやすいのもメリットです。開発のスタート段階で作業量がわかる分、必要な人員だけを確保できて、コスト面においても無駄がありません。 また、各々の工程でいつまでに完了するのか、どのように仕上がるのかがわかりやすく、業務の引き継ぎも円滑に行いやすいという特徴があります。 ●事例が多く、様々な開発に応用ができるウォーターフォール開発は、伝統的かつ基本的なシステム開発手法です。基本的には要件が明確であればどんなプロジェクトにも対応できます。この手法は、プロジェクト全体を段階的に進めることで、工程ごとに目標を明確にして、綿密に計画することが可能です。そのため、プロジェクトの進捗管理や品質管理に優れています。 ウォーターフォール開発におけるデメリットウォーターフォール開発におけるデメリットは、主に以下の3つが挙げられます。 開発期間が長期化しやすい 仕様や計画の変更がしにくい 修正やアクシデントが発生した際に大幅に工数がかかる ●開発期間が長期化しやすいウォーターフォール開発は、企画や要件定義をじっくりと行ってから開発を開始する分、開発期間が長期化しやすいという欠点があります。そのため、スタートアップのビジネスで使用するシステムやソフトウェアのように、スピードが重視されるに開発案件では不向きです。品質の高さや安定性と引き換えに、時間が犠牲になりやすい開発方法と言えるでしょう。 ●仕様や計画の変更がしにくいシステム開発に限った話ではありませんが、すべての業務が計画どおりに進行することは稀です。開発の途中で「どうも使いにくそうだ」、「やっぱりこの機能は要らない」と思っても、最初に全体像が完成している分、仕様や計画を簡単に変更できません。万が一、開発途中で仕様の変更をする場合は、甚大なコストと労力が発生してしまいます。コストや労力を捻出できず、「そのまま後戻りできずにシステムが完成する」というケースもあるほどです。 ●修正やアクシデントが発生した際に大幅に工数がかかるウォーターフォール開発では、システム修正やアクシデントが発生すると、工数が大幅に増加します。例えば、実装段階に入った状態で「機能の追加」や「データ連携先の変更」などが決まると、上流工程に戻らなければなりません。終わった工程を再度実行するため、工数が追加で必要になります。また、上流工程からやり直すため、全体の計画が後ろ倒しになることにもつながります。 連携先のシステムの不具合で、当初想定していたシステムを構築できない、といった状況は考えられます。ただ、工数が増えると、最初に企画した段階よりも開発コストが膨らんでしまいます。ビジネスにおいてコストは利益に影響するため、重要な要素です。最初の要件定義の段階で、修正やアクシデントのリスクは可能な限り取り除いておきましょう。 ウォーターフォール開発に向いているプロジェクトとはウォーターフォール開発でシステムを作る際は、メリットとデメリットをしっかり把握したうえで、「ウォーターフォールに適したシステム開発」をしましょう。品質の安定性に定評のあるウォーターフォール開発は、「仕様変更を前提としないシステム」を開発するのに適しています。 続いて、ウォーターフォール開発に向いているプロジェクトの例を3つ紹介します。 家電や自動車に搭載する組み込みソフトウェア 携帯キャリアの通信システム コンピューターのOSなどの規模の大きい開発 上記の3つは、どれも障害の発生で甚大な被害が発生するシステムです。仕様変更を前提としないかつ高品質なシステムが求められるプロジェクトでは、ウォーターフォール型での開発を検討してみましょう。 ウォーターフォール開発を行う際のポイントここではウォーターフォール開発を成功させるためのポイントを5つ紹介します。 ウォーターフォール開発は、各工程が滝のように流れるため、前の工程に戻るのが困難です。そのため、最初の要件定義を徹底したり、現実的な計画を作成したり、ドキュメントを作成するなど、意識するポイントがあります。順番に解説しますので、チェックしてみましょう。 ●スケジューリングを綿密に行うウォーターフォール開発では、各工程が順番に進んでいくため、綿密なスケジュール管理が必要です。1つの工程で遅れが発生すると、後ろの工程での対応時間が短くなってしまいます。プロジェクトの全体スケジュールから各工程のスケジュールを算出し、それぞれの期限を守りながら進行させましょう。 ●要件定義を明確にする開発の前段階である要件定義は、プロジェクトが成功するか否かを左右する重要な工程です。顧客からの要求やシステムが必要とする機能を正確に把握し、それを明確に文書化することが求められます。あいまいな要望は、ヒアリングと提案によって「要件」に落とし込むようにしましょう。この工程で仕様や機能を細かく定義できれば、下流工程での修正リスクを抑えられます。 ●各工程でのドキュメント作成ウォーターフォール開発では、各工程でのドキュメント作成が欠かせません。特殊な仕様や注意点は必ずドキュメントに残しておきましょう。各工程を別の作業者が担当する場合、工程をまたいだ質問・確認が難しいためです。外部設計、内部設計、実装といった作業においても、文書化によって、エラーや不備を事前に発見し、回避することができます。 ●工程ごとのテスト実施ウォーターフォール開発では、各工程でのテストが重要な意味を持ちます。単体テスト、統合テスト、運用テストといった工程で、機能や品質に問題がないかを確認して、次の下流工程での修正を防ぐ役割があるためです。工程ごとのテストを欠かさず実施することで、開発中の問題を早期に発見し、修正することができます。早期に問題点を発見できれば、リリース遅延のリスクを最小限に抑えられます。 ●作業者・顧客とのコミュニケーションウォーターフォール開発では、作業者と顧客のコミュニケーションが重要です。顧客が求めるものを正確に把握するために、顧客との意見交換を行い、共通認識を持ちましょう。 また、作業者同士のコミュニケーションも必要です。プロジェクト発足時に、コミュニケーションを取りやすい環境を作っておくことをおすすめします。話しやすい環境を作っておけば、問題や修正が発生した際に、すぐに把握できるためです。ウォーターフォール開発では、スケジュール遅延を起こさないためにも早めの報告・修正が重要になります。 ウォーターフォール型以外の開発方法はあるの？開発手法には、ウォーターフォール開発以外にも様々な方法が存在します。ここでは、現在使われている手法を4つピックアップしました。 アジャイル型開発 スパイラル型開発 ハイブリッド開発 プロトタイプ開発 各開発手法について順番に解説します。 ●アジャイル型開発 ■アジャイル型開発の流れ 工程 詳細 ➀企画 「どんなシステムやソフトウェアを作りたいのか」を具体的に決める。 ➁イテレーション 計画、設計、実装、テストのサイクルを回す。 ③リリース 完成したシステムをリリースする。 ※以下、②～③の工程を繰り返し行う。 俊敏(agile)の名を冠したアジャイル型開発は、文字どおり「素早いシステム開発」を可能とした開発方法です。作りたいシステムを大まかに決めた後は「計画、設計、実装、テストの反復（イテレーション）」を繰り返し、一気に開発を完了させます。システムのリリース後は、ユーザーやクライアントからのフィードバックをもとに、システムの改良を繰り返して行う流れです。 ウォーターフォール型とは反対に、「前の工程に戻ること」を前提に開発を行うのが、アジャイル型の特徴と言えるでしょう。短期間でシステム開発ができるうえ、臨機応変に計画を変更ができる分、「柔軟にシステム開発が行いやすい」という点も、ウォーターフォール型とは真逆のメリットです。「仕様変更を前提としたWebサービス」や「速度の求められるスタートアップのシステム開発」においては、アジャイル型開発に向いています。 ただし、ウォーターフォールと真逆の特性を備えているのは、デメリットについても同じです。ことアジャイル型開発は、工程を分けずに細かなサイクルを繰り返す分、スケジュールや進捗管理が難しいという欠点があります。そのため、アジャイル型開発を円滑に進めるには、管理能力に長けたプロジェクトマネージャーの存在が不可欠となるでしょう。 アジャイル型開発についてさらに詳しく知りたい方はこちらをご確認ください。 ▷アジャイル開発とは？今さら聞けない開発手法のメリット・デメリット ●スパイラル型開発 ■スパイラル型開発の流れ 工程 詳細 ➀企画 「どんなシステムやソフトウェアを作りたいのか」を具体的に決める。 ➁イテレーション 計画、設計、実装、テストのサイクルを回す。 ③評価・レビュー 完成したプロトタイプ（試作機）の評価やレビューを受ける。 ※以下、②～③の工程を繰り返し行う。 ④リリース 完成したシステムをリリースする。 スパイラル型開発とは、先に挙げたアジャイル型開発とよく似た開発方法です。アジャイル型と異なる点として、システムのプロトタイプ（試作機）を完成させたうえで、ユーザーやクライアントからのフィードバックを受けるという違いが挙げられます。フィードバックによって、改善すべき点を明らかにしてから、段階的にシステムの完成に近づけていくという流れです。晴れてシステムが完成した後に、リリースが行われます。 同じ手順をぐるぐると繰り返しつつ完成を目指すことから、スパイラル（螺旋）型開発の名が付けられているのです。 スパイラル型開発は、臨機応変に仕様変更がしやすいうえ、品質重視の案件にも対応しやすいことから、ウォーターフォールとアジャイル型の「良いとこ取り」の開発方法と言えるでしょう。ですが、プロトタイプを完成させる分「開発コストが高騰しがち」という大きな欠点を抱えており、システム開発で採用されることは少なくなっています。 ●ハイブリッド開発 ■ハイブリッド開発の流れ 工程 詳細 ➀要件定義 「どんなシステムやソフトウェアを作りたいのか」を具体的に決める。 ②基本設計 要件定義を実現するための機能や実装方法を決める。 ③イテレーション 計画、設計、実装、単体テストのサイクルを回す。必要に応じてこれらの作業を繰り返す。 ④統合テスト 全体的なシステムの動作を確認 ⑤運用テスト システムが正常に稼働することを確認するテストを実施 ⑥リリース 完成したシステムをリリースする。 ハイブリッド型開発とは、ウォーターフォール開発とアジャイル開発を組み合わせた手法です。この手法では、ウォーターフォール開発のようにフェーズを分けて進めながら、アジャイル開発のように柔軟に対応しながら進めます。 この手法を採用することで、ウォーターフォール開発のように綿密な計画を立ててから開発を進め、アジャイル開発のように顧客のフィードバックを取り入れながら、柔軟にプロジェクトを進行できます。具体的には、ウォーターフォール開発の最初のフェーズである要件定義から開始し、基本設計、イテレーション、統合テスト、運用テスト、リリースという工程を順に進めます。基本設計までをウォーターフォール型のようにしっかり固め、実装・単体テストのフェーズでアジャイル開発の手法を取り入ることで、顧客のニーズに柔軟に対応しながら開発を進められることが特徴です。 ハイブリッド型開発では、ウォーターフォール開発とアジャイル開発の両方のメリットを取り入れた開発が可能です。ウォーターフォール開発のように計画的に開発を進めながら、アジャイル開発のように顧客ニーズに応えることができるため、開発プロセス全体を改善することができます。 ハイブリッド型開発は、最近ではより多くの企業や開発者に採用されるようになってきており、柔軟性と綿密性の両方を兼ね備えるため、開発プロセスを改善するうえで重要な手法の1つです。 ●プロトタイプ開発 ■プロトタイプ開発の流れ 工程 詳細 ➀要件定義 「どんなシステムやソフトウェアを作りたいのか」を具体的に決める。 ➁プロトタイプモデルの設計 要件定義を実現するための機能や実装方法を決める。 ③プロトタイプモデルの制作 プロトタイプ（試作品）を制作する。 ④プロトタイプモデルへのフィードバック クライアントからプロトタイプへのフィードバックを受ける。 ※以下、②～④を繰り返し行う。 ⑤設計 プロトタイプを製品として実装するための手法や仕様を決める。 ⑥コーディング 要件定義や設計に沿って製品を制作する。 ⑦テスト 単体・統合・運用テストを実施する。 ⑧リリース 完成したシステムをリリースする。 プロトタイプ型開発とは、上流工程時に開発するソフトウェアをプロトタイプ（試作品）として作成して、そのプロトタイプを基に顧客やステークホルダーとのコミュニケーションを深め、仕様を洗練させていく開発手法です。プロトタイプ型開発は、要件定義時の不備を補完することができるため、顧客の要望を具体化しやすく、ソフトウェアの品質を向上させることができます。また、顧客にとっては完成品を早い段階でイメージできるため、プロジェクト後半での修正発生リスクが低く、結果として開発コストの抑制が期待できます。 プロトタイプ開発には、大きく分けて2つのタイプがあります。1つは「進化型プロトタイプ開発」で、開発したプロトタイプを繰り返し改良していく手法です。もう1つは「使い捨て型プロトタイプ開発」で、仕様が決まったらプロトタイプは捨てられる、画面遷移やデザイン上の見た目を確認するためにプロトタイプを開発する手法です。 プロトタイプ型開発のメリットは、顧客とのコミュニケーションを深め、不具合を早期に発見できることが挙げられます。また、ウォーターフォール開発と比べると、要件定義後に使用を確認できるため、顧客との認識齟齬を避けられるのが特徴です。さらに、プロトタイプの作成によって、開発工程がシンプル化されるため、開発期間の短縮が期待できます。 それぞれの開発手法についてさらに詳しく知りたい方はこちらをご確認ください。 ▷システム開発にはどんな手法がある？それぞれのメリット・デメリットを紹介 外部へ委託することで効率的に進めようここまで紹介したとおり、ウォーターフォール開発は各フェーズが直線的に進むため、リソースやスケジュールの管理がとても重要です。外部の開発会社に委託することで、適切なリソースを割り当て、予算やスケジュールを最適化することが可能です。また、内部のチームは本業に集中できるため、生産性の向上も期待できます。 さらに、ウォーターフォール開発のプロセスに精通した外部の開発会社は、豊富な専門知識と経験を持っています。プロジェクトの要件定義、設計、開発、テストなどの各フェーズにおいて、高品質な成果物を提供することも期待できるのです。 システム開発を外注する場合は、複数の開発会社を比較検討する必要があります。 しかし、複数の会社とのやりとりは、時間も手間もかかる作業です。日々の業務と並行して、比較検討をするには時間が足りないかもしれません。そんな時はシステム開発会社向けのマッチングサービスへの相談がおすすめです。 発注ナビでは、開発の外注を依頼したい企業と受託したい企業のマッチングサービスを展開しています。ITに特化した知識豊富なスタッフが丁寧なヒアリングを行い、4,000社以上の開発会社データベースの中から、お客様のニーズに合った開発会社をご提案しています。 システム開発の最適な発注先をスムーズに見つける方法システム開発会社選びでお困りではありませんか？日本最大級のシステム開発会社ポータルサイト「発注ナビ」は、実績豊富なエキスパートが貴社に寄り添った最適な開発会社選びを徹底的にサポートいたします。ご紹介実績：18,000件（2023年12月現在） 外注先探しはビジネスの今後を左右する重要な任務です。しかし、 「なにを基準に探せば良いのか分からない…。」「自社にあった外注先ってどこだろう…？」「費用感が不安…。」 などなど、疑問や悩みが尽きない事が多いです。発注ナビは、貴社の悩みに寄り添い、最適な外注探し選びのベストパートナーです。本記事に掲載するシステム会社以外にも、最適な開発会社がご紹介可能です！ご相談からご紹介までは完全無料。まずはお気軽に、ご相談ください。 →詳しくはこちら","link":"/%E3%82%A6%E3%82%A9%E3%83%BC%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A9%E3%83%BC%E3%83%AB%E9%96%8B%E7%99%BA/"},{"title":"リリースの注意点","text":"本記事について","link":"/%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/"},{"title":"基本設計記事","text":" こんにちは、ここではパスワードが必要です。","link":"/base-design/"},{"title":"詳細設計記事","text":"本記事について 目的 詳細設計 とは 詳細設計とは、システム開発プロセスの一部で基本設計の次のステージです。 システムやソフトウェアの実装方法などを具体的に決定し、詳細設計が完了すると開発チームが実際のコーディングに移行できるようになります。詳細設計の主な目的は、システムの全体的な構造を決定し、要件を満たすための詳細な設計をすることです。 また、詳細設計の工程では、以下の成果物を作成していきます。 いずれも、基本設計フェーズを終えていないと正確な作業が出来ないことに留意しましょう。 ・画面設計書 – 処理詳細 ・API設計書 – 処理詳細 システム開発フロー 画面設計書 – 処理詳細 画面設計書の処理詳細では、基本設計フェーズで作成したレイアウト定義 / 項目定義をもとに 以下の項目を漏らさず記載するよう努めましょう。 ・画面の初期表示ではどのような動作がおこなわれるのか ・画面に配置されているボタンを押下すると、どのような挙動をするのか ・APIの呼び出しがあれば、レスポンスの種類や、処理の成功時/失敗時にどのような挙動をするのか API設計書 – 処理詳細 API設計書の処理詳細では、基本設計フェーズで作成したAPI定義をもとに 以下の項目を漏らさず記載するよう努めましょう。 ・想定する一連の処理をコードで記載するのではなく、言語化して表現する ・エラーハンドリングを意識する ・返却するレスポンスが充足しているか レビュー記録表 詳細設計フェーズで作成した画面設計書/API設計書の処理詳細シートを精査する工程です。 基本設計でおこなうレビューと同様に被レビュー者(レビューイ)は レビュー担当者(レビューア)に依頼をしてレビューを受けます。 レビューイはレビュー結果をもとに指摘内容の修正をおこない、 レビュー記録表に記載の指摘が無くなるまで修正をおこなっていきます。 ■レビュー記録表の記載イメージ","link":"/%E8%A9%B3%E7%B4%B0%E8%A8%AD%E8%A8%88%E8%A8%98%E4%BA%8B/"},{"title":"要件定義記事","text":"本記事について 目的 システム開発について 要件定義を学習する前に、システム開発とはどのようなものであるか確認しておきましょう。 システム開発とは、案件が企画されてからリリースされるまでの一連の流れの総称です。 インプルにおけるシステム開発は、要件定義からはじまり運用保守のサービスまで提供する 以下の一連の流れで遂行されていきます。 システム開発フロー 要件定義 とは 我々エンジニアが仕事を遂行していくうえで参画する「プロジェクト」 その「プロジェクト」が1つの案件として成約するまでの背景は様々ですが、依頼する側(顧客)は何かしらの問題や要求を抱えているはずであり、例としては以下のようなことが考えられます。 会社で蔵書管理をしているが、1人の担当が紙で管理しているため管理が煩雑になっている。 業務を管理出来るようなWebアプリケーションが必要だが、 イメージと一致するアプリケーションが見つからない。一体どうすれば…。 上記のような問題や要求を抱えている顧客に対して、解決に導くための具体的な解決策や どのようなサービスを提供するかを示すことが「要件定義」です。 ■要件定義として提示する項目 要件として定義する項目には様々な項目がありますが、本資料では以下の項目について説明します。 ・システム概要：何を開発するのか ・機能要件 ：業務を実行するために必要な機能への要件(要求) ・非機能要件 ：表面上は見えない内部的な性能や使い勝手、保守性といった品質に対する要件 要件定義の進め方 要件定義のスタートからゴールまでには様々なケースがありますが、 おおよその流れは下記のようになります。 ■一連の流れ システム概要の定義(顧客への要求事項のヒアリング) システム概要に基づいて、機能要件の定義 2.1 機能一覧の作成 2.2 画面一覧の作成 2.3 画面項目の作成 非機能要件 の定義 要件定義を失敗させないために意識するべき3つのポイント 要件定義は開発の成功を左右する最重要プロセスと言っても過言ではありません。 作業の工程で意識しておくとよい3つのポイントがあります。 ・システムを開発するうえでやりたいことを明確にする システムの開発が必要な理由は何なのか、「目的」を明確にしましょう。 そうすることで、「どのような機能を搭載するべきか」などが明確になります。 ・顧客と開発する側でお互いの認識を統一する 顧客と開発側で、お互いの認識を統一することも大切にしたいポイントです。 開発途中や開発後に「思っていたのと違った」となっても後戻りすることは難しいのが現実です。 ,開発するシステムに期待すること、目的を共有し、意見の食い違いがないように話し合いをおこなっていきましょう。 ・プロジェクトとして進行する際の大まかな計画表やスケジュールを共有する 要件定義で失敗しないためには、スケジュール管理や運用開始後の体制に関する計画も大切です。必要な要件や機能をもとに、すべての工程にスケジュールを立て、運用後の体制も整えておけるようにしましょう。 システム概要の書き方について システム概要では、どのようなシステムを開発するのか、顧客から依頼のあった背景 / 目的 顧客の要求を満たすために対応する範囲を定義します。 あらかじめ必要な情報が連携されている場合もありますが、その情報だけでは読み取りが難しい場合には直接顧客とやりとりをしていく必要もあります。 機能要件の書き方について ■機能要件とは 顧客の問題や要求を実現するために必要な機能を項目として定義したものが機能要件です。 機能要件に含まれるものには以下の項目が存在しています。 ・機能一覧 ・画面一覧 ・画面項目 それぞれの項目についてどのようなものか詳細を見ていきましょう。 ■機能一覧 機能一覧は、開発するアプリケーションがどのような機能を持っているかを一覧で書き出します。 ここでは、顧客の要求を漏らさず書き出すことが求められます。 ■画面一覧 画面一覧では、機能一覧に沿って想定される画面を一覧で書き出します。 作成する画面が増えると、比例して実装やテストにかかるコストも増えていきます。 ですが、コストを削ろうと試みて様々な機能を持たせた画面は実装が困難になり更なるコストを生み、実現が遠のくばかりではなく、1つの機能修正が他の機能にも影響を与える要因にもなりかねません。 そのため、まずはシンプルかつ要求を満たせる画面を考えられるとよいでしょう。 ■画面項目 画面項目では、画面一覧で定義した各画面にどのようなフォームやボタンがあるかを記載します。 注意すべき点は、顧客の要求には含まれていない機能を定義してしまうことです。 本来作成しなくてもよい要件外の機能を作ってしまうと、コストの増大にも直結しますので要件を実現するための項目を意識して作成していきましょう。 非機能要件の書き方について 非機能要件には、サーバの性能や想定されるアプリケーションの利用者数といった、表面上からは見えない内部的な要件を定義します。 ■可用性 開発するシステムの稼働時間やメンテナンスの予定といった運用スケジュールが利用者に支障を及ぼさないことや、障害が発生した際の復旧の仕組みや手順が事前に用意され、復旧にかかる日数が許容できる長さであること、などが可用性の観点にあたります。 ■性能・拡張性 システムの性能と拡張性に関する項目です。 今後の機能追加の可能性を考慮した設計になっているか、同時に利用するクライアント数やデータ負荷に耐えられるか、などの観点が挙げられます。 ■運用・保守性 システムの運用と保守のサービスに関する項目です。 利用する目的に合わせて稼働時間を確保できていることや、データベースのデータバックアップを適切な形式・頻度で取れていることなどが運用・保守性の観点になります。 ■サポート対象 開発するシステムの動作を保証する対象のブラウザや端末の情報を記載します。 ■非機能要件 イメージ","link":"/%E8%A6%81%E4%BB%B6%E5%AE%9A%E7%BE%A9%E8%A8%98%E4%BA%8B/"},{"title":"ローンシステム開発記事","text":"本記事について 目的 この記事でどこまで詳しく書くか 〇〇とは 〇〇の流れ 〇〇におけるメリット 〇〇におけるデメリット 〇〇に向いているプロジェクトとは 〇〇を行う際のポイント 〇〇以外の〇〇はあるの？","link":"/loan-system-development/"},{"title":"勤怠システム開発記事","text":"本記事について 目的 この記事でどこまで詳しく書くか 〇〇とは 〇〇の流れ 〇〇におけるメリット 〇〇におけるデメリット 〇〇に向いているプロジェクトとは 〇〇を行う際のポイント 〇〇以外の〇〇はあるの？ クラウド勤怠管理システム 勤怠管理システムに関連するサービス","link":"/attendance-system-development/"},{"title":"税務システム開発記事","text":"本記事について 目的 この記事でどこまで詳しく書くか 〇〇とは 〇〇の流れ 〇〇におけるメリット 〇〇におけるデメリット 〇〇に向いているプロジェクトとは 〇〇を行う際のポイント 〇〇以外の〇〇はあるの？ 税務システム標準仕様書 第3.0版 地方公共団体の基幹業務システムの統一・標準化 次期税務基幹システム構築に係るＲＦＩの実施について MICJET税務情報（税務情報システム）","link":"/tax-system-development/"},{"title":"生産管理システム開発記事","text":"本記事について 目的 この記事でどこまで詳しく書くか 〇〇とは 〇〇の流れ 〇〇におけるメリット 〇〇におけるデメリット 〇〇に向いているプロジェクトとは 〇〇を行う際のポイント 〇〇以外の〇〇はあるの？ キャムマックス saas 生産管理システムの自作方法は3つ！開発手順と注意点をそれぞれ解説","link":"/production-management-system-development/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"markdown","slug":"markdown","link":"/tags/markdown/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"CN","slug":"CN","link":"/tags/CN/"},{"name":"JP","slug":"JP","link":"/tags/JP/"},{"name":"クイックチェック","slug":"クイックチェック","link":"/tags/%E3%82%AF%E3%82%A4%E3%83%83%E3%82%AF%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF/"},{"name":"日本語メモ","slug":"日本語メモ","link":"/tags/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%83%A1%E3%83%A2/"},{"name":"作業メモ","slug":"作業メモ","link":"/tags/%E4%BD%9C%E6%A5%AD%E3%83%A1%E3%83%A2/"},{"name":"単語","slug":"単語","link":"/tags/%E5%8D%98%E8%AA%9E/"},{"name":"TODO","slug":"TODO","link":"/tags/TODO/"},{"name":"開発メモ","slug":"開発メモ","link":"/tags/%E9%96%8B%E7%99%BA%E3%83%A1%E3%83%A2/"},{"name":"work","slug":"work","link":"/tags/work/"},{"name":"外国人","slug":"外国人","link":"/tags/%E5%A4%96%E5%9B%BD%E4%BA%BA/"},{"name":"reading","slug":"reading","link":"/tags/reading/"},{"name":"YouTube","slug":"YouTube","link":"/tags/YouTube/"},{"name":"面接","slug":"面接","link":"/tags/%E9%9D%A2%E6%8E%A5/"},{"name":"SQL","slug":"SQL","link":"/tags/SQL/"},{"name":"Optimization","slug":"Optimization","link":"/tags/Optimization/"},{"name":"AWS","slug":"AWS","link":"/tags/AWS/"},{"name":"Infra","slug":"Infra","link":"/tags/Infra/"},{"name":"CI-CD","slug":"CI-CD","link":"/tags/CI-CD/"},{"name":"Spring","slug":"Spring","link":"/tags/Spring/"},{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"Backend","slug":"Backend","link":"/tags/Backend/"},{"name":"Mockito","slug":"Mockito","link":"/tags/Mockito/"},{"name":"Test","slug":"Test","link":"/tags/Test/"},{"name":"Tool","slug":"Tool","link":"/tags/Tool/"},{"name":"jp-memo","slug":"jp-memo","link":"/tags/jp-memo/"},{"name":"句読点","slug":"句読点","link":"/tags/%E5%8F%A5%E8%AA%AD%E7%82%B9/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"設計","slug":"設計","link":"/tags/%E8%A8%AD%E8%A8%88/"},{"name":"エンジニア知識","slug":"エンジニア知識","link":"/tags/%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E7%9F%A5%E8%AD%98/"}],"categories":[{"name":"作業","slug":"作業","link":"/categories/%E4%BD%9C%E6%A5%AD/"},{"name":"仕事ノート","slug":"作業/仕事ノート","link":"/categories/%E4%BD%9C%E6%A5%AD/%E4%BB%95%E4%BA%8B%E3%83%8E%E3%83%BC%E3%83%88/"},{"name":"作業メモ","slug":"作業/作業メモ","link":"/categories/%E4%BD%9C%E6%A5%AD/%E4%BD%9C%E6%A5%AD%E3%83%A1%E3%83%A2/"},{"name":"勉強ノート","slug":"作業/勉強ノート","link":"/categories/%E4%BD%9C%E6%A5%AD/%E5%8B%89%E5%BC%B7%E3%83%8E%E3%83%BC%E3%83%88/"},{"name":"その他","slug":"その他","link":"/categories/%E3%81%9D%E3%81%AE%E4%BB%96/"},{"name":"YouTube学習","slug":"YouTube学習","link":"/categories/YouTube%E5%AD%A6%E7%BF%92/"},{"name":"プログラミング","slug":"プログラミング","link":"/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"},{"name":"読書記事","slug":"その他/読書記事","link":"/categories/%E3%81%9D%E3%81%AE%E4%BB%96/%E8%AA%AD%E6%9B%B8%E8%A8%98%E4%BA%8B/"},{"name":"面接知識","slug":"YouTube学習/面接知識","link":"/categories/YouTube%E5%AD%A6%E7%BF%92/%E9%9D%A2%E6%8E%A5%E7%9F%A5%E8%AD%98/"},{"name":"DB","slug":"プログラミング/DB","link":"/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/DB/"},{"name":"テクノロジー","slug":"テクノロジー","link":"/categories/%E3%83%86%E3%82%AF%E3%83%8E%E3%83%AD%E3%82%B8%E3%83%BC/"},{"name":"Infra","slug":"プログラミング/Infra","link":"/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/Infra/"},{"name":"Java","slug":"プログラミング/Java","link":"/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/Java/"},{"name":"ツール","slug":"プログラミング/ツール","link":"/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/%E3%83%84%E3%83%BC%E3%83%AB/"},{"name":"設計","slug":"テクノロジー/設計","link":"/categories/%E3%83%86%E3%82%AF%E3%83%8E%E3%83%AD%E3%82%B8%E3%83%BC/%E8%A8%AD%E8%A8%88/"}],"pages":[{"title":"","text":"google-site-verification: google336114c45a30c979.html","link":"/google336114c45a30c979.html"},{"title":"自己紹介","text":" こんにちは、ここではパスワードが必要です。","link":"/about/index.html"}]}